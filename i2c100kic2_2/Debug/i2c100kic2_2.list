
i2c100kic2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ac  080054ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca86  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c97  00000000  00000000  0002cb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  0002f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024331  00000000  00000000  0002fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daf7  00000000  00000000  00053f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5d3c  00000000  00000000  000619f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137734  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003310  00000000  00000000  00137784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800525c 	.word	0x0800525c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800525c 	.word	0x0800525c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d76:	f000 ff05 	bl	8001b84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d7a:	f000 f8d5 	bl	8000f28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d7e:	f000 f9a7 	bl	80010d0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000d82:	f000 f93b 	bl	8000ffc <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8000d86:	f000 f979 	bl	800107c <MX_USART3_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//
	printf("\n\r");
 8000d8a:	4858      	ldr	r0, [pc, #352]	; (8000eec <main+0x17c>)
 8000d8c:	f003 fad8 	bl	8004340 <iprintf>
	HAL_Delay(3000);
 8000d90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d94:	f000 ff68 	bl	8001c68 <HAL_Delay>
	/* Output a message on Hyperterminal using printf function */
	printf(" *******************************\n\r");
 8000d98:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <main+0x180>)
 8000d9a:	f003 fad1 	bl	8004340 <iprintf>
	printf("  SHT3x-DIS DRIVER test\n\r");
 8000d9e:	4855      	ldr	r0, [pc, #340]	; (8000ef4 <main+0x184>)
 8000da0:	f003 face 	bl	8004340 <iprintf>
	printf(" *******************************\n\r");
 8000da4:	4852      	ldr	r0, [pc, #328]	; (8000ef0 <main+0x180>)
 8000da6:	f003 facb 	bl	8004340 <iprintf>
	statusPort_f sht3x_config;
	statusPort_f sht3x_status;
	uint8_t register_status[2];

	I2C_Handle_Port_t i2c;
	i2c.instance = &hi2c2;
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <main+0x188>)
 8000dac:	60fb      	str	r3, [r7, #12]

	sht3x_init = SHT3x_DIS_init  (&sht3x_dev, &i2c);
 8000dae:	f107 020c 	add.w	r2, r7, #12
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fc80 	bl	80016be <SHT3x_DIS_init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	77fb      	strb	r3, [r7, #31]
	if (sht3x_init == STATUS_PORT_OK){
 8000dc2:	7ffb      	ldrb	r3, [r7, #31]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d103      	bne.n	8000dd0 <main+0x60>
		printf ("  - SHT3x-DIS Init: OK\n\r");
 8000dc8:	484c      	ldr	r0, [pc, #304]	; (8000efc <main+0x18c>)
 8000dca:	f003 fab9 	bl	8004340 <iprintf>
 8000dce:	e004      	b.n	8000dda <main+0x6a>
	}else{
		printf ("  - SHT3x-DIS Init: ERROR  (%u)\n\r", sht3x_init);
 8000dd0:	7ffb      	ldrb	r3, [r7, #31]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	484a      	ldr	r0, [pc, #296]	; (8000f00 <main+0x190>)
 8000dd6:	f003 fab3 	bl	8004340 <iprintf>
	}

	sht3x_config = SHT3x_DIS_config(&sht3x_dev, SHT3X_ADDRESS_A, SHT3X_MODE_HIGH_CS_ENABLED);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	f642 4206 	movw	r2, #11270	; 0x2c06
 8000de2:	2144      	movs	r1, #68	; 0x44
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fc83 	bl	80016f0 <SHT3x_DIS_config>
 8000dea:	4603      	mov	r3, r0
 8000dec:	77bb      	strb	r3, [r7, #30]
	if (sht3x_config == STATUS_PORT_OK){
 8000dee:	7fbb      	ldrb	r3, [r7, #30]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d103      	bne.n	8000dfc <main+0x8c>
		printf ("  - SHT3x-DIS Config: OK\n\r");
 8000df4:	4843      	ldr	r0, [pc, #268]	; (8000f04 <main+0x194>)
 8000df6:	f003 faa3 	bl	8004340 <iprintf>
 8000dfa:	e004      	b.n	8000e06 <main+0x96>
	}else{
		printf ("  - SHT3x-DIS Config: ERROR  (%u)\n\r", sht3x_config);
 8000dfc:	7fbb      	ldrb	r3, [r7, #30]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4841      	ldr	r0, [pc, #260]	; (8000f08 <main+0x198>)
 8000e02:	f003 fa9d 	bl	8004340 <iprintf>
	}

	uint32_t temp = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
	uint32_t hum = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]

	uint32_t f_60 = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t temp_test_heater = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]

	register_status[0] = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	743b      	strb	r3, [r7, #16]
	register_status[0] = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	743b      	strb	r3, [r7, #16]
	statusPort_f SHT3x_DIS_read_TH(sht3x_t * const dev, uint32_t *temp,uint32_t *hum);
	*/

	while (1)
	{
		if((temp>temp_test_heater) && (f_60 == 1)){
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	6a3a      	ldr	r2, [r7, #32]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d219      	bcs.n	8000e5a <main+0xea>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d116      	bne.n	8000e5a <main+0xea>
			printf("  SHT3x-DIS heater test\n\r");
 8000e2c:	4837      	ldr	r0, [pc, #220]	; (8000f0c <main+0x19c>)
 8000e2e:	f003 fa87 	bl	8004340 <iprintf>
			sht3x_status = SHT3x_DIS_heater(&sht3x_dev,0);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fd33 	bl	80018a4 <SHT3x_DIS_heater>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	777b      	strb	r3, [r7, #29]
			if (sht3x_status == STATUS_PORT_OK){
 8000e42:	7f7b      	ldrb	r3, [r7, #29]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d103      	bne.n	8000e50 <main+0xe0>
				printf ("  - SHT3x-DIS heater: OFF\n\r");
 8000e48:	4831      	ldr	r0, [pc, #196]	; (8000f10 <main+0x1a0>)
 8000e4a:	f003 fa79 	bl	8004340 <iprintf>
 8000e4e:	e004      	b.n	8000e5a <main+0xea>
			}else{
				printf ("  - SHT3x-DIS heater: ERROR  (%u)\n\r", sht3x_status);
 8000e50:	7f7b      	ldrb	r3, [r7, #29]
 8000e52:	4619      	mov	r1, r3
 8000e54:	482f      	ldr	r0, [pc, #188]	; (8000f14 <main+0x1a4>)
 8000e56:	f003 fa73 	bl	8004340 <iprintf>
			}
		}

		if((hum>60) && (f_60==0) ){
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b3c      	cmp	r3, #60	; 0x3c
 8000e5e:	d91e      	bls.n	8000e9e <main+0x12e>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11b      	bne.n	8000e9e <main+0x12e>
			temp_test_heater = temp+3;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3303      	adds	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
			f_60 = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24

			printf("  SHT3x-DIS heater test\n\r");
 8000e70:	4826      	ldr	r0, [pc, #152]	; (8000f0c <main+0x19c>)
 8000e72:	f003 fa65 	bl	8004340 <iprintf>
			sht3x_status = SHT3x_DIS_heater(&sht3x_dev,1);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd11 	bl	80018a4 <SHT3x_DIS_heater>
 8000e82:	4603      	mov	r3, r0
 8000e84:	777b      	strb	r3, [r7, #29]
			if (sht3x_status == STATUS_PORT_OK){
 8000e86:	7f7b      	ldrb	r3, [r7, #29]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <main+0x124>
				printf ("  - SHT3x-DIS heater: ON\n\r");
 8000e8c:	4822      	ldr	r0, [pc, #136]	; (8000f18 <main+0x1a8>)
 8000e8e:	f003 fa57 	bl	8004340 <iprintf>
 8000e92:	e004      	b.n	8000e9e <main+0x12e>
			}else{
				printf ("  - SHT3x-DIS Reset: ERROR  (%u)\n\r", sht3x_status);
 8000e94:	7f7b      	ldrb	r3, [r7, #29]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4820      	ldr	r0, [pc, #128]	; (8000f1c <main+0x1ac>)
 8000e9a:	f003 fa51 	bl	8004340 <iprintf>
				printf (" - SHT3x-DIS Clear Status Register ERROR: (%u)\n\r", sht3x_status);
			}
			*/
		}

		sht3x_status = SHT3x_DIS_read_TH(&sht3x_dev,&temp,&hum);
 8000e9e:	1d3a      	adds	r2, r7, #4
 8000ea0:	f107 0108 	add.w	r1, r7, #8
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fd1f 	bl	80018ec <SHT3x_DIS_read_TH>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	777b      	strb	r3, [r7, #29]
		if (sht3x_status == STATUS_PORT_OK){
 8000eb2:	7f7b      	ldrb	r3, [r7, #29]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <main+0x154>
			printf (" TEMP: %u C  ---  HUM : %u%%\n\r", temp, hum);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <main+0x1b0>)
 8000ec0:	f003 fa3e 	bl	8004340 <iprintf>
		}

		//HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <main+0x1b4>)
 8000eca:	f001 f983 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f000 feca 	bl	8001c68 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <main+0x1b4>)
 8000edc:	f001 f97a 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_Delay(2900);
 8000ee0:	f640 3054 	movw	r0, #2900	; 0xb54
 8000ee4:	f000 fec0 	bl	8001c68 <HAL_Delay>
		if((temp>temp_test_heater) && (f_60 == 1)){
 8000ee8:	e799      	b.n	8000e1e <main+0xae>
 8000eea:	bf00      	nop
 8000eec:	08005274 	.word	0x08005274
 8000ef0:	08005278 	.word	0x08005278
 8000ef4:	0800529c 	.word	0x0800529c
 8000ef8:	2000008c 	.word	0x2000008c
 8000efc:	080052b8 	.word	0x080052b8
 8000f00:	080052d4 	.word	0x080052d4
 8000f04:	080052f8 	.word	0x080052f8
 8000f08:	08005314 	.word	0x08005314
 8000f0c:	08005338 	.word	0x08005338
 8000f10:	08005354 	.word	0x08005354
 8000f14:	08005370 	.word	0x08005370
 8000f18:	08005394 	.word	0x08005394
 8000f1c:	080053b0 	.word	0x080053b0
 8000f20:	080053d4 	.word	0x080053d4
 8000f24:	40020400 	.word	0x40020400

08000f28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f9fa 	bl	8004330 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f9c:	23a8      	movs	r3, #168	; 0xa8
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 f93b 	bl	8003228 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000fb8:	f000 f9ba 	bl	8001330 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fcc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2105      	movs	r1, #5
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fb9c 	bl	8003718 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000fe6:	f000 f9a3 	bl	8001330 <Error_Handler>
	}
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C2_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C2_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C2_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C2_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C2_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C2_Init+0x74>)
 800101a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_I2C2_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C2_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_I2C2_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C2_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_I2C2_Init+0x74>)
 800103a:	f001 f8e5 	bl	8002208 <HAL_I2C_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001044:	f000 f974 	bl	8001330 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C2_Init+0x74>)
 800104c:	f002 f871 	bl	8003132 <HAL_I2CEx_ConfigAnalogFilter>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 8001056:	f000 f96b 	bl	8001330 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_I2C2_Init+0x74>)
 800105e:	f002 f8a4 	bl	80031aa <HAL_I2CEx_ConfigDigitalFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 8001068:	f000 f962 	bl	8001330 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000008c 	.word	0x2000008c
 8001074:	40005800 	.word	0x40005800
 8001078:	000186a0 	.word	0x000186a0

0800107c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART3_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800108c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_ODD;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 800109c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80010a0:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010a4:	220c      	movs	r2, #12
 80010a6:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010b6:	f002 fd4f 	bl	8003b58 <HAL_UART_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_USART3_UART_Init+0x48>
	{
		Error_Handler();
 80010c0:	f000 f936 	bl	8001330 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000e0 	.word	0x200000e0
 80010cc:	40004800 	.word	0x40004800

080010d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	4b83      	ldr	r3, [pc, #524]	; (80012f8 <MX_GPIO_Init+0x228>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a82      	ldr	r2, [pc, #520]	; (80012f8 <MX_GPIO_Init+0x228>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b80      	ldr	r3, [pc, #512]	; (80012f8 <MX_GPIO_Init+0x228>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4b7c      	ldr	r3, [pc, #496]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a7b      	ldr	r2, [pc, #492]	; (80012f8 <MX_GPIO_Init+0x228>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b6e      	ldr	r3, [pc, #440]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a6d      	ldr	r2, [pc, #436]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <MX_GPIO_Init+0x228>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <MX_GPIO_Init+0x228>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a5f      	ldr	r2, [pc, #380]	; (80012f8 <MX_GPIO_Init+0x228>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <MX_GPIO_Init+0x228>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <MX_GPIO_Init+0x228>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80011b0:	4852      	ldr	r0, [pc, #328]	; (80012fc <MX_GPIO_Init+0x22c>)
 80011b2:	f001 f80f 	bl	80021d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4851      	ldr	r0, [pc, #324]	; (8001300 <MX_GPIO_Init+0x230>)
 80011bc:	f001 f80a 	bl	80021d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	484b      	ldr	r0, [pc, #300]	; (8001304 <MX_GPIO_Init+0x234>)
 80011d8:	f000 fe50 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ec:	230b      	movs	r3, #11
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4843      	ldr	r0, [pc, #268]	; (8001304 <MX_GPIO_Init+0x234>)
 80011f8:	f000 fe40 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011fc:	2386      	movs	r3, #134	; 0x86
 80011fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120c:	230b      	movs	r3, #11
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	483c      	ldr	r0, [pc, #240]	; (8001308 <MX_GPIO_Init+0x238>)
 8001218:	f000 fe30 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800121c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001220:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4831      	ldr	r0, [pc, #196]	; (80012fc <MX_GPIO_Init+0x22c>)
 8001236:	f000 fe21 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124c:	230b      	movs	r3, #11
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4829      	ldr	r0, [pc, #164]	; (80012fc <MX_GPIO_Init+0x22c>)
 8001258:	f000 fe10 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4823      	ldr	r0, [pc, #140]	; (8001300 <MX_GPIO_Init+0x230>)
 8001274:	f000 fe02 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_GPIO_Init+0x230>)
 800128c:	f000 fdf6 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001290:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001294:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012a2:	230a      	movs	r3, #10
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <MX_GPIO_Init+0x238>)
 80012ae:	f000 fde5 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <MX_GPIO_Init+0x238>)
 80012c8:	f000 fdd8 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0x230>)
 80012ea:	f000 fdc7 	bl	8001e7c <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40021800 	.word	0x40021800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000

0800130c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001314:	1d39      	adds	r1, r7, #4
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	2201      	movs	r2, #1
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <__io_putchar+0x20>)
 800131e:	f002 fc68 	bl	8003bf2 <HAL_UART_Transmit>

  return ch;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000e0 	.word	0x200000e0

08001330 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_I2C_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ca:	2303      	movs	r3, #3
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_I2C_MspInit+0x8c>)
 80013e6:	f000 fd49 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_I2C_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005800 	.word	0x40005800
 8001414:	40023800 	.word	0x40023800
 8001418:	40021400 	.word	0x40021400

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_UART_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12c      	bne.n	8001498 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_UART_MspInit+0x88>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_UART_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001494:	f000 fcf2 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004800 	.word	0x40004800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 fb96 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
	}

return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e009      	b.n	8001560 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fed9 	bl	800130c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf1      	blt.n	800154c <_write+0x12>
	}
	return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	605a      	str	r2, [r3, #4]
	return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
	return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f002 fe66 	bl	80042dc <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20030000 	.word	0x20030000
 800163c:	00000400 	.word	0x00000400
 8001640:	20000124 	.word	0x20000124
 8001644:	20000140 	.word	0x20000140

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff ffd7 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 fe25 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fb67 	bl	8000d70 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016b0:	080054b4 	.word	0x080054b4
  ldr r2, =_sbss
 80016b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016b8:	2000013c 	.word	0x2000013c

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <SHT3x_DIS_init>:

/* Variables */
I2C_Handle_Port_t i2c;

/* Functions */
statusPort_f SHT3x_DIS_init(sht3x_t * const dev, I2C_Handle_Port_t* i2c){
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	if (dev == NULL ) return STATUS_PORT_ERROR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <SHT3x_DIS_init+0x14>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e008      	b.n	80016e4 <SHT3x_DIS_init+0x26>
	if (i2c == NULL ) return STATUS_PORT_ERROR;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <SHT3x_DIS_init+0x1e>
 80016d8:	2301      	movs	r3, #1
 80016da:	e003      	b.n	80016e4 <SHT3x_DIS_init+0x26>
	dev->i2c_port = i2c;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	601a      	str	r2, [r3, #0]
	return STATUS_PORT_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SHT3x_DIS_config>:

statusPort_f SHT3x_DIS_config(sht3x_t * const dev,  sht3x_address_t my_address, sht3x_mode_t my_mode){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
 80016fc:	4613      	mov	r3, r2
 80016fe:	803b      	strh	r3, [r7, #0]
	if (dev == NULL ) return STATUS_PORT_ERROR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <SHT3x_DIS_config+0x1a>
 8001706:	2301      	movs	r3, #1
 8001708:	e0c0      	b.n	800188c <SHT3x_DIS_config+0x19c>

	//Address
	if ((my_address == SHT3X_ADDRESS_A) || (my_address == SHT3X_ADDRESS_B)){
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b44      	cmp	r3, #68	; 0x44
 800170e:	d002      	beq.n	8001716 <SHT3x_DIS_config+0x26>
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b45      	cmp	r3, #69	; 0x45
 8001714:	d103      	bne.n	800171e <SHT3x_DIS_config+0x2e>
		dev->address = my_address;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	711a      	strb	r2, [r3, #4]
 800171c:	e002      	b.n	8001724 <SHT3x_DIS_config+0x34>
	}else{
		dev->address = SHT3X_ADDRESS_A;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2244      	movs	r2, #68	; 0x44
 8001722:	711a      	strb	r2, [r3, #4]
	}

	//Mode
	switch (my_mode){
 8001724:	883b      	ldrh	r3, [r7, #0]
 8001726:	f642 4210 	movw	r2, #11280	; 0x2c10
 800172a:	4293      	cmp	r3, r2
 800172c:	f300 80a8 	bgt.w	8001880 <SHT3x_DIS_config+0x190>
 8001730:	f642 4206 	movw	r2, #11270	; 0x2c06
 8001734:	4293      	cmp	r3, r2
 8001736:	da2b      	bge.n	8001790 <SHT3x_DIS_config+0xa0>
 8001738:	f242 7237 	movw	r2, #10039	; 0x2737
 800173c:	4293      	cmp	r3, r2
 800173e:	f300 809f 	bgt.w	8001880 <SHT3x_DIS_config+0x190>
 8001742:	f242 7221 	movw	r2, #10017	; 0x2721
 8001746:	4293      	cmp	r3, r2
 8001748:	da32      	bge.n	80017b0 <SHT3x_DIS_config+0xc0>
 800174a:	f242 4216 	movw	r2, #9238	; 0x2416
 800174e:	4293      	cmp	r3, r2
 8001750:	f300 8096 	bgt.w	8001880 <SHT3x_DIS_config+0x190>
 8001754:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8001758:	da39      	bge.n	80017ce <SHT3x_DIS_config+0xde>
 800175a:	f242 3234 	movw	r2, #9012	; 0x2334
 800175e:	4293      	cmp	r3, r2
 8001760:	f300 808e 	bgt.w	8001880 <SHT3x_DIS_config+0x190>
 8001764:	f242 3222 	movw	r2, #8994	; 0x2322
 8001768:	4293      	cmp	r3, r2
 800176a:	da3e      	bge.n	80017ea <SHT3x_DIS_config+0xfa>
 800176c:	f242 2236 	movw	r2, #8758	; 0x2236
 8001770:	4293      	cmp	r3, r2
 8001772:	f300 8085 	bgt.w	8001880 <SHT3x_DIS_config+0x190>
 8001776:	f242 2220 	movw	r2, #8736	; 0x2220
 800177a:	4293      	cmp	r3, r2
 800177c:	da44      	bge.n	8001808 <SHT3x_DIS_config+0x118>
 800177e:	f242 0232 	movw	r2, #8242	; 0x2032
 8001782:	4293      	cmp	r3, r2
 8001784:	dc6f      	bgt.n	8001866 <SHT3x_DIS_config+0x176>
 8001786:	f242 0224 	movw	r2, #8228	; 0x2024
 800178a:	4293      	cmp	r3, r2
 800178c:	da5b      	bge.n	8001846 <SHT3x_DIS_config+0x156>
 800178e:	e077      	b.n	8001880 <SHT3x_DIS_config+0x190>
 8001790:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8001794:	3b06      	subs	r3, #6
 8001796:	2201      	movs	r2, #1
 8001798:	409a      	lsls	r2, r3
 800179a:	f240 4381 	movw	r3, #1153	; 0x481
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d164      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 80017ae:	e067      	b.n	8001880 <SHT3x_DIS_config+0x190>
 80017b0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80017b4:	3b21      	subs	r3, #33	; 0x21
 80017b6:	2201      	movs	r2, #1
 80017b8:	409a      	lsls	r2, r3
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <SHT3x_DIS_config+0x1a8>)
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d155      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 80017cc:	e058      	b.n	8001880 <SHT3x_DIS_config+0x190>
 80017ce:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80017d2:	2201      	movs	r2, #1
 80017d4:	409a      	lsls	r2, r3
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <SHT3x_DIS_config+0x1ac>)
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d147      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 80017e8:	e04a      	b.n	8001880 <SHT3x_DIS_config+0x190>
 80017ea:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80017ee:	3b22      	subs	r3, #34	; 0x22
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <SHT3x_DIS_config+0x1b0>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d138      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 8001806:	e03b      	b.n	8001880 <SHT3x_DIS_config+0x190>
 8001808:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 800180c:	3b20      	subs	r3, #32
 800180e:	2201      	movs	r2, #1
 8001810:	409a      	lsls	r2, r3
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <SHT3x_DIS_config+0x1ac>)
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d129      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 8001824:	e02c      	b.n	8001880 <SHT3x_DIS_config+0x190>
 8001826:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
 800182a:	3b26      	subs	r3, #38	; 0x26
 800182c:	2201      	movs	r2, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	f240 4381 	movw	r3, #1153	; 0x481
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d119      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 8001844:	e01c      	b.n	8001880 <SHT3x_DIS_config+0x190>
 8001846:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800184a:	3b24      	subs	r3, #36	; 0x24
 800184c:	2201      	movs	r2, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	f644 0301 	movw	r3, #18433	; 0x4801
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <SHT3x_DIS_config+0x188>
 8001864:	e00c      	b.n	8001880 <SHT3x_DIS_config+0x190>
 8001866:	f242 1230 	movw	r2, #8496	; 0x2130
 800186a:	4293      	cmp	r3, r2
 800186c:	dc08      	bgt.n	8001880 <SHT3x_DIS_config+0x190>
 800186e:	f242 1226 	movw	r2, #8486	; 0x2126
 8001872:	4293      	cmp	r3, r2
 8001874:	dad7      	bge.n	8001826 <SHT3x_DIS_config+0x136>
 8001876:	e003      	b.n	8001880 <SHT3x_DIS_config+0x190>
	case SHT3X_MODE_MEDIUM_MPS040:
	case SHT3X_MODE_LOW_MPS040:
	case SHT3X_MODE_HIGH_MPS100:
	case SHT3X_MODE_MEDIUM_MPS100:
	case SHT3X_MODE_LOW_MPS100:
		dev->mode = my_mode;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	883a      	ldrh	r2, [r7, #0]
 800187c:	80da      	strh	r2, [r3, #6]
		break;
 800187e:	e004      	b.n	800188a <SHT3x_DIS_config+0x19a>
	default:
		dev->mode = SHT3X_MODE_HIGH_CS_ENABLED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f642 4206 	movw	r2, #11270	; 0x2c06
 8001886:	80da      	strh	r2, [r3, #6]
		break;
 8001888:	bf00      	nop
	}
	return STATUS_PORT_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	00400201 	.word	0x00400201
 800189c:	00400801 	.word	0x00400801
 80018a0:	00040081 	.word	0x00040081

080018a4 <SHT3x_DIS_heater>:
	tx_buffer[1] =  SHT3X_COMMAND_SOFT_RESET & 0x00FFu;
	status_error = _SHT3x_DIS_write(dev,tx_buffer);
	return status_error;
}

statusPort_f SHT3x_DIS_heater(sht3x_t * const dev, bool enabled){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
	statusPort_f status_error;
	if (dev == NULL ) return STATUS_PORT_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <SHT3x_DIS_heater+0x16>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e014      	b.n	80018e4 <SHT3x_DIS_heater+0x40>

	uint8_t tx_buffer[2];
	if(enabled){
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <SHT3x_DIS_heater+0x26>
		tx_buffer[0] = (SHT3X_COMMAND_HEATER_ENABLED & 0xFF00u) >> 8u;
 80018c0:	2330      	movs	r3, #48	; 0x30
 80018c2:	733b      	strb	r3, [r7, #12]
		tx_buffer[1] =  SHT3X_COMMAND_HEATER_ENABLED & 0x00FFu;
 80018c4:	236d      	movs	r3, #109	; 0x6d
 80018c6:	737b      	strb	r3, [r7, #13]
 80018c8:	e003      	b.n	80018d2 <SHT3x_DIS_heater+0x2e>
	}else{
		tx_buffer[0] = (SHT3X_COMMAND_HEATER_DISABLED & 0xFF00u) >> 8u;
 80018ca:	2330      	movs	r3, #48	; 0x30
 80018cc:	733b      	strb	r3, [r7, #12]
		tx_buffer[1] =  SHT3X_COMMAND_HEATER_DISABLED & 0x00FFu;
 80018ce:	2366      	movs	r3, #102	; 0x66
 80018d0:	737b      	strb	r3, [r7, #13]
	}
	status_error = _SHT3x_DIS_write(dev,tx_buffer);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f83f 	bl	800195c <_SHT3x_DIS_write>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
	return status_error;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SHT3x_DIS_read_TH>:
	tx_buffer[1] =  SHT3X_COMMAND_CLEAR_STATUS & 0x00FFu;
	status_error = _SHT3x_DIS_write(dev,tx_buffer);
	return status_error;
}

statusPort_f SHT3x_DIS_read_TH(sht3x_t * const dev, uint32_t *temp,uint32_t *hum){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	statusPort_f status_error;
	if (dev == NULL ) return STATUS_PORT_ERROR;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <SHT3x_DIS_read_TH+0x16>
 80018fe:	2301      	movs	r3, #1
 8001900:	e028      	b.n	8001954 <SHT3x_DIS_read_TH+0x68>
	if (temp == NULL ) return STATUS_PORT_ERROR;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <SHT3x_DIS_read_TH+0x20>
 8001908:	2301      	movs	r3, #1
 800190a:	e023      	b.n	8001954 <SHT3x_DIS_read_TH+0x68>
	if (hum == NULL ) return STATUS_PORT_ERROR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <SHT3x_DIS_read_TH+0x2a>
 8001912:	2301      	movs	r3, #1
 8001914:	e01e      	b.n	8001954 <SHT3x_DIS_read_TH+0x68>

	uint8_t tx_buffer[2];
	tx_buffer[0] = ((dev->mode) & 0xFF00u) >> 8u;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	88db      	ldrh	r3, [r3, #6]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	753b      	strb	r3, [r7, #20]
	tx_buffer[1] =  (dev->mode) & 0x00FFu;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	88db      	ldrh	r3, [r3, #6]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	757b      	strb	r3, [r7, #21]
	status_error = _SHT3x_DIS_write(dev, tx_buffer);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f813 	bl	800195c <_SHT3x_DIS_write>
 8001936:	4603      	mov	r3, r0
 8001938:	75fb      	strb	r3, [r7, #23]
	if(status_error != STATUS_PORT_OK) return status_error;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SHT3x_DIS_read_TH+0x58>
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	e007      	b.n	8001954 <SHT3x_DIS_read_TH+0x68>
	status_error = _SHT3x_DIS_read_TH(dev, temp, hum);
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f81d 	bl	8001988 <_SHT3x_DIS_read_TH>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
	return status_error;
 8001952:	7dfb      	ldrb	r3, [r7, #23]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_SHT3x_DIS_write>:

static statusPort_f _SHT3x_DIS_write(sht3x_t * const dev, uint8_t *data){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	statusPort_f status_error;
	status_error = SHT3x_DIS_write_PORT(dev->address, data, 2, dev->i2c_port);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	791b      	ldrb	r3, [r3, #4]
 800196a:	b298      	uxth	r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2202      	movs	r2, #2
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	f000 f8cb 	bl	8001b0e <SHT3x_DIS_write_PORT>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
	return status_error;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <_SHT3x_DIS_read_TH>:

static statusPort_f _SHT3x_DIS_read_TH(sht3x_t * const dev, uint32_t *temp,uint32_t *hum){
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	statusPort_f status_error;
	uint8_t rx_buffer[6];

	rx_buffer[0] = 0x00;
 8001994:	2300      	movs	r3, #0
 8001996:	743b      	strb	r3, [r7, #16]
	rx_buffer[1] = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	747b      	strb	r3, [r7, #17]
	rx_buffer[2] = 0x00;
 800199c:	2300      	movs	r3, #0
 800199e:	74bb      	strb	r3, [r7, #18]
	rx_buffer[3] = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	74fb      	strb	r3, [r7, #19]
	rx_buffer[4] = 0x00;
 80019a4:	2300      	movs	r3, #0
 80019a6:	753b      	strb	r3, [r7, #20]
	rx_buffer[5] = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	757b      	strb	r3, [r7, #21]

	status_error = SHT3x_DIS_read_PORT(dev->address, rx_buffer,6,dev->i2c_port);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	b298      	uxth	r0, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f107 0110 	add.w	r1, r7, #16
 80019ba:	2206      	movs	r2, #6
 80019bc:	f000 f8c3 	bl	8001b46 <SHT3x_DIS_read_PORT>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75fb      	strb	r3, [r7, #23]
	if(status_error != STATUS_PORT_OK) return status_error;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <_SHT3x_DIS_read_TH+0x46>
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	e054      	b.n	8001a78 <_SHT3x_DIS_read_TH+0xf0>

	//CheckCrc
	if (_SHT3x_DIS_CheckCrc(&rx_buffer[0], 2, rx_buffer[2]) == 0){
 80019ce:	7cba      	ldrb	r2, [r7, #18]
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f85a 	bl	8001a90 <_SHT3x_DIS_CheckCrc>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d120      	bne.n	8001a24 <_SHT3x_DIS_read_TH+0x9c>
		*temp = (uint32_t)(((rx_buffer[0]*256) + rx_buffer[1])*175)/65535.0-45.0;
 80019e2:	7c3b      	ldrb	r3, [r7, #16]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	7c7a      	ldrb	r2, [r7, #17]
 80019e8:	4413      	add	r3, r2
 80019ea:	22af      	movs	r2, #175	; 0xaf
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd8f 	bl	8000514 <__aeabi_ui2d>
 80019f6:	a322      	add	r3, pc, #136	; (adr r3, 8001a80 <_SHT3x_DIS_read_TH+0xf8>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe ff2e 	bl	800085c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <_SHT3x_DIS_read_TH+0x100>)
 8001a0e:	f7fe fc43 	bl	8000298 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f807 	bl	8000a2c <__aeabi_d2uiz>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	601a      	str	r2, [r3, #0]
	}

	//CheckCrc
	if (_SHT3x_DIS_CheckCrc(&rx_buffer[3], 2, rx_buffer[5]) == 0){
 8001a24:	7d7a      	ldrb	r2, [r7, #21]
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f82e 	bl	8001a90 <_SHT3x_DIS_CheckCrc>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11d      	bne.n	8001a76 <_SHT3x_DIS_read_TH+0xee>
		*hum =  (uint32_t)(((rx_buffer[3]*256) + rx_buffer[4]))*100.0/65535.0;
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	7d3a      	ldrb	r2, [r7, #20]
 8001a40:	4413      	add	r3, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd66 	bl	8000514 <__aeabi_ui2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_SHT3x_DIS_read_TH+0x104>)
 8001a4e:	f7fe fddb 	bl	8000608 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	a309      	add	r3, pc, #36	; (adr r3, 8001a80 <_SHT3x_DIS_read_TH+0xf8>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fefc 	bl	800085c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7fe ffde 	bl	8000a2c <__aeabi_d2uiz>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
	}

	return STATUS_PORT_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40efffe0 	.word	0x40efffe0
 8001a88:	40468000 	.word	0x40468000
 8001a8c:	40590000 	.word	0x40590000

08001a90 <_SHT3x_DIS_CheckCrc>:

typedef enum {
	CHECKSUM_ERROR = 0X04
} etError;

uint8_t _SHT3x_DIS_CheckCrc(uint8_t data[], uint8_t nbrOfBytes, uint8_t checksum){
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	70bb      	strb	r3, [r7, #2]
	uint8_t crc = 0xff;
 8001aa0:	23ff      	movs	r3, #255	; 0xff
 8001aa2:	73fb      	strb	r3, [r7, #15]
	uint8_t byteCtr;
	//calculates 8-Bit checksum with given polynomial
	for (byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73bb      	strb	r3, [r7, #14]
 8001aa8:	e020      	b.n	8001aec <_SHT3x_DIS_CheckCrc+0x5c>
		crc ^= (data[byteCtr]);
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4053      	eors	r3, r2
 8001ab6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	737b      	strb	r3, [r7, #13]
 8001abc:	e010      	b.n	8001ae0 <_SHT3x_DIS_CheckCrc+0x50>
			if (crc & 0x80)
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da06      	bge.n	8001ad4 <_SHT3x_DIS_CheckCrc+0x44>
				crc = (uint8_t)((uint8_t)(crc << 1) ^ POLYNOMIAL);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e002      	b.n	8001ada <_SHT3x_DIS_CheckCrc+0x4a>
			else
				crc = (crc << 1);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	3301      	adds	r3, #1
 8001ade:	737b      	strb	r3, [r7, #13]
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d9eb      	bls.n	8001abe <_SHT3x_DIS_CheckCrc+0x2e>
	for (byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++) {
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	73bb      	strb	r3, [r7, #14]
 8001aec:	7bba      	ldrb	r2, [r7, #14]
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3da      	bcc.n	8001aaa <_SHT3x_DIS_CheckCrc+0x1a>
		}
	}
	if (crc != checksum)
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <_SHT3x_DIS_CheckCrc+0x70>
		return CHECKSUM_ERROR;
 8001afc:	2304      	movs	r3, #4
 8001afe:	e000      	b.n	8001b02 <_SHT3x_DIS_CheckCrc+0x72>
	else
		return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <SHT3x_DIS_write_PORT>:
#include "inc/sht3x_dis_stm32f4xx_port.h"

#define TIMEOUT 2000

statusPort_f SHT3x_DIS_write_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af02      	add	r7, sp, #8
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81fb      	strh	r3, [r7, #14]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Master_Transmit(i2c_handle->instance, DevAddress<<1, pData, Size,TIMEOUT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f000 fcac 	bl	8002490 <HAL_I2C_Master_Transmit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]
	return (statusPort_f)i2c_status;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <SHT3x_DIS_read_PORT>:

statusPort_f SHT3x_DIS_read_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b088      	sub	sp, #32
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4603      	mov	r3, r0
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	4613      	mov	r3, r2
 8001b56:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef i2c_status;
	HAL_Delay(10);
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f000 f885 	bl	8001c68 <HAL_Delay>
	i2c_status = HAL_I2C_Master_Receive(i2c_handle->instance, (DevAddress<<1), pData, Size,TIMEOUT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	b299      	uxth	r1, r3
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	f000 fd8b 	bl	800268c <HAL_I2C_Master_Receive>
 8001b76:	4603      	mov	r3, r0
 8001b78:	75fb      	strb	r3, [r7, #23]
	return (statusPort_f)i2c_status;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f931 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fbc0 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f93b 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f911 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000128 	.word	0x20000128

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000128 	.word	0x20000128

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff47 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff5c 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffb0 	bl	8001dd0 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e177      	b.n	8002188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8166 	bne.w	8002182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80c0 	beq.w	8002182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a61      	ldr	r2, [pc, #388]	; (80021a4 <HAL_GPIO_Init+0x328>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_GPIO_Init+0x32c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d037      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_GPIO_Init+0x330>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_GPIO_Init+0x23a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_GPIO_Init+0x338>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x232>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x33c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x340>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x22a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x344>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_GPIO_Init+0x348>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_GPIO_Init+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_GPIO_Init+0x350>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x21a>
 8002092:	2309      	movs	r3, #9
 8002094:	e012      	b.n	80020bc <HAL_GPIO_Init+0x240>
 8002096:	230a      	movs	r3, #10
 8002098:	e010      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209a:	2308      	movs	r3, #8
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x328>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x354>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae84 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40022400 	.word	0x40022400
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e12b      	b.n	8002472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff f8ac 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800226c:	f001 fc4c 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a81      	ldr	r2, [pc, #516]	; (800247c <HAL_I2C_Init+0x274>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d807      	bhi.n	800228c <HAL_I2C_Init+0x84>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a80      	ldr	r2, [pc, #512]	; (8002480 <HAL_I2C_Init+0x278>)
 8002280:	4293      	cmp	r3, r2
 8002282:	bf94      	ite	ls
 8002284:	2301      	movls	r3, #1
 8002286:	2300      	movhi	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e006      	b.n	800229a <HAL_I2C_Init+0x92>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <HAL_I2C_Init+0x27c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0e7      	b.n	8002472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a78      	ldr	r2, [pc, #480]	; (8002488 <HAL_I2C_Init+0x280>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_I2C_Init+0x274>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d802      	bhi.n	80022dc <HAL_I2C_Init+0xd4>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3301      	adds	r3, #1
 80022da:	e009      	b.n	80022f0 <HAL_I2C_Init+0xe8>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_I2C_Init+0x284>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	3301      	adds	r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	495c      	ldr	r1, [pc, #368]	; (800247c <HAL_I2C_Init+0x274>)
 800230c:	428b      	cmp	r3, r1
 800230e:	d819      	bhi.n	8002344 <HAL_I2C_Init+0x13c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e59      	subs	r1, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fbb1 f3f3 	udiv	r3, r1, r3
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002324:	400b      	ands	r3, r1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_I2C_Init+0x138>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e59      	subs	r1, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fbb1 f3f3 	udiv	r3, r1, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	e051      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002340:	2304      	movs	r3, #4
 8002342:	e04f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <HAL_I2C_Init+0x168>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e012      	b.n	8002396 <HAL_I2C_Init+0x18e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Init+0x196>
 800239a:	2301      	movs	r3, #1
 800239c:	e022      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_I2C_Init+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e58      	subs	r0, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	440b      	add	r3, r1
 80023b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	6809      	ldr	r1, [r1, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6911      	ldr	r1, [r2, #16]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	000186a0 	.word	0x000186a0
 8002480:	001e847f 	.word	0x001e847f
 8002484:	003d08ff 	.word	0x003d08ff
 8002488:	431bde83 	.word	0x431bde83
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	461a      	mov	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	817b      	strh	r3, [r7, #10]
 80024a0:	4613      	mov	r3, r2
 80024a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff fbd4 	bl	8001c50 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	f040 80e0 	bne.w	8002678 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2319      	movs	r3, #25
 80024be:	2201      	movs	r2, #1
 80024c0:	4970      	ldr	r1, [pc, #448]	; (8002684 <HAL_I2C_Master_Transmit+0x1f4>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fc58 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0d3      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x50>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0cc      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d007      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2221      	movs	r2, #33	; 0x21
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2210      	movs	r2, #16
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	893a      	ldrh	r2, [r7, #8]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a50      	ldr	r2, [pc, #320]	; (8002688 <HAL_I2C_Master_Transmit+0x1f8>)
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6a3a      	ldr	r2, [r7, #32]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fac2 	bl	8002ad8 <I2C_MasterRequestWrite>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e08d      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002574:	e066      	b.n	8002644 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fcd2 	bl	8002f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06b      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d11b      	bne.n	8002618 <HAL_I2C_Master_Transmit+0x188>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6a39      	ldr	r1, [r7, #32]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fcc2 	bl	8002fa6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e01a      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d194      	bne.n	8002576 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	00100002 	.word	0x00100002
 8002688:	ffff0000 	.word	0xffff0000

0800268c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
 800269c:	4613      	mov	r3, r2
 800269e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff fad6 	bl	8001c50 <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	f040 820b 	bne.w	8002aca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2319      	movs	r3, #25
 80026ba:	2201      	movs	r2, #1
 80026bc:	497c      	ldr	r1, [pc, #496]	; (80028b0 <HAL_I2C_Master_Receive+0x224>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fb5a 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	e1fe      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_I2C_Master_Receive+0x50>
 80026d8:	2302      	movs	r3, #2
 80026da:	e1f7      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d007      	beq.n	8002702 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002710:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2222      	movs	r2, #34	; 0x22
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2210      	movs	r2, #16
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_I2C_Master_Receive+0x228>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002744:	8979      	ldrh	r1, [r7, #10]
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa46 	bl	8002bdc <I2C_MasterRequestRead>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1b8      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e18c      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	2b01      	cmp	r3, #1
 8002790:	d11b      	bne.n	80027ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e16c      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d11b      	bne.n	800280a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	e14c      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002830:	e138      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b03      	cmp	r3, #3
 8002838:	f200 80f1 	bhi.w	8002a1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	2b01      	cmp	r3, #1
 8002842:	d123      	bne.n	800288c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fbed 	bl	8003028 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e139      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288a:	e10b      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b02      	cmp	r3, #2
 8002892:	d14e      	bne.n	8002932 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	2200      	movs	r2, #0
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_I2C_Master_Receive+0x22c>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fa6a 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e10e      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002930:	e0b8      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	2200      	movs	r2, #0
 800293a:	4966      	ldr	r1, [pc, #408]	; (8002ad4 <HAL_I2C_Master_Receive+0x448>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fa1b 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0bf      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	494f      	ldr	r1, [pc, #316]	; (8002ad4 <HAL_I2C_Master_Receive+0x448>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f9ed 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e091      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a1c:	e042      	b.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fb00 	bl	8003028 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e04c      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d118      	bne.n	8002aa4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f aec2 	bne.w	8002832 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	00010004 	.word	0x00010004

08002ad8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d006      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00b      	b.n	8002b2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d107      	bne.n	8002b2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f91d 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d103      	bne.n	8002b5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e035      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e01b      	b.n	8002bb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	11db      	asrs	r3, r3, #7
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0306 	and.w	r3, r3, #6
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f063 030f 	orn	r3, r3, #15
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <I2C_MasterRequestWrite+0xfc>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f943 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e010      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <I2C_MasterRequestWrite+0x100>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f933 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010008 	.word	0x00010008
 8002bd8:	00010002 	.word	0x00010002

08002bdc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	460b      	mov	r3, r1
 8002bea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d006      	beq.n	8002c16 <I2C_MasterRequestRead+0x3a>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d003      	beq.n	8002c16 <I2C_MasterRequestRead+0x3a>
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c14:	d108      	bne.n	8002c28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e00b      	b.n	8002c40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	2b11      	cmp	r3, #17
 8002c2e:	d107      	bne.n	8002c40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f893 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d103      	bne.n	8002c70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e079      	b.n	8002d68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7c:	d108      	bne.n	8002c90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]
 8002c8e:	e05f      	b.n	8002d50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	11db      	asrs	r3, r3, #7
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0306 	and.w	r3, r3, #6
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f063 030f 	orn	r3, r3, #15
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4930      	ldr	r1, [pc, #192]	; (8002d70 <I2C_MasterRequestRead+0x194>)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8b9 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e054      	b.n	8002d68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4929      	ldr	r1, [pc, #164]	; (8002d74 <I2C_MasterRequestRead+0x198>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8a9 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e044      	b.n	8002d68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f831 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2a:	d103      	bne.n	8002d34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e017      	b.n	8002d68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	11db      	asrs	r3, r3, #7
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0306 	and.w	r3, r3, #6
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f063 030e 	orn	r3, r3, #14
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4907      	ldr	r1, [pc, #28]	; (8002d74 <I2C_MasterRequestRead+0x198>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f865 	bl	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	00010008 	.word	0x00010008
 8002d74:	00010002 	.word	0x00010002

08002d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d88:	e025      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d021      	beq.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d92:	f7fe ff5d 	bl	8001c50 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e023      	b.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10d      	bne.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	e00c      	b.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0b6      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e34:	e051      	b.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d123      	bne.n	8002e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e046      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d021      	beq.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fedb 	bl	8001c50 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e020      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e00b      	b.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d18d      	bne.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f30:	e02d      	b.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f8ce 	bl	80030d4 <I2C_IsAcknowledgeFailed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02d      	b.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d021      	beq.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fe81 	bl	8001c50 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d1ca      	bne.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb2:	e02d      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f88d 	bl	80030d4 <I2C_IsAcknowledgeFailed>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e02d      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d021      	beq.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe fe40 	bl	8001c50 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d1ca      	bne.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003034:	e042      	b.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	d119      	bne.n	8003078 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0210 	mvn.w	r2, #16
 800304c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e029      	b.n	80030cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fe fdea 	bl	8001c50 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d302      	bcc.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d116      	bne.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e007      	b.n	80030cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d1b5      	bne.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d11b      	bne.n	8003124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	d129      	bne.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0210 	bic.w	r2, r2, #16
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d12a      	bne.n	800321a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	89fa      	ldrh	r2, [r7, #14]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e267      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d075      	beq.n	8003332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b04      	cmp	r3, #4
 8003250:	d00c      	beq.n	800326c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325a:	2b08      	cmp	r3, #8
 800325c:	d112      	bne.n	8003284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326a:	d10b      	bne.n	8003284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05b      	beq.n	8003330 <HAL_RCC_OscConfig+0x108>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d157      	bne.n	8003330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e242      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x74>
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a75      	ldr	r2, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xb0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x98>
 80032a6:	4b70      	ldr	r3, [pc, #448]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6f      	ldr	r2, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xb0>
 80032c0:	4b69      	ldr	r3, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a68      	ldr	r2, [pc, #416]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b66      	ldr	r3, [pc, #408]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a65      	ldr	r2, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fcb6 	bl	8001c50 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fcb2 	bl	8001c50 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e207      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xc0>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe fca2 	bl	8001c50 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fc9e 	bl	8001c50 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1f3      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0xe8>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11c      	bne.n	8003390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x152>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e1c7      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e03a      	b.n	8003406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_OscConfig+0x244>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe fc57 	bl	8001c50 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fe fc53 	bl	8001c50 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1a8      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4925      	ldr	r1, [pc, #148]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCC_OscConfig+0x244>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fc36 	bl	8001c50 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe fc32 	bl	8001c50 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e187      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d036      	beq.n	8003480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x248>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe fc16 	bl	8001c50 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003428:	f7fe fc12 	bl	8001c50 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e167      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_OscConfig+0x240>)
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x200>
 8003446:	e01b      	b.n	8003480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x248>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fbff 	bl	8001c50 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	e00e      	b.n	8003474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003456:	f7fe fbfb 	bl	8001c50 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d907      	bls.n	8003474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e150      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
 8003468:	40023800 	.word	0x40023800
 800346c:	42470000 	.word	0x42470000
 8003470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b88      	ldr	r3, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ea      	bne.n	8003456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8097 	beq.w	80035bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b81      	ldr	r3, [pc, #516]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b77      	ldr	r3, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d118      	bne.n	80034fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ca:	4b74      	ldr	r3, [pc, #464]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a73      	ldr	r2, [pc, #460]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fbbb 	bl	8001c50 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034de:	f7fe fbb7 	bl	8001c50 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e10c      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_OscConfig+0x474>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x2ea>
 8003504:	4b64      	ldr	r3, [pc, #400]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a63      	ldr	r2, [pc, #396]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x324>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x30c>
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0x324>
 8003534:	4b58      	ldr	r3, [pc, #352]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a54      	ldr	r2, [pc, #336]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fb7c 	bl	8001c50 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fb78 	bl	8001c50 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0cb      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ee      	beq.n	800355c <HAL_RCC_OscConfig+0x334>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fe fb66 	bl	8001c50 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003586:	e00a      	b.n	800359e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fe fb62 	bl	8001c50 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0b5      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ee      	bne.n	8003588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b39      	ldr	r3, [pc, #228]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	4a38      	ldr	r2, [pc, #224]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a1 	beq.w	8003708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d05c      	beq.n	800368c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d141      	bne.n	800365e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe fb36 	bl	8001c50 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fb32 	bl	8001c50 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e087      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	3b01      	subs	r3, #1
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe fb0b 	bl	8001c50 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fb07 	bl	8001c50 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e05c      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x416>
 800365c:	e054      	b.n	8003708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe faf4 	bl	8001c50 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe faf0 	bl	8001c50 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e045      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x444>
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e038      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
 80036a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x4ec>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d028      	beq.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d121      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11a      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036dc:	4293      	cmp	r3, r2
 80036de:	d111      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0cc      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b68      	ldr	r3, [pc, #416]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d90c      	bls.n	8003754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b65      	ldr	r3, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d044      	beq.n	8003838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d119      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e067      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4934      	ldr	r1, [pc, #208]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003808:	f7fe fa22 	bl	8001c50 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe fa1e 	bl	8001c50 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e04f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d20c      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f982 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	080053f4 	.word	0x080053f4
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b094      	sub	sp, #80	; 0x50
 80038ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
 80038f0:	2300      	movs	r3, #0
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f4:	2300      	movs	r3, #0
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fc:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d00d      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 8003908:	2b08      	cmp	r3, #8
 800390a:	f200 80e1 	bhi.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3a>
 8003916:	e0db      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800391a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800391c:	e0db      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800391e:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_GetSysClockFreq+0x208>)
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003922:	e0d8      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003924:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
 8003944:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003956:	4622      	mov	r2, r4
 8003958:	462b      	mov	r3, r5
 800395a:	f04f 0000 	mov.w	r0, #0
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	0159      	lsls	r1, r3, #5
 8003964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003968:	0150      	lsls	r0, r2, #5
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4621      	mov	r1, r4
 8003970:	1a51      	subs	r1, r2, r1
 8003972:	6139      	str	r1, [r7, #16]
 8003974:	4629      	mov	r1, r5
 8003976:	eb63 0301 	sbc.w	r3, r3, r1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003988:	4659      	mov	r1, fp
 800398a:	018b      	lsls	r3, r1, #6
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003992:	4651      	mov	r1, sl
 8003994:	018a      	lsls	r2, r1, #6
 8003996:	4651      	mov	r1, sl
 8003998:	ebb2 0801 	subs.w	r8, r2, r1
 800399c:	4659      	mov	r1, fp
 800399e:	eb63 0901 	sbc.w	r9, r3, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	eb18 0303 	adds.w	r3, r8, r3
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	462b      	mov	r3, r5
 80039c4:	eb49 0303 	adc.w	r3, r9, r3
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039d6:	4629      	mov	r1, r5
 80039d8:	024b      	lsls	r3, r1, #9
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e0:	4621      	mov	r1, r4
 80039e2:	024a      	lsls	r2, r1, #9
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f4:	f7fd f83a 	bl	8000a6c <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	e058      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	0159      	lsls	r1, r3, #5
 8003a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2e:	0150      	lsls	r0, r2, #5
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4641      	mov	r1, r8
 8003a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a54:	ebb2 040a 	subs.w	r4, r2, sl
 8003a58:	eb63 050b 	sbc.w	r5, r3, fp
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	00eb      	lsls	r3, r5, #3
 8003a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a6a:	00e2      	lsls	r2, r4, #3
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	18e3      	adds	r3, r4, r3
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	464b      	mov	r3, r9
 8003a78:	eb45 0303 	adc.w	r3, r5, r3
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	028b      	lsls	r3, r1, #10
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a94:	4621      	mov	r1, r4
 8003a96:	028a      	lsls	r2, r1, #10
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	61fa      	str	r2, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	f7fc ffe0 	bl	8000a6c <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3750      	adds	r7, #80	; 0x50
 8003adc:	46bd      	mov	sp, r7
 8003ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200

08003af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000000 	.word	0x20000000

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	f7ff fff0 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0a9b      	lsrs	r3, r3, #10
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	08005404 	.word	0x08005404

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffdc 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0b5b      	lsrs	r3, r3, #13
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08005404 	.word	0x08005404

08003b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e03f      	b.n	8003bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fc4c 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f929 	bl	8003df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b08a      	sub	sp, #40	; 0x28
 8003bf6:	af02      	add	r7, sp, #8
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d17c      	bne.n	8003d0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_UART_Transmit+0x2c>
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e075      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_UART_Transmit+0x3e>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e06e      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c46:	f7fe f803 	bl	8001c50 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d108      	bne.n	8003c74 <HAL_UART_Transmit+0x82>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e003      	b.n	8003c7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c84:	e02a      	b.n	8003cdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f840 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e036      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e007      	b.n	8003cce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1cf      	bne.n	8003c86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f810 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e006      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b090      	sub	sp, #64	; 0x40
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d26:	e050      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d04c      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d36:	f7fd ff8b 	bl	8001c50 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d241      	bcs.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d66:	637a      	str	r2, [r7, #52]	; 0x34
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9a:	623a      	str	r2, [r7, #32]
 8003d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	69f9      	ldr	r1, [r7, #28]
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d09f      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3740      	adds	r7, #64	; 0x40
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b0c0      	sub	sp, #256	; 0x100
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	68d9      	ldr	r1, [r3, #12]
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	ea40 0301 	orr.w	r3, r0, r1
 8003e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e4c:	f021 010c 	bic.w	r1, r1, #12
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	6999      	ldr	r1, [r3, #24]
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	ea40 0301 	orr.w	r3, r0, r1
 8003e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b8f      	ldr	r3, [pc, #572]	; (80040c0 <UART_SetConfig+0x2cc>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d005      	beq.n	8003e94 <UART_SetConfig+0xa0>
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b8d      	ldr	r3, [pc, #564]	; (80040c4 <UART_SetConfig+0x2d0>)
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d104      	bne.n	8003e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e94:	f7ff fe4c 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8003e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e9c:	e003      	b.n	8003ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e9e:	f7ff fe33 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8003ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb0:	f040 810c 	bne.w	80040cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	462b      	mov	r3, r5
 8003eca:	1891      	adds	r1, r2, r2
 8003ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ece:	415b      	adcs	r3, r3
 8003ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	eb12 0801 	adds.w	r8, r2, r1
 8003edc:	4629      	mov	r1, r5
 8003ede:	eb43 0901 	adc.w	r9, r3, r1
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	4699      	mov	r9, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	eb18 0303 	adds.w	r3, r8, r3
 8003f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f04:	462b      	mov	r3, r5
 8003f06:	eb49 0303 	adc.w	r3, r9, r3
 8003f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f22:	460b      	mov	r3, r1
 8003f24:	18db      	adds	r3, r3, r3
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
 8003f28:	4613      	mov	r3, r2
 8003f2a:	eb42 0303 	adc.w	r3, r2, r3
 8003f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f38:	f7fc fd98 	bl	8000a6c <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <UART_SetConfig+0x2d4>)
 8003f42:	fba3 2302 	umull	r2, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	011c      	lsls	r4, r3, #4
 8003f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	1891      	adds	r1, r2, r2
 8003f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f64:	415b      	adcs	r3, r3
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f72:	4649      	mov	r1, r9
 8003f74:	eb43 0b01 	adc.w	fp, r3, r1
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8c:	4692      	mov	sl, r2
 8003f8e:	469b      	mov	fp, r3
 8003f90:	4643      	mov	r3, r8
 8003f92:	eb1a 0303 	adds.w	r3, sl, r3
 8003f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	18db      	adds	r3, r3, r3
 8003fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fce:	f7fc fd4d 	bl	8000a6c <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <UART_SetConfig+0x2d4>)
 8003fda:	fba3 2301 	umull	r2, r3, r3, r1
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2264      	movs	r2, #100	; 0x64
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	1acb      	subs	r3, r1, r3
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <UART_SetConfig+0x2d4>)
 8003ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ffc:	441c      	add	r4, r3
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800400c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	63b9      	str	r1, [r7, #56]	; 0x38
 8004018:	415b      	adcs	r3, r3
 800401a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004020:	4641      	mov	r1, r8
 8004022:	1851      	adds	r1, r2, r1
 8004024:	6339      	str	r1, [r7, #48]	; 0x30
 8004026:	4649      	mov	r1, r9
 8004028:	414b      	adcs	r3, r1
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004038:	4659      	mov	r1, fp
 800403a:	00cb      	lsls	r3, r1, #3
 800403c:	4651      	mov	r1, sl
 800403e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004042:	4651      	mov	r1, sl
 8004044:	00ca      	lsls	r2, r1, #3
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	4603      	mov	r3, r0
 800404c:	4642      	mov	r2, r8
 800404e:	189b      	adds	r3, r3, r2
 8004050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004054:	464b      	mov	r3, r9
 8004056:	460a      	mov	r2, r1
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800406c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004074:	460b      	mov	r3, r1
 8004076:	18db      	adds	r3, r3, r3
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
 800407a:	4613      	mov	r3, r2
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800408a:	f7fc fcef 	bl	8000a6c <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <UART_SetConfig+0x2d4>)
 8004094:	fba3 1302 	umull	r1, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2164      	movs	r1, #100	; 0x64
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <UART_SetConfig+0x2d4>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4422      	add	r2, r4
 80040ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040bc:	e105      	b.n	80042ca <UART_SetConfig+0x4d6>
 80040be:	bf00      	nop
 80040c0:	40011000 	.word	0x40011000
 80040c4:	40011400 	.word	0x40011400
 80040c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040de:	4642      	mov	r2, r8
 80040e0:	464b      	mov	r3, r9
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	6239      	str	r1, [r7, #32]
 80040e6:	415b      	adcs	r3, r3
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ee:	4641      	mov	r1, r8
 80040f0:	1854      	adds	r4, r2, r1
 80040f2:	4649      	mov	r1, r9
 80040f4:	eb43 0501 	adc.w	r5, r3, r1
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	00eb      	lsls	r3, r5, #3
 8004102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004106:	00e2      	lsls	r2, r4, #3
 8004108:	4614      	mov	r4, r2
 800410a:	461d      	mov	r5, r3
 800410c:	4643      	mov	r3, r8
 800410e:	18e3      	adds	r3, r4, r3
 8004110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004114:	464b      	mov	r3, r9
 8004116:	eb45 0303 	adc.w	r3, r5, r3
 800411a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800412a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800413a:	4629      	mov	r1, r5
 800413c:	008b      	lsls	r3, r1, #2
 800413e:	4621      	mov	r1, r4
 8004140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004144:	4621      	mov	r1, r4
 8004146:	008a      	lsls	r2, r1, #2
 8004148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800414c:	f7fc fc8e 	bl	8000a6c <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4b60      	ldr	r3, [pc, #384]	; (80042d8 <UART_SetConfig+0x4e4>)
 8004156:	fba3 2302 	umull	r2, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	011c      	lsls	r4, r3, #4
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800416c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	61b9      	str	r1, [r7, #24]
 8004178:	415b      	adcs	r3, r3
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004180:	4641      	mov	r1, r8
 8004182:	1851      	adds	r1, r2, r1
 8004184:	6139      	str	r1, [r7, #16]
 8004186:	4649      	mov	r1, r9
 8004188:	414b      	adcs	r3, r1
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004198:	4659      	mov	r1, fp
 800419a:	00cb      	lsls	r3, r1, #3
 800419c:	4651      	mov	r1, sl
 800419e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a2:	4651      	mov	r1, sl
 80041a4:	00ca      	lsls	r2, r1, #3
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	4642      	mov	r2, r8
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b4:	464b      	mov	r3, r9
 80041b6:	460a      	mov	r2, r1
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041ea:	f7fc fc3f 	bl	8000a6c <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004212:	441c      	add	r4, r3
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	673b      	str	r3, [r7, #112]	; 0x70
 800421c:	677a      	str	r2, [r7, #116]	; 0x74
 800421e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004222:	4642      	mov	r2, r8
 8004224:	464b      	mov	r3, r9
 8004226:	1891      	adds	r1, r2, r2
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	415b      	adcs	r3, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004232:	4641      	mov	r1, r8
 8004234:	1851      	adds	r1, r2, r1
 8004236:	6039      	str	r1, [r7, #0]
 8004238:	4649      	mov	r1, r9
 800423a:	414b      	adcs	r3, r1
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800424a:	4659      	mov	r1, fp
 800424c:	00cb      	lsls	r3, r1, #3
 800424e:	4651      	mov	r1, sl
 8004250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004254:	4651      	mov	r1, sl
 8004256:	00ca      	lsls	r2, r1, #3
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	4603      	mov	r3, r0
 800425e:	4642      	mov	r2, r8
 8004260:	189b      	adds	r3, r3, r2
 8004262:	66bb      	str	r3, [r7, #104]	; 0x68
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	663b      	str	r3, [r7, #96]	; 0x60
 8004278:	667a      	str	r2, [r7, #100]	; 0x64
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004286:	4649      	mov	r1, r9
 8004288:	008b      	lsls	r3, r1, #2
 800428a:	4641      	mov	r1, r8
 800428c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004290:	4641      	mov	r1, r8
 8004292:	008a      	lsls	r2, r1, #2
 8004294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004298:	f7fc fbe8 	bl	8000a6c <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <UART_SetConfig+0x4e4>)
 80042a2:	fba3 1302 	umull	r1, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2164      	movs	r1, #100	; 0x64
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	3332      	adds	r3, #50	; 0x32
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <UART_SetConfig+0x4e4>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4422      	add	r2, r4
 80042c8:	609a      	str	r2, [r3, #8]
}
 80042ca:	bf00      	nop
 80042cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d6:	bf00      	nop
 80042d8:	51eb851f 	.word	0x51eb851f

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4d0d      	ldr	r5, [pc, #52]	; (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2600      	movs	r6, #0
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4d0b      	ldr	r5, [pc, #44]	; (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	; (800432c <__libc_init_array+0x44>)
 80042fc:	f000 ffae 	bl	800525c <_init>
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2600      	movs	r6, #0
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	080054ac 	.word	0x080054ac
 8004324:	080054ac 	.word	0x080054ac
 8004328:	080054ac 	.word	0x080054ac
 800432c:	080054b0 	.word	0x080054b0

08004330 <memset>:
 8004330:	4402      	add	r2, r0
 8004332:	4603      	mov	r3, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <iprintf>:
 8004340:	b40f      	push	{r0, r1, r2, r3}
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <iprintf+0x2c>)
 8004344:	b513      	push	{r0, r1, r4, lr}
 8004346:	681c      	ldr	r4, [r3, #0]
 8004348:	b124      	cbz	r4, 8004354 <iprintf+0x14>
 800434a:	69a3      	ldr	r3, [r4, #24]
 800434c:	b913      	cbnz	r3, 8004354 <iprintf+0x14>
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f866 	bl	8004420 <__sinit>
 8004354:	ab05      	add	r3, sp, #20
 8004356:	9a04      	ldr	r2, [sp, #16]
 8004358:	68a1      	ldr	r1, [r4, #8]
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	4620      	mov	r0, r4
 800435e:	f000 f9bd 	bl	80046dc <_vfiprintf_r>
 8004362:	b002      	add	sp, #8
 8004364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004368:	b004      	add	sp, #16
 800436a:	4770      	bx	lr
 800436c:	2000000c 	.word	0x2000000c

08004370 <std>:
 8004370:	2300      	movs	r3, #0
 8004372:	b510      	push	{r4, lr}
 8004374:	4604      	mov	r4, r0
 8004376:	e9c0 3300 	strd	r3, r3, [r0]
 800437a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800437e:	6083      	str	r3, [r0, #8]
 8004380:	8181      	strh	r1, [r0, #12]
 8004382:	6643      	str	r3, [r0, #100]	; 0x64
 8004384:	81c2      	strh	r2, [r0, #14]
 8004386:	6183      	str	r3, [r0, #24]
 8004388:	4619      	mov	r1, r3
 800438a:	2208      	movs	r2, #8
 800438c:	305c      	adds	r0, #92	; 0x5c
 800438e:	f7ff ffcf 	bl	8004330 <memset>
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <std+0x38>)
 8004394:	6263      	str	r3, [r4, #36]	; 0x24
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <std+0x3c>)
 8004398:	62a3      	str	r3, [r4, #40]	; 0x28
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <std+0x40>)
 800439c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <std+0x44>)
 80043a0:	6224      	str	r4, [r4, #32]
 80043a2:	6323      	str	r3, [r4, #48]	; 0x30
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	08004c85 	.word	0x08004c85
 80043ac:	08004ca7 	.word	0x08004ca7
 80043b0:	08004cdf 	.word	0x08004cdf
 80043b4:	08004d03 	.word	0x08004d03

080043b8 <_cleanup_r>:
 80043b8:	4901      	ldr	r1, [pc, #4]	; (80043c0 <_cleanup_r+0x8>)
 80043ba:	f000 b8af 	b.w	800451c <_fwalk_reent>
 80043be:	bf00      	nop
 80043c0:	08004fdd 	.word	0x08004fdd

080043c4 <__sfmoreglue>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	2268      	movs	r2, #104	; 0x68
 80043c8:	1e4d      	subs	r5, r1, #1
 80043ca:	4355      	muls	r5, r2
 80043cc:	460e      	mov	r6, r1
 80043ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043d2:	f000 f8e5 	bl	80045a0 <_malloc_r>
 80043d6:	4604      	mov	r4, r0
 80043d8:	b140      	cbz	r0, 80043ec <__sfmoreglue+0x28>
 80043da:	2100      	movs	r1, #0
 80043dc:	e9c0 1600 	strd	r1, r6, [r0]
 80043e0:	300c      	adds	r0, #12
 80043e2:	60a0      	str	r0, [r4, #8]
 80043e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043e8:	f7ff ffa2 	bl	8004330 <memset>
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd70      	pop	{r4, r5, r6, pc}

080043f0 <__sfp_lock_acquire>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__sfp_lock_acquire+0x8>)
 80043f2:	f000 b8b3 	b.w	800455c <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	2000012d 	.word	0x2000012d

080043fc <__sfp_lock_release>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__sfp_lock_release+0x8>)
 80043fe:	f000 b8ae 	b.w	800455e <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	2000012d 	.word	0x2000012d

08004408 <__sinit_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__sinit_lock_acquire+0x8>)
 800440a:	f000 b8a7 	b.w	800455c <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	2000012e 	.word	0x2000012e

08004414 <__sinit_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__sinit_lock_release+0x8>)
 8004416:	f000 b8a2 	b.w	800455e <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	2000012e 	.word	0x2000012e

08004420 <__sinit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	f7ff fff0 	bl	8004408 <__sinit_lock_acquire>
 8004428:	69a3      	ldr	r3, [r4, #24]
 800442a:	b11b      	cbz	r3, 8004434 <__sinit+0x14>
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f7ff bff0 	b.w	8004414 <__sinit_lock_release>
 8004434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004438:	6523      	str	r3, [r4, #80]	; 0x50
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <__sinit+0x68>)
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <__sinit+0x6c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	62a2      	str	r2, [r4, #40]	; 0x28
 8004442:	42a3      	cmp	r3, r4
 8004444:	bf04      	itt	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	61a3      	streq	r3, [r4, #24]
 800444a:	4620      	mov	r0, r4
 800444c:	f000 f820 	bl	8004490 <__sfp>
 8004450:	6060      	str	r0, [r4, #4]
 8004452:	4620      	mov	r0, r4
 8004454:	f000 f81c 	bl	8004490 <__sfp>
 8004458:	60a0      	str	r0, [r4, #8]
 800445a:	4620      	mov	r0, r4
 800445c:	f000 f818 	bl	8004490 <__sfp>
 8004460:	2200      	movs	r2, #0
 8004462:	60e0      	str	r0, [r4, #12]
 8004464:	2104      	movs	r1, #4
 8004466:	6860      	ldr	r0, [r4, #4]
 8004468:	f7ff ff82 	bl	8004370 <std>
 800446c:	68a0      	ldr	r0, [r4, #8]
 800446e:	2201      	movs	r2, #1
 8004470:	2109      	movs	r1, #9
 8004472:	f7ff ff7d 	bl	8004370 <std>
 8004476:	68e0      	ldr	r0, [r4, #12]
 8004478:	2202      	movs	r2, #2
 800447a:	2112      	movs	r1, #18
 800447c:	f7ff ff78 	bl	8004370 <std>
 8004480:	2301      	movs	r3, #1
 8004482:	61a3      	str	r3, [r4, #24]
 8004484:	e7d2      	b.n	800442c <__sinit+0xc>
 8004486:	bf00      	nop
 8004488:	0800540c 	.word	0x0800540c
 800448c:	080043b9 	.word	0x080043b9

08004490 <__sfp>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	4607      	mov	r7, r0
 8004494:	f7ff ffac 	bl	80043f0 <__sfp_lock_acquire>
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <__sfp+0x84>)
 800449a:	681e      	ldr	r6, [r3, #0]
 800449c:	69b3      	ldr	r3, [r6, #24]
 800449e:	b913      	cbnz	r3, 80044a6 <__sfp+0x16>
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff ffbd 	bl	8004420 <__sinit>
 80044a6:	3648      	adds	r6, #72	; 0x48
 80044a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	d503      	bpl.n	80044b8 <__sfp+0x28>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	b30b      	cbz	r3, 80044f8 <__sfp+0x68>
 80044b4:	6836      	ldr	r6, [r6, #0]
 80044b6:	e7f7      	b.n	80044a8 <__sfp+0x18>
 80044b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044bc:	b9d5      	cbnz	r5, 80044f4 <__sfp+0x64>
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <__sfp+0x88>)
 80044c0:	60e3      	str	r3, [r4, #12]
 80044c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044c6:	6665      	str	r5, [r4, #100]	; 0x64
 80044c8:	f000 f847 	bl	800455a <__retarget_lock_init_recursive>
 80044cc:	f7ff ff96 	bl	80043fc <__sfp_lock_release>
 80044d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044d8:	6025      	str	r5, [r4, #0]
 80044da:	61a5      	str	r5, [r4, #24]
 80044dc:	2208      	movs	r2, #8
 80044de:	4629      	mov	r1, r5
 80044e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044e4:	f7ff ff24 	bl	8004330 <memset>
 80044e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f0:	4620      	mov	r0, r4
 80044f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f4:	3468      	adds	r4, #104	; 0x68
 80044f6:	e7d9      	b.n	80044ac <__sfp+0x1c>
 80044f8:	2104      	movs	r1, #4
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ff62 	bl	80043c4 <__sfmoreglue>
 8004500:	4604      	mov	r4, r0
 8004502:	6030      	str	r0, [r6, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	d1d5      	bne.n	80044b4 <__sfp+0x24>
 8004508:	f7ff ff78 	bl	80043fc <__sfp_lock_release>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	e7ee      	b.n	80044f0 <__sfp+0x60>
 8004512:	bf00      	nop
 8004514:	0800540c 	.word	0x0800540c
 8004518:	ffff0001 	.word	0xffff0001

0800451c <_fwalk_reent>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	4606      	mov	r6, r0
 8004522:	4688      	mov	r8, r1
 8004524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004528:	2700      	movs	r7, #0
 800452a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800452e:	f1b9 0901 	subs.w	r9, r9, #1
 8004532:	d505      	bpl.n	8004540 <_fwalk_reent+0x24>
 8004534:	6824      	ldr	r4, [r4, #0]
 8004536:	2c00      	cmp	r4, #0
 8004538:	d1f7      	bne.n	800452a <_fwalk_reent+0xe>
 800453a:	4638      	mov	r0, r7
 800453c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004540:	89ab      	ldrh	r3, [r5, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d907      	bls.n	8004556 <_fwalk_reent+0x3a>
 8004546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800454a:	3301      	adds	r3, #1
 800454c:	d003      	beq.n	8004556 <_fwalk_reent+0x3a>
 800454e:	4629      	mov	r1, r5
 8004550:	4630      	mov	r0, r6
 8004552:	47c0      	blx	r8
 8004554:	4307      	orrs	r7, r0
 8004556:	3568      	adds	r5, #104	; 0x68
 8004558:	e7e9      	b.n	800452e <_fwalk_reent+0x12>

0800455a <__retarget_lock_init_recursive>:
 800455a:	4770      	bx	lr

0800455c <__retarget_lock_acquire_recursive>:
 800455c:	4770      	bx	lr

0800455e <__retarget_lock_release_recursive>:
 800455e:	4770      	bx	lr

08004560 <sbrk_aligned>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	4e0e      	ldr	r6, [pc, #56]	; (800459c <sbrk_aligned+0x3c>)
 8004564:	460c      	mov	r4, r1
 8004566:	6831      	ldr	r1, [r6, #0]
 8004568:	4605      	mov	r5, r0
 800456a:	b911      	cbnz	r1, 8004572 <sbrk_aligned+0x12>
 800456c:	f000 fb7a 	bl	8004c64 <_sbrk_r>
 8004570:	6030      	str	r0, [r6, #0]
 8004572:	4621      	mov	r1, r4
 8004574:	4628      	mov	r0, r5
 8004576:	f000 fb75 	bl	8004c64 <_sbrk_r>
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	d00a      	beq.n	8004594 <sbrk_aligned+0x34>
 800457e:	1cc4      	adds	r4, r0, #3
 8004580:	f024 0403 	bic.w	r4, r4, #3
 8004584:	42a0      	cmp	r0, r4
 8004586:	d007      	beq.n	8004598 <sbrk_aligned+0x38>
 8004588:	1a21      	subs	r1, r4, r0
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fb6a 	bl	8004c64 <_sbrk_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d101      	bne.n	8004598 <sbrk_aligned+0x38>
 8004594:	f04f 34ff 	mov.w	r4, #4294967295
 8004598:	4620      	mov	r0, r4
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	20000134 	.word	0x20000134

080045a0 <_malloc_r>:
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	1ccd      	adds	r5, r1, #3
 80045a6:	f025 0503 	bic.w	r5, r5, #3
 80045aa:	3508      	adds	r5, #8
 80045ac:	2d0c      	cmp	r5, #12
 80045ae:	bf38      	it	cc
 80045b0:	250c      	movcc	r5, #12
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	4607      	mov	r7, r0
 80045b6:	db01      	blt.n	80045bc <_malloc_r+0x1c>
 80045b8:	42a9      	cmp	r1, r5
 80045ba:	d905      	bls.n	80045c8 <_malloc_r+0x28>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	2600      	movs	r6, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c8:	4e2e      	ldr	r6, [pc, #184]	; (8004684 <_malloc_r+0xe4>)
 80045ca:	f000 fdbb 	bl	8005144 <__malloc_lock>
 80045ce:	6833      	ldr	r3, [r6, #0]
 80045d0:	461c      	mov	r4, r3
 80045d2:	bb34      	cbnz	r4, 8004622 <_malloc_r+0x82>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ffc2 	bl	8004560 <sbrk_aligned>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	4604      	mov	r4, r0
 80045e0:	d14d      	bne.n	800467e <_malloc_r+0xde>
 80045e2:	6834      	ldr	r4, [r6, #0]
 80045e4:	4626      	mov	r6, r4
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d140      	bne.n	800466c <_malloc_r+0xcc>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	4631      	mov	r1, r6
 80045ee:	4638      	mov	r0, r7
 80045f0:	eb04 0803 	add.w	r8, r4, r3
 80045f4:	f000 fb36 	bl	8004c64 <_sbrk_r>
 80045f8:	4580      	cmp	r8, r0
 80045fa:	d13a      	bne.n	8004672 <_malloc_r+0xd2>
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	3503      	adds	r5, #3
 8004600:	1a6d      	subs	r5, r5, r1
 8004602:	f025 0503 	bic.w	r5, r5, #3
 8004606:	3508      	adds	r5, #8
 8004608:	2d0c      	cmp	r5, #12
 800460a:	bf38      	it	cc
 800460c:	250c      	movcc	r5, #12
 800460e:	4629      	mov	r1, r5
 8004610:	4638      	mov	r0, r7
 8004612:	f7ff ffa5 	bl	8004560 <sbrk_aligned>
 8004616:	3001      	adds	r0, #1
 8004618:	d02b      	beq.n	8004672 <_malloc_r+0xd2>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	442b      	add	r3, r5
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	e00e      	b.n	8004640 <_malloc_r+0xa0>
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	1b52      	subs	r2, r2, r5
 8004626:	d41e      	bmi.n	8004666 <_malloc_r+0xc6>
 8004628:	2a0b      	cmp	r2, #11
 800462a:	d916      	bls.n	800465a <_malloc_r+0xba>
 800462c:	1961      	adds	r1, r4, r5
 800462e:	42a3      	cmp	r3, r4
 8004630:	6025      	str	r5, [r4, #0]
 8004632:	bf18      	it	ne
 8004634:	6059      	strne	r1, [r3, #4]
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	bf08      	it	eq
 800463a:	6031      	streq	r1, [r6, #0]
 800463c:	5162      	str	r2, [r4, r5]
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	4638      	mov	r0, r7
 8004642:	f104 060b 	add.w	r6, r4, #11
 8004646:	f000 fd83 	bl	8005150 <__malloc_unlock>
 800464a:	f026 0607 	bic.w	r6, r6, #7
 800464e:	1d23      	adds	r3, r4, #4
 8004650:	1af2      	subs	r2, r6, r3
 8004652:	d0b6      	beq.n	80045c2 <_malloc_r+0x22>
 8004654:	1b9b      	subs	r3, r3, r6
 8004656:	50a3      	str	r3, [r4, r2]
 8004658:	e7b3      	b.n	80045c2 <_malloc_r+0x22>
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	42a3      	cmp	r3, r4
 800465e:	bf0c      	ite	eq
 8004660:	6032      	streq	r2, [r6, #0]
 8004662:	605a      	strne	r2, [r3, #4]
 8004664:	e7ec      	b.n	8004640 <_malloc_r+0xa0>
 8004666:	4623      	mov	r3, r4
 8004668:	6864      	ldr	r4, [r4, #4]
 800466a:	e7b2      	b.n	80045d2 <_malloc_r+0x32>
 800466c:	4634      	mov	r4, r6
 800466e:	6876      	ldr	r6, [r6, #4]
 8004670:	e7b9      	b.n	80045e6 <_malloc_r+0x46>
 8004672:	230c      	movs	r3, #12
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4638      	mov	r0, r7
 8004678:	f000 fd6a 	bl	8005150 <__malloc_unlock>
 800467c:	e7a1      	b.n	80045c2 <_malloc_r+0x22>
 800467e:	6025      	str	r5, [r4, #0]
 8004680:	e7de      	b.n	8004640 <_malloc_r+0xa0>
 8004682:	bf00      	nop
 8004684:	20000130 	.word	0x20000130

08004688 <__sfputc_r>:
 8004688:	6893      	ldr	r3, [r2, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	b410      	push	{r4}
 8004690:	6093      	str	r3, [r2, #8]
 8004692:	da08      	bge.n	80046a6 <__sfputc_r+0x1e>
 8004694:	6994      	ldr	r4, [r2, #24]
 8004696:	42a3      	cmp	r3, r4
 8004698:	db01      	blt.n	800469e <__sfputc_r+0x16>
 800469a:	290a      	cmp	r1, #10
 800469c:	d103      	bne.n	80046a6 <__sfputc_r+0x1e>
 800469e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a2:	f000 bb33 	b.w	8004d0c <__swbuf_r>
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	1c58      	adds	r0, r3, #1
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	7019      	strb	r1, [r3, #0]
 80046ae:	4608      	mov	r0, r1
 80046b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <__sfputs_r>:
 80046b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b8:	4606      	mov	r6, r0
 80046ba:	460f      	mov	r7, r1
 80046bc:	4614      	mov	r4, r2
 80046be:	18d5      	adds	r5, r2, r3
 80046c0:	42ac      	cmp	r4, r5
 80046c2:	d101      	bne.n	80046c8 <__sfputs_r+0x12>
 80046c4:	2000      	movs	r0, #0
 80046c6:	e007      	b.n	80046d8 <__sfputs_r+0x22>
 80046c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046cc:	463a      	mov	r2, r7
 80046ce:	4630      	mov	r0, r6
 80046d0:	f7ff ffda 	bl	8004688 <__sfputc_r>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d1f3      	bne.n	80046c0 <__sfputs_r+0xa>
 80046d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046dc <_vfiprintf_r>:
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	460d      	mov	r5, r1
 80046e2:	b09d      	sub	sp, #116	; 0x74
 80046e4:	4614      	mov	r4, r2
 80046e6:	4698      	mov	r8, r3
 80046e8:	4606      	mov	r6, r0
 80046ea:	b118      	cbz	r0, 80046f4 <_vfiprintf_r+0x18>
 80046ec:	6983      	ldr	r3, [r0, #24]
 80046ee:	b90b      	cbnz	r3, 80046f4 <_vfiprintf_r+0x18>
 80046f0:	f7ff fe96 	bl	8004420 <__sinit>
 80046f4:	4b89      	ldr	r3, [pc, #548]	; (800491c <_vfiprintf_r+0x240>)
 80046f6:	429d      	cmp	r5, r3
 80046f8:	d11b      	bne.n	8004732 <_vfiprintf_r+0x56>
 80046fa:	6875      	ldr	r5, [r6, #4]
 80046fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046fe:	07d9      	lsls	r1, r3, #31
 8004700:	d405      	bmi.n	800470e <_vfiprintf_r+0x32>
 8004702:	89ab      	ldrh	r3, [r5, #12]
 8004704:	059a      	lsls	r2, r3, #22
 8004706:	d402      	bmi.n	800470e <_vfiprintf_r+0x32>
 8004708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800470a:	f7ff ff27 	bl	800455c <__retarget_lock_acquire_recursive>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	d501      	bpl.n	8004718 <_vfiprintf_r+0x3c>
 8004714:	692b      	ldr	r3, [r5, #16]
 8004716:	b9eb      	cbnz	r3, 8004754 <_vfiprintf_r+0x78>
 8004718:	4629      	mov	r1, r5
 800471a:	4630      	mov	r0, r6
 800471c:	f000 fb5a 	bl	8004dd4 <__swsetup_r>
 8004720:	b1c0      	cbz	r0, 8004754 <_vfiprintf_r+0x78>
 8004722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004724:	07dc      	lsls	r4, r3, #31
 8004726:	d50e      	bpl.n	8004746 <_vfiprintf_r+0x6a>
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	b01d      	add	sp, #116	; 0x74
 800472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004732:	4b7b      	ldr	r3, [pc, #492]	; (8004920 <_vfiprintf_r+0x244>)
 8004734:	429d      	cmp	r5, r3
 8004736:	d101      	bne.n	800473c <_vfiprintf_r+0x60>
 8004738:	68b5      	ldr	r5, [r6, #8]
 800473a:	e7df      	b.n	80046fc <_vfiprintf_r+0x20>
 800473c:	4b79      	ldr	r3, [pc, #484]	; (8004924 <_vfiprintf_r+0x248>)
 800473e:	429d      	cmp	r5, r3
 8004740:	bf08      	it	eq
 8004742:	68f5      	ldreq	r5, [r6, #12]
 8004744:	e7da      	b.n	80046fc <_vfiprintf_r+0x20>
 8004746:	89ab      	ldrh	r3, [r5, #12]
 8004748:	0598      	lsls	r0, r3, #22
 800474a:	d4ed      	bmi.n	8004728 <_vfiprintf_r+0x4c>
 800474c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800474e:	f7ff ff06 	bl	800455e <__retarget_lock_release_recursive>
 8004752:	e7e9      	b.n	8004728 <_vfiprintf_r+0x4c>
 8004754:	2300      	movs	r3, #0
 8004756:	9309      	str	r3, [sp, #36]	; 0x24
 8004758:	2320      	movs	r3, #32
 800475a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800475e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004762:	2330      	movs	r3, #48	; 0x30
 8004764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004928 <_vfiprintf_r+0x24c>
 8004768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800476c:	f04f 0901 	mov.w	r9, #1
 8004770:	4623      	mov	r3, r4
 8004772:	469a      	mov	sl, r3
 8004774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004778:	b10a      	cbz	r2, 800477e <_vfiprintf_r+0xa2>
 800477a:	2a25      	cmp	r2, #37	; 0x25
 800477c:	d1f9      	bne.n	8004772 <_vfiprintf_r+0x96>
 800477e:	ebba 0b04 	subs.w	fp, sl, r4
 8004782:	d00b      	beq.n	800479c <_vfiprintf_r+0xc0>
 8004784:	465b      	mov	r3, fp
 8004786:	4622      	mov	r2, r4
 8004788:	4629      	mov	r1, r5
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ff93 	bl	80046b6 <__sfputs_r>
 8004790:	3001      	adds	r0, #1
 8004792:	f000 80aa 	beq.w	80048ea <_vfiprintf_r+0x20e>
 8004796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004798:	445a      	add	r2, fp
 800479a:	9209      	str	r2, [sp, #36]	; 0x24
 800479c:	f89a 3000 	ldrb.w	r3, [sl]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a2 	beq.w	80048ea <_vfiprintf_r+0x20e>
 80047a6:	2300      	movs	r3, #0
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047b0:	f10a 0a01 	add.w	sl, sl, #1
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	9307      	str	r3, [sp, #28]
 80047b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047bc:	931a      	str	r3, [sp, #104]	; 0x68
 80047be:	4654      	mov	r4, sl
 80047c0:	2205      	movs	r2, #5
 80047c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c6:	4858      	ldr	r0, [pc, #352]	; (8004928 <_vfiprintf_r+0x24c>)
 80047c8:	f7fb fd12 	bl	80001f0 <memchr>
 80047cc:	9a04      	ldr	r2, [sp, #16]
 80047ce:	b9d8      	cbnz	r0, 8004808 <_vfiprintf_r+0x12c>
 80047d0:	06d1      	lsls	r1, r2, #27
 80047d2:	bf44      	itt	mi
 80047d4:	2320      	movmi	r3, #32
 80047d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047da:	0713      	lsls	r3, r2, #28
 80047dc:	bf44      	itt	mi
 80047de:	232b      	movmi	r3, #43	; 0x2b
 80047e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047e4:	f89a 3000 	ldrb.w	r3, [sl]
 80047e8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ea:	d015      	beq.n	8004818 <_vfiprintf_r+0x13c>
 80047ec:	9a07      	ldr	r2, [sp, #28]
 80047ee:	4654      	mov	r4, sl
 80047f0:	2000      	movs	r0, #0
 80047f2:	f04f 0c0a 	mov.w	ip, #10
 80047f6:	4621      	mov	r1, r4
 80047f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047fc:	3b30      	subs	r3, #48	; 0x30
 80047fe:	2b09      	cmp	r3, #9
 8004800:	d94e      	bls.n	80048a0 <_vfiprintf_r+0x1c4>
 8004802:	b1b0      	cbz	r0, 8004832 <_vfiprintf_r+0x156>
 8004804:	9207      	str	r2, [sp, #28]
 8004806:	e014      	b.n	8004832 <_vfiprintf_r+0x156>
 8004808:	eba0 0308 	sub.w	r3, r0, r8
 800480c:	fa09 f303 	lsl.w	r3, r9, r3
 8004810:	4313      	orrs	r3, r2
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	46a2      	mov	sl, r4
 8004816:	e7d2      	b.n	80047be <_vfiprintf_r+0xe2>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	1d19      	adds	r1, r3, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	9103      	str	r1, [sp, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	bfbb      	ittet	lt
 8004824:	425b      	neglt	r3, r3
 8004826:	f042 0202 	orrlt.w	r2, r2, #2
 800482a:	9307      	strge	r3, [sp, #28]
 800482c:	9307      	strlt	r3, [sp, #28]
 800482e:	bfb8      	it	lt
 8004830:	9204      	strlt	r2, [sp, #16]
 8004832:	7823      	ldrb	r3, [r4, #0]
 8004834:	2b2e      	cmp	r3, #46	; 0x2e
 8004836:	d10c      	bne.n	8004852 <_vfiprintf_r+0x176>
 8004838:	7863      	ldrb	r3, [r4, #1]
 800483a:	2b2a      	cmp	r3, #42	; 0x2a
 800483c:	d135      	bne.n	80048aa <_vfiprintf_r+0x1ce>
 800483e:	9b03      	ldr	r3, [sp, #12]
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	9203      	str	r2, [sp, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfb8      	it	lt
 800484a:	f04f 33ff 	movlt.w	r3, #4294967295
 800484e:	3402      	adds	r4, #2
 8004850:	9305      	str	r3, [sp, #20]
 8004852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004938 <_vfiprintf_r+0x25c>
 8004856:	7821      	ldrb	r1, [r4, #0]
 8004858:	2203      	movs	r2, #3
 800485a:	4650      	mov	r0, sl
 800485c:	f7fb fcc8 	bl	80001f0 <memchr>
 8004860:	b140      	cbz	r0, 8004874 <_vfiprintf_r+0x198>
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	eba0 000a 	sub.w	r0, r0, sl
 8004868:	fa03 f000 	lsl.w	r0, r3, r0
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	4303      	orrs	r3, r0
 8004870:	3401      	adds	r4, #1
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004878:	482c      	ldr	r0, [pc, #176]	; (800492c <_vfiprintf_r+0x250>)
 800487a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800487e:	2206      	movs	r2, #6
 8004880:	f7fb fcb6 	bl	80001f0 <memchr>
 8004884:	2800      	cmp	r0, #0
 8004886:	d03f      	beq.n	8004908 <_vfiprintf_r+0x22c>
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <_vfiprintf_r+0x254>)
 800488a:	bb1b      	cbnz	r3, 80048d4 <_vfiprintf_r+0x1f8>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	3307      	adds	r3, #7
 8004890:	f023 0307 	bic.w	r3, r3, #7
 8004894:	3308      	adds	r3, #8
 8004896:	9303      	str	r3, [sp, #12]
 8004898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489a:	443b      	add	r3, r7
 800489c:	9309      	str	r3, [sp, #36]	; 0x24
 800489e:	e767      	b.n	8004770 <_vfiprintf_r+0x94>
 80048a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048a4:	460c      	mov	r4, r1
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7a5      	b.n	80047f6 <_vfiprintf_r+0x11a>
 80048aa:	2300      	movs	r3, #0
 80048ac:	3401      	adds	r4, #1
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	4619      	mov	r1, r3
 80048b2:	f04f 0c0a 	mov.w	ip, #10
 80048b6:	4620      	mov	r0, r4
 80048b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048bc:	3a30      	subs	r2, #48	; 0x30
 80048be:	2a09      	cmp	r2, #9
 80048c0:	d903      	bls.n	80048ca <_vfiprintf_r+0x1ee>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0c5      	beq.n	8004852 <_vfiprintf_r+0x176>
 80048c6:	9105      	str	r1, [sp, #20]
 80048c8:	e7c3      	b.n	8004852 <_vfiprintf_r+0x176>
 80048ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ce:	4604      	mov	r4, r0
 80048d0:	2301      	movs	r3, #1
 80048d2:	e7f0      	b.n	80048b6 <_vfiprintf_r+0x1da>
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	462a      	mov	r2, r5
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <_vfiprintf_r+0x258>)
 80048dc:	a904      	add	r1, sp, #16
 80048de:	4630      	mov	r0, r6
 80048e0:	f3af 8000 	nop.w
 80048e4:	4607      	mov	r7, r0
 80048e6:	1c78      	adds	r0, r7, #1
 80048e8:	d1d6      	bne.n	8004898 <_vfiprintf_r+0x1bc>
 80048ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ec:	07d9      	lsls	r1, r3, #31
 80048ee:	d405      	bmi.n	80048fc <_vfiprintf_r+0x220>
 80048f0:	89ab      	ldrh	r3, [r5, #12]
 80048f2:	059a      	lsls	r2, r3, #22
 80048f4:	d402      	bmi.n	80048fc <_vfiprintf_r+0x220>
 80048f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f8:	f7ff fe31 	bl	800455e <__retarget_lock_release_recursive>
 80048fc:	89ab      	ldrh	r3, [r5, #12]
 80048fe:	065b      	lsls	r3, r3, #25
 8004900:	f53f af12 	bmi.w	8004728 <_vfiprintf_r+0x4c>
 8004904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004906:	e711      	b.n	800472c <_vfiprintf_r+0x50>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <_vfiprintf_r+0x258>)
 8004910:	a904      	add	r1, sp, #16
 8004912:	4630      	mov	r0, r6
 8004914:	f000 f880 	bl	8004a18 <_printf_i>
 8004918:	e7e4      	b.n	80048e4 <_vfiprintf_r+0x208>
 800491a:	bf00      	nop
 800491c:	08005430 	.word	0x08005430
 8004920:	08005450 	.word	0x08005450
 8004924:	08005410 	.word	0x08005410
 8004928:	08005470 	.word	0x08005470
 800492c:	0800547a 	.word	0x0800547a
 8004930:	00000000 	.word	0x00000000
 8004934:	080046b7 	.word	0x080046b7
 8004938:	08005476 	.word	0x08005476

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4699      	mov	r9, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800494c:	4293      	cmp	r3, r2
 800494e:	bfb8      	it	lt
 8004950:	4613      	movlt	r3, r2
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004958:	4607      	mov	r7, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc26      	bgt.n	80049d2 <_printf_common+0x96>
 8004984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004988:	1e13      	subs	r3, r2, #0
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42b      	bmi.n	80049ec <_printf_common+0xb0>
 8004994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004998:	4649      	mov	r1, r9
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d01e      	beq.n	80049e0 <_printf_common+0xa4>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	68e5      	ldr	r5, [r4, #12]
 80049a6:	6832      	ldr	r2, [r6, #0]
 80049a8:	f003 0306 	and.w	r3, r3, #6
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	bf08      	it	eq
 80049b0:	1aad      	subeq	r5, r5, r2
 80049b2:	68a3      	ldr	r3, [r4, #8]
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	bf0c      	ite	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	2500      	movne	r5, #0
 80049be:	4293      	cmp	r3, r2
 80049c0:	bfc4      	itt	gt
 80049c2:	1a9b      	subgt	r3, r3, r2
 80049c4:	18ed      	addgt	r5, r5, r3
 80049c6:	2600      	movs	r6, #0
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xc8>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xa8>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4649      	mov	r1, r9
 80049d8:	4638      	mov	r0, r7
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xac>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c6      	b.n	800497a <_printf_common+0x3e>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	; 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c7      	b.n	8004994 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa4>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x8e>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4691      	mov	r9, r2
 8004a24:	4680      	mov	r8, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	; 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d8 	beq.w	8004bea <_printf_i+0x1d2>
 8004a3a:	2f58      	cmp	r7, #88	; 0x58
 8004a3c:	f000 80a3 	beq.w	8004b86 <_printf_i+0x16e>
 8004a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	; (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bd1 	.word	0x08004bd1
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004bb3 	.word	0x08004bb3
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004bf3 	.word	0x08004bf3
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004bbb 	.word	0x08004bbb
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	602a      	str	r2, [r5, #0]
 8004ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a3      	b.n	8004c0c <_printf_i+0x1f4>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	6829      	ldr	r1, [r5, #0]
 8004ac8:	0606      	lsls	r6, r0, #24
 8004aca:	f101 0304 	add.w	r3, r1, #4
 8004ace:	d50a      	bpl.n	8004ae6 <_printf_i+0xce>
 8004ad0:	680e      	ldr	r6, [r1, #0]
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	da03      	bge.n	8004ae0 <_printf_i+0xc8>
 8004ad8:	232d      	movs	r3, #45	; 0x2d
 8004ada:	4276      	negs	r6, r6
 8004adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae0:	485e      	ldr	r0, [pc, #376]	; (8004c5c <_printf_i+0x244>)
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	e019      	b.n	8004b1a <_printf_i+0x102>
 8004ae6:	680e      	ldr	r6, [r1, #0]
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aee:	bf18      	it	ne
 8004af0:	b236      	sxthne	r6, r6
 8004af2:	e7ef      	b.n	8004ad4 <_printf_i+0xbc>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	6029      	str	r1, [r5, #0]
 8004afc:	0601      	lsls	r1, r0, #24
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0xec>
 8004b00:	681e      	ldr	r6, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <_printf_i+0xf2>
 8004b04:	0646      	lsls	r6, r0, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0xe8>
 8004b08:	881e      	ldrh	r6, [r3, #0]
 8004b0a:	4854      	ldr	r0, [pc, #336]	; (8004c5c <_printf_i+0x244>)
 8004b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0e:	bf0c      	ite	eq
 8004b10:	2308      	moveq	r3, #8
 8004b12:	230a      	movne	r3, #10
 8004b14:	2100      	movs	r1, #0
 8004b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1a:	6865      	ldr	r5, [r4, #4]
 8004b1c:	60a5      	str	r5, [r4, #8]
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	bfa2      	ittt	ge
 8004b22:	6821      	ldrge	r1, [r4, #0]
 8004b24:	f021 0104 	bicge.w	r1, r1, #4
 8004b28:	6021      	strge	r1, [r4, #0]
 8004b2a:	b90e      	cbnz	r6, 8004b30 <_printf_i+0x118>
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	d04d      	beq.n	8004bcc <_printf_i+0x1b4>
 8004b30:	4615      	mov	r5, r2
 8004b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b36:	fb03 6711 	mls	r7, r3, r1, r6
 8004b3a:	5dc7      	ldrb	r7, [r0, r7]
 8004b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b40:	4637      	mov	r7, r6
 8004b42:	42bb      	cmp	r3, r7
 8004b44:	460e      	mov	r6, r1
 8004b46:	d9f4      	bls.n	8004b32 <_printf_i+0x11a>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d10b      	bne.n	8004b64 <_printf_i+0x14c>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	07de      	lsls	r6, r3, #31
 8004b50:	d508      	bpl.n	8004b64 <_printf_i+0x14c>
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	6861      	ldr	r1, [r4, #4]
 8004b56:	4299      	cmp	r1, r3
 8004b58:	bfde      	ittt	le
 8004b5a:	2330      	movle	r3, #48	; 0x30
 8004b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b64:	1b52      	subs	r2, r2, r5
 8004b66:	6122      	str	r2, [r4, #16]
 8004b68:	f8cd a000 	str.w	sl, [sp]
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	aa03      	add	r2, sp, #12
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7ff fee2 	bl	800493c <_printf_common>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d14c      	bne.n	8004c16 <_printf_i+0x1fe>
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	b004      	add	sp, #16
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	4835      	ldr	r0, [pc, #212]	; (8004c5c <_printf_i+0x244>)
 8004b88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b8c:	6829      	ldr	r1, [r5, #0]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b94:	6029      	str	r1, [r5, #0]
 8004b96:	061d      	lsls	r5, r3, #24
 8004b98:	d514      	bpl.n	8004bc4 <_printf_i+0x1ac>
 8004b9a:	07df      	lsls	r7, r3, #31
 8004b9c:	bf44      	itt	mi
 8004b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba2:	6023      	strmi	r3, [r4, #0]
 8004ba4:	b91e      	cbnz	r6, 8004bae <_printf_i+0x196>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f023 0320 	bic.w	r3, r3, #32
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	2310      	movs	r3, #16
 8004bb0:	e7b0      	b.n	8004b14 <_printf_i+0xfc>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	f043 0320 	orr.w	r3, r3, #32
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	2378      	movs	r3, #120	; 0x78
 8004bbc:	4828      	ldr	r0, [pc, #160]	; (8004c60 <_printf_i+0x248>)
 8004bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc2:	e7e3      	b.n	8004b8c <_printf_i+0x174>
 8004bc4:	0659      	lsls	r1, r3, #25
 8004bc6:	bf48      	it	mi
 8004bc8:	b2b6      	uxthmi	r6, r6
 8004bca:	e7e6      	b.n	8004b9a <_printf_i+0x182>
 8004bcc:	4615      	mov	r5, r2
 8004bce:	e7bb      	b.n	8004b48 <_printf_i+0x130>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	6826      	ldr	r6, [r4, #0]
 8004bd4:	6961      	ldr	r1, [r4, #20]
 8004bd6:	1d18      	adds	r0, r3, #4
 8004bd8:	6028      	str	r0, [r5, #0]
 8004bda:	0635      	lsls	r5, r6, #24
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0x1cc>
 8004be0:	6019      	str	r1, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0x1d2>
 8004be4:	0670      	lsls	r0, r6, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0x1c8>
 8004be8:	8019      	strh	r1, [r3, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	4615      	mov	r5, r2
 8004bf0:	e7ba      	b.n	8004b68 <_printf_i+0x150>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f7fb faf6 	bl	80001f0 <memchr>
 8004c04:	b108      	cbz	r0, 8004c0a <_printf_i+0x1f2>
 8004c06:	1b40      	subs	r0, r0, r5
 8004c08:	6060      	str	r0, [r4, #4]
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c14:	e7a8      	b.n	8004b68 <_printf_i+0x150>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	462a      	mov	r2, r5
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	47d0      	blx	sl
 8004c20:	3001      	adds	r0, #1
 8004c22:	d0ab      	beq.n	8004b7c <_printf_i+0x164>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	079b      	lsls	r3, r3, #30
 8004c28:	d413      	bmi.n	8004c52 <_printf_i+0x23a>
 8004c2a:	68e0      	ldr	r0, [r4, #12]
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	4298      	cmp	r0, r3
 8004c30:	bfb8      	it	lt
 8004c32:	4618      	movlt	r0, r3
 8004c34:	e7a4      	b.n	8004b80 <_printf_i+0x168>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d09b      	beq.n	8004b7c <_printf_i+0x164>
 8004c44:	3501      	adds	r5, #1
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	9903      	ldr	r1, [sp, #12]
 8004c4a:	1a5b      	subs	r3, r3, r1
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	dcf2      	bgt.n	8004c36 <_printf_i+0x21e>
 8004c50:	e7eb      	b.n	8004c2a <_printf_i+0x212>
 8004c52:	2500      	movs	r5, #0
 8004c54:	f104 0619 	add.w	r6, r4, #25
 8004c58:	e7f5      	b.n	8004c46 <_printf_i+0x22e>
 8004c5a:	bf00      	nop
 8004c5c:	08005481 	.word	0x08005481
 8004c60:	08005492 	.word	0x08005492

08004c64 <_sbrk_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_sbrk_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fc fcb4 	bl	80015dc <_sbrk>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_sbrk_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_sbrk_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000138 	.word	0x20000138

08004c84 <__sread>:
 8004c84:	b510      	push	{r4, lr}
 8004c86:	460c      	mov	r4, r1
 8004c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8c:	f000 fab2 	bl	80051f4 <_read_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	bfab      	itete	ge
 8004c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c96:	89a3      	ldrhlt	r3, [r4, #12]
 8004c98:	181b      	addge	r3, r3, r0
 8004c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c9e:	bfac      	ite	ge
 8004ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ca2:	81a3      	strhlt	r3, [r4, #12]
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <__swrite>:
 8004ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004caa:	461f      	mov	r7, r3
 8004cac:	898b      	ldrh	r3, [r1, #12]
 8004cae:	05db      	lsls	r3, r3, #23
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	d505      	bpl.n	8004cc4 <__swrite+0x1e>
 8004cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f000 f9c8 	bl	8005054 <_lseek_r>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cda:	f000 b869 	b.w	8004db0 <_write_r>

08004cde <__sseek>:
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce6:	f000 f9b5 	bl	8005054 <_lseek_r>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	bf15      	itete	ne
 8004cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cfa:	81a3      	strheq	r3, [r4, #12]
 8004cfc:	bf18      	it	ne
 8004cfe:	81a3      	strhne	r3, [r4, #12]
 8004d00:	bd10      	pop	{r4, pc}

08004d02 <__sclose>:
 8004d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d06:	f000 b8d3 	b.w	8004eb0 <_close_r>
	...

08004d0c <__swbuf_r>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	460e      	mov	r6, r1
 8004d10:	4614      	mov	r4, r2
 8004d12:	4605      	mov	r5, r0
 8004d14:	b118      	cbz	r0, 8004d1e <__swbuf_r+0x12>
 8004d16:	6983      	ldr	r3, [r0, #24]
 8004d18:	b90b      	cbnz	r3, 8004d1e <__swbuf_r+0x12>
 8004d1a:	f7ff fb81 	bl	8004420 <__sinit>
 8004d1e:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <__swbuf_r+0x98>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d12b      	bne.n	8004d7c <__swbuf_r+0x70>
 8004d24:	686c      	ldr	r4, [r5, #4]
 8004d26:	69a3      	ldr	r3, [r4, #24]
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	071a      	lsls	r2, r3, #28
 8004d2e:	d52f      	bpl.n	8004d90 <__swbuf_r+0x84>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	b36b      	cbz	r3, 8004d90 <__swbuf_r+0x84>
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	6963      	ldr	r3, [r4, #20]
 8004d3c:	b2f6      	uxtb	r6, r6
 8004d3e:	4283      	cmp	r3, r0
 8004d40:	4637      	mov	r7, r6
 8004d42:	dc04      	bgt.n	8004d4e <__swbuf_r+0x42>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f948 	bl	8004fdc <_fflush_r>
 8004d4c:	bb30      	cbnz	r0, 8004d9c <__swbuf_r+0x90>
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	701e      	strb	r6, [r3, #0]
 8004d5c:	6963      	ldr	r3, [r4, #20]
 8004d5e:	3001      	adds	r0, #1
 8004d60:	4283      	cmp	r3, r0
 8004d62:	d004      	beq.n	8004d6e <__swbuf_r+0x62>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	07db      	lsls	r3, r3, #31
 8004d68:	d506      	bpl.n	8004d78 <__swbuf_r+0x6c>
 8004d6a:	2e0a      	cmp	r6, #10
 8004d6c:	d104      	bne.n	8004d78 <__swbuf_r+0x6c>
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f933 	bl	8004fdc <_fflush_r>
 8004d76:	b988      	cbnz	r0, 8004d9c <__swbuf_r+0x90>
 8004d78:	4638      	mov	r0, r7
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <__swbuf_r+0x9c>)
 8004d7e:	429c      	cmp	r4, r3
 8004d80:	d101      	bne.n	8004d86 <__swbuf_r+0x7a>
 8004d82:	68ac      	ldr	r4, [r5, #8]
 8004d84:	e7cf      	b.n	8004d26 <__swbuf_r+0x1a>
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <__swbuf_r+0xa0>)
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	bf08      	it	eq
 8004d8c:	68ec      	ldreq	r4, [r5, #12]
 8004d8e:	e7ca      	b.n	8004d26 <__swbuf_r+0x1a>
 8004d90:	4621      	mov	r1, r4
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 f81e 	bl	8004dd4 <__swsetup_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d0cb      	beq.n	8004d34 <__swbuf_r+0x28>
 8004d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004da0:	e7ea      	b.n	8004d78 <__swbuf_r+0x6c>
 8004da2:	bf00      	nop
 8004da4:	08005430 	.word	0x08005430
 8004da8:	08005450 	.word	0x08005450
 8004dac:	08005410 	.word	0x08005410

08004db0 <_write_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d07      	ldr	r5, [pc, #28]	; (8004dd0 <_write_r+0x20>)
 8004db4:	4604      	mov	r4, r0
 8004db6:	4608      	mov	r0, r1
 8004db8:	4611      	mov	r1, r2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f7fc fbbb 	bl	800153a <_write>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_write_r+0x1e>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_write_r+0x1e>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20000138 	.word	0x20000138

08004dd4 <__swsetup_r>:
 8004dd4:	4b32      	ldr	r3, [pc, #200]	; (8004ea0 <__swsetup_r+0xcc>)
 8004dd6:	b570      	push	{r4, r5, r6, lr}
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	b125      	cbz	r5, 8004dea <__swsetup_r+0x16>
 8004de0:	69ab      	ldr	r3, [r5, #24]
 8004de2:	b913      	cbnz	r3, 8004dea <__swsetup_r+0x16>
 8004de4:	4628      	mov	r0, r5
 8004de6:	f7ff fb1b 	bl	8004420 <__sinit>
 8004dea:	4b2e      	ldr	r3, [pc, #184]	; (8004ea4 <__swsetup_r+0xd0>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	d10f      	bne.n	8004e10 <__swsetup_r+0x3c>
 8004df0:	686c      	ldr	r4, [r5, #4]
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004df8:	0719      	lsls	r1, r3, #28
 8004dfa:	d42c      	bmi.n	8004e56 <__swsetup_r+0x82>
 8004dfc:	06dd      	lsls	r5, r3, #27
 8004dfe:	d411      	bmi.n	8004e24 <__swsetup_r+0x50>
 8004e00:	2309      	movs	r3, #9
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	e03e      	b.n	8004e8e <__swsetup_r+0xba>
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <__swsetup_r+0xd4>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d101      	bne.n	8004e1a <__swsetup_r+0x46>
 8004e16:	68ac      	ldr	r4, [r5, #8]
 8004e18:	e7eb      	b.n	8004df2 <__swsetup_r+0x1e>
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <__swsetup_r+0xd8>)
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	bf08      	it	eq
 8004e20:	68ec      	ldreq	r4, [r5, #12]
 8004e22:	e7e6      	b.n	8004df2 <__swsetup_r+0x1e>
 8004e24:	0758      	lsls	r0, r3, #29
 8004e26:	d512      	bpl.n	8004e4e <__swsetup_r+0x7a>
 8004e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e2a:	b141      	cbz	r1, 8004e3e <__swsetup_r+0x6a>
 8004e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e30:	4299      	cmp	r1, r3
 8004e32:	d002      	beq.n	8004e3a <__swsetup_r+0x66>
 8004e34:	4630      	mov	r0, r6
 8004e36:	f000 f991 	bl	800515c <_free_r>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	2300      	movs	r3, #0
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	f043 0308 	orr.w	r3, r3, #8
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	b94b      	cbnz	r3, 8004e6e <__swsetup_r+0x9a>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e64:	d003      	beq.n	8004e6e <__swsetup_r+0x9a>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f92b 	bl	80050c4 <__smakebuf_r>
 8004e6e:	89a0      	ldrh	r0, [r4, #12]
 8004e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e74:	f010 0301 	ands.w	r3, r0, #1
 8004e78:	d00a      	beq.n	8004e90 <__swsetup_r+0xbc>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60a3      	str	r3, [r4, #8]
 8004e7e:	6963      	ldr	r3, [r4, #20]
 8004e80:	425b      	negs	r3, r3
 8004e82:	61a3      	str	r3, [r4, #24]
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	b943      	cbnz	r3, 8004e9a <__swsetup_r+0xc6>
 8004e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e8c:	d1ba      	bne.n	8004e04 <__swsetup_r+0x30>
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	0781      	lsls	r1, r0, #30
 8004e92:	bf58      	it	pl
 8004e94:	6963      	ldrpl	r3, [r4, #20]
 8004e96:	60a3      	str	r3, [r4, #8]
 8004e98:	e7f4      	b.n	8004e84 <__swsetup_r+0xb0>
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e7f7      	b.n	8004e8e <__swsetup_r+0xba>
 8004e9e:	bf00      	nop
 8004ea0:	2000000c 	.word	0x2000000c
 8004ea4:	08005430 	.word	0x08005430
 8004ea8:	08005450 	.word	0x08005450
 8004eac:	08005410 	.word	0x08005410

08004eb0 <_close_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d06      	ldr	r5, [pc, #24]	; (8004ecc <_close_r+0x1c>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	f7fc fb59 	bl	8001572 <_close>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_close_r+0x1a>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_close_r+0x1a>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000138 	.word	0x20000138

08004ed0 <__sflush_r>:
 8004ed0:	898a      	ldrh	r2, [r1, #12]
 8004ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	0710      	lsls	r0, r2, #28
 8004eda:	460c      	mov	r4, r1
 8004edc:	d458      	bmi.n	8004f90 <__sflush_r+0xc0>
 8004ede:	684b      	ldr	r3, [r1, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dc05      	bgt.n	8004ef0 <__sflush_r+0x20>
 8004ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dc02      	bgt.n	8004ef0 <__sflush_r+0x20>
 8004eea:	2000      	movs	r0, #0
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d0f9      	beq.n	8004eea <__sflush_r+0x1a>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004efc:	682f      	ldr	r7, [r5, #0]
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	d032      	beq.n	8004f68 <__sflush_r+0x98>
 8004f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	075a      	lsls	r2, r3, #29
 8004f08:	d505      	bpl.n	8004f16 <__sflush_r+0x46>
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	1ac0      	subs	r0, r0, r3
 8004f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f10:	b10b      	cbz	r3, 8004f16 <__sflush_r+0x46>
 8004f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f14:	1ac0      	subs	r0, r0, r3
 8004f16:	2300      	movs	r3, #0
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f1c:	6a21      	ldr	r1, [r4, #32]
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b0      	blx	r6
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	d106      	bne.n	8004f36 <__sflush_r+0x66>
 8004f28:	6829      	ldr	r1, [r5, #0]
 8004f2a:	291d      	cmp	r1, #29
 8004f2c:	d82c      	bhi.n	8004f88 <__sflush_r+0xb8>
 8004f2e:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <__sflush_r+0x108>)
 8004f30:	40ca      	lsrs	r2, r1
 8004f32:	07d6      	lsls	r6, r2, #31
 8004f34:	d528      	bpl.n	8004f88 <__sflush_r+0xb8>
 8004f36:	2200      	movs	r2, #0
 8004f38:	6062      	str	r2, [r4, #4]
 8004f3a:	04d9      	lsls	r1, r3, #19
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	d504      	bpl.n	8004f4c <__sflush_r+0x7c>
 8004f42:	1c42      	adds	r2, r0, #1
 8004f44:	d101      	bne.n	8004f4a <__sflush_r+0x7a>
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	b903      	cbnz	r3, 8004f4c <__sflush_r+0x7c>
 8004f4a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f4e:	602f      	str	r7, [r5, #0]
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d0ca      	beq.n	8004eea <__sflush_r+0x1a>
 8004f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <__sflush_r+0x92>
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 f8fd 	bl	800515c <_free_r>
 8004f62:	2000      	movs	r0, #0
 8004f64:	6360      	str	r0, [r4, #52]	; 0x34
 8004f66:	e7c1      	b.n	8004eec <__sflush_r+0x1c>
 8004f68:	6a21      	ldr	r1, [r4, #32]
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b0      	blx	r6
 8004f70:	1c41      	adds	r1, r0, #1
 8004f72:	d1c7      	bne.n	8004f04 <__sflush_r+0x34>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0c4      	beq.n	8004f04 <__sflush_r+0x34>
 8004f7a:	2b1d      	cmp	r3, #29
 8004f7c:	d001      	beq.n	8004f82 <__sflush_r+0xb2>
 8004f7e:	2b16      	cmp	r3, #22
 8004f80:	d101      	bne.n	8004f86 <__sflush_r+0xb6>
 8004f82:	602f      	str	r7, [r5, #0]
 8004f84:	e7b1      	b.n	8004eea <__sflush_r+0x1a>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	e7ad      	b.n	8004eec <__sflush_r+0x1c>
 8004f90:	690f      	ldr	r7, [r1, #16]
 8004f92:	2f00      	cmp	r7, #0
 8004f94:	d0a9      	beq.n	8004eea <__sflush_r+0x1a>
 8004f96:	0793      	lsls	r3, r2, #30
 8004f98:	680e      	ldr	r6, [r1, #0]
 8004f9a:	bf08      	it	eq
 8004f9c:	694b      	ldreq	r3, [r1, #20]
 8004f9e:	600f      	str	r7, [r1, #0]
 8004fa0:	bf18      	it	ne
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	eba6 0807 	sub.w	r8, r6, r7
 8004fa8:	608b      	str	r3, [r1, #8]
 8004faa:	f1b8 0f00 	cmp.w	r8, #0
 8004fae:	dd9c      	ble.n	8004eea <__sflush_r+0x1a>
 8004fb0:	6a21      	ldr	r1, [r4, #32]
 8004fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	463a      	mov	r2, r7
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b0      	blx	r6
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	dc06      	bgt.n	8004fce <__sflush_r+0xfe>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e78e      	b.n	8004eec <__sflush_r+0x1c>
 8004fce:	4407      	add	r7, r0
 8004fd0:	eba8 0800 	sub.w	r8, r8, r0
 8004fd4:	e7e9      	b.n	8004faa <__sflush_r+0xda>
 8004fd6:	bf00      	nop
 8004fd8:	20400001 	.word	0x20400001

08004fdc <_fflush_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	690b      	ldr	r3, [r1, #16]
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b913      	cbnz	r3, 8004fec <_fflush_r+0x10>
 8004fe6:	2500      	movs	r5, #0
 8004fe8:	4628      	mov	r0, r5
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	b118      	cbz	r0, 8004ff6 <_fflush_r+0x1a>
 8004fee:	6983      	ldr	r3, [r0, #24]
 8004ff0:	b90b      	cbnz	r3, 8004ff6 <_fflush_r+0x1a>
 8004ff2:	f7ff fa15 	bl	8004420 <__sinit>
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <_fflush_r+0x6c>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d11b      	bne.n	8005034 <_fflush_r+0x58>
 8004ffc:	686c      	ldr	r4, [r5, #4]
 8004ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ef      	beq.n	8004fe6 <_fflush_r+0xa>
 8005006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005008:	07d0      	lsls	r0, r2, #31
 800500a:	d404      	bmi.n	8005016 <_fflush_r+0x3a>
 800500c:	0599      	lsls	r1, r3, #22
 800500e:	d402      	bmi.n	8005016 <_fflush_r+0x3a>
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	f7ff faa3 	bl	800455c <__retarget_lock_acquire_recursive>
 8005016:	4628      	mov	r0, r5
 8005018:	4621      	mov	r1, r4
 800501a:	f7ff ff59 	bl	8004ed0 <__sflush_r>
 800501e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005020:	07da      	lsls	r2, r3, #31
 8005022:	4605      	mov	r5, r0
 8005024:	d4e0      	bmi.n	8004fe8 <_fflush_r+0xc>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	059b      	lsls	r3, r3, #22
 800502a:	d4dd      	bmi.n	8004fe8 <_fflush_r+0xc>
 800502c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800502e:	f7ff fa96 	bl	800455e <__retarget_lock_release_recursive>
 8005032:	e7d9      	b.n	8004fe8 <_fflush_r+0xc>
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <_fflush_r+0x70>)
 8005036:	429c      	cmp	r4, r3
 8005038:	d101      	bne.n	800503e <_fflush_r+0x62>
 800503a:	68ac      	ldr	r4, [r5, #8]
 800503c:	e7df      	b.n	8004ffe <_fflush_r+0x22>
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <_fflush_r+0x74>)
 8005040:	429c      	cmp	r4, r3
 8005042:	bf08      	it	eq
 8005044:	68ec      	ldreq	r4, [r5, #12]
 8005046:	e7da      	b.n	8004ffe <_fflush_r+0x22>
 8005048:	08005430 	.word	0x08005430
 800504c:	08005450 	.word	0x08005450
 8005050:	08005410 	.word	0x08005410

08005054 <_lseek_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d07      	ldr	r5, [pc, #28]	; (8005074 <_lseek_r+0x20>)
 8005058:	4604      	mov	r4, r0
 800505a:	4608      	mov	r0, r1
 800505c:	4611      	mov	r1, r2
 800505e:	2200      	movs	r2, #0
 8005060:	602a      	str	r2, [r5, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f7fc faac 	bl	80015c0 <_lseek>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_lseek_r+0x1e>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_lseek_r+0x1e>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000138 	.word	0x20000138

08005078 <__swhatbuf_r>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	460e      	mov	r6, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	2900      	cmp	r1, #0
 8005082:	b096      	sub	sp, #88	; 0x58
 8005084:	4614      	mov	r4, r2
 8005086:	461d      	mov	r5, r3
 8005088:	da08      	bge.n	800509c <__swhatbuf_r+0x24>
 800508a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	061a      	lsls	r2, r3, #24
 8005094:	d410      	bmi.n	80050b8 <__swhatbuf_r+0x40>
 8005096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509a:	e00e      	b.n	80050ba <__swhatbuf_r+0x42>
 800509c:	466a      	mov	r2, sp
 800509e:	f000 f8bb 	bl	8005218 <_fstat_r>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	dbf1      	blt.n	800508a <__swhatbuf_r+0x12>
 80050a6:	9a01      	ldr	r2, [sp, #4]
 80050a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050b0:	425a      	negs	r2, r3
 80050b2:	415a      	adcs	r2, r3
 80050b4:	602a      	str	r2, [r5, #0]
 80050b6:	e7ee      	b.n	8005096 <__swhatbuf_r+0x1e>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	2000      	movs	r0, #0
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	b016      	add	sp, #88	; 0x58
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080050c4 <__smakebuf_r>:
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050c8:	079d      	lsls	r5, r3, #30
 80050ca:	4606      	mov	r6, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	d507      	bpl.n	80050e0 <__smakebuf_r+0x1c>
 80050d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	2301      	movs	r3, #1
 80050da:	6163      	str	r3, [r4, #20]
 80050dc:	b002      	add	sp, #8
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	ab01      	add	r3, sp, #4
 80050e2:	466a      	mov	r2, sp
 80050e4:	f7ff ffc8 	bl	8005078 <__swhatbuf_r>
 80050e8:	9900      	ldr	r1, [sp, #0]
 80050ea:	4605      	mov	r5, r0
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7ff fa57 	bl	80045a0 <_malloc_r>
 80050f2:	b948      	cbnz	r0, 8005108 <__smakebuf_r+0x44>
 80050f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f8:	059a      	lsls	r2, r3, #22
 80050fa:	d4ef      	bmi.n	80050dc <__smakebuf_r+0x18>
 80050fc:	f023 0303 	bic.w	r3, r3, #3
 8005100:	f043 0302 	orr.w	r3, r3, #2
 8005104:	81a3      	strh	r3, [r4, #12]
 8005106:	e7e3      	b.n	80050d0 <__smakebuf_r+0xc>
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <__smakebuf_r+0x7c>)
 800510a:	62b3      	str	r3, [r6, #40]	; 0x28
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	6020      	str	r0, [r4, #0]
 8005110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	6163      	str	r3, [r4, #20]
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	6120      	str	r0, [r4, #16]
 800511e:	b15b      	cbz	r3, 8005138 <__smakebuf_r+0x74>
 8005120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005124:	4630      	mov	r0, r6
 8005126:	f000 f889 	bl	800523c <_isatty_r>
 800512a:	b128      	cbz	r0, 8005138 <__smakebuf_r+0x74>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	89a0      	ldrh	r0, [r4, #12]
 800513a:	4305      	orrs	r5, r0
 800513c:	81a5      	strh	r5, [r4, #12]
 800513e:	e7cd      	b.n	80050dc <__smakebuf_r+0x18>
 8005140:	080043b9 	.word	0x080043b9

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_lock+0x8>)
 8005146:	f7ff ba09 	b.w	800455c <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	2000012c 	.word	0x2000012c

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_unlock+0x8>)
 8005152:	f7ff ba04 	b.w	800455e <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	2000012c 	.word	0x2000012c

0800515c <_free_r>:
 800515c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800515e:	2900      	cmp	r1, #0
 8005160:	d044      	beq.n	80051ec <_free_r+0x90>
 8005162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005166:	9001      	str	r0, [sp, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f1a1 0404 	sub.w	r4, r1, #4
 800516e:	bfb8      	it	lt
 8005170:	18e4      	addlt	r4, r4, r3
 8005172:	f7ff ffe7 	bl	8005144 <__malloc_lock>
 8005176:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <_free_r+0x94>)
 8005178:	9801      	ldr	r0, [sp, #4]
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	b933      	cbnz	r3, 800518c <_free_r+0x30>
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	6014      	str	r4, [r2, #0]
 8005182:	b003      	add	sp, #12
 8005184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005188:	f7ff bfe2 	b.w	8005150 <__malloc_unlock>
 800518c:	42a3      	cmp	r3, r4
 800518e:	d908      	bls.n	80051a2 <_free_r+0x46>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	1961      	adds	r1, r4, r5
 8005194:	428b      	cmp	r3, r1
 8005196:	bf01      	itttt	eq
 8005198:	6819      	ldreq	r1, [r3, #0]
 800519a:	685b      	ldreq	r3, [r3, #4]
 800519c:	1949      	addeq	r1, r1, r5
 800519e:	6021      	streq	r1, [r4, #0]
 80051a0:	e7ed      	b.n	800517e <_free_r+0x22>
 80051a2:	461a      	mov	r2, r3
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b10b      	cbz	r3, 80051ac <_free_r+0x50>
 80051a8:	42a3      	cmp	r3, r4
 80051aa:	d9fa      	bls.n	80051a2 <_free_r+0x46>
 80051ac:	6811      	ldr	r1, [r2, #0]
 80051ae:	1855      	adds	r5, r2, r1
 80051b0:	42a5      	cmp	r5, r4
 80051b2:	d10b      	bne.n	80051cc <_free_r+0x70>
 80051b4:	6824      	ldr	r4, [r4, #0]
 80051b6:	4421      	add	r1, r4
 80051b8:	1854      	adds	r4, r2, r1
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	d1e0      	bne.n	8005182 <_free_r+0x26>
 80051c0:	681c      	ldr	r4, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	6053      	str	r3, [r2, #4]
 80051c6:	4421      	add	r1, r4
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	e7da      	b.n	8005182 <_free_r+0x26>
 80051cc:	d902      	bls.n	80051d4 <_free_r+0x78>
 80051ce:	230c      	movs	r3, #12
 80051d0:	6003      	str	r3, [r0, #0]
 80051d2:	e7d6      	b.n	8005182 <_free_r+0x26>
 80051d4:	6825      	ldr	r5, [r4, #0]
 80051d6:	1961      	adds	r1, r4, r5
 80051d8:	428b      	cmp	r3, r1
 80051da:	bf04      	itt	eq
 80051dc:	6819      	ldreq	r1, [r3, #0]
 80051de:	685b      	ldreq	r3, [r3, #4]
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	bf04      	itt	eq
 80051e4:	1949      	addeq	r1, r1, r5
 80051e6:	6021      	streq	r1, [r4, #0]
 80051e8:	6054      	str	r4, [r2, #4]
 80051ea:	e7ca      	b.n	8005182 <_free_r+0x26>
 80051ec:	b003      	add	sp, #12
 80051ee:	bd30      	pop	{r4, r5, pc}
 80051f0:	20000130 	.word	0x20000130

080051f4 <_read_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	; (8005214 <_read_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc f97c 	bl	8001500 <_read>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_read_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_read_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000138 	.word	0x20000138

08005218 <_fstat_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	; (8005238 <_fstat_r+0x20>)
 800521c:	2300      	movs	r3, #0
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	f7fc f9b0 	bl	800158a <_fstat>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	d102      	bne.n	8005234 <_fstat_r+0x1c>
 800522e:	682b      	ldr	r3, [r5, #0]
 8005230:	b103      	cbz	r3, 8005234 <_fstat_r+0x1c>
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	bd38      	pop	{r3, r4, r5, pc}
 8005236:	bf00      	nop
 8005238:	20000138 	.word	0x20000138

0800523c <_isatty_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	; (8005258 <_isatty_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc f9af 	bl	80015aa <_isatty>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_isatty_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_isatty_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	20000138 	.word	0x20000138

0800525c <_init>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr

08005268 <_fini>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr
