
i2c100kic2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d8  080049d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e0  080049e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091c2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192e  00000000  00000000  00029262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  0002b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e3d  00000000  00000000  0002bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae09  00000000  00000000  0004f97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36b3  00000000  00000000  0005a786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012de39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002958  00000000  00000000  0012de8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048d4 	.word	0x080048d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080048d4 	.word	0x080048d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f000 fdfd 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f8b9 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 f961 	bl	8001044 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d82:	f000 f91f 	bl	8000fc4 <MX_I2C2_Init>
  /* USER CODE BEGIN WHILE */

  //
  sht3x_t dev;
  I2C_Handle_Port_t i2c;
  i2c.instance = &hi2c2;
 8000d86:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <main+0x170>)
 8000d88:	61bb      	str	r3, [r7, #24]

  SHT3x_DIS_init  (&dev, &i2c);
 8000d8a:	f107 0218 	add.w	r2, r7, #24
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fc04 	bl	80015a2 <SHT3x_DIS_init>
  SHT3x_DIS_config(&dev, SHT3X_ADDRESS_A, SHT3X_MODE_HIGH_CS_ENABLED);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	f642 4206 	movw	r2, #11270	; 0x2c06
 8000da2:	2144      	movs	r1, #68	; 0x44
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fc0b 	bl	80015c0 <SHT3x_DIS_config>
  //

  uint32_t temp = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t hum = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
    /* USER CODE END WHILE */

	HAL_StatusTypeDef i2c_status;
	//Command to read from SHT3X-DIS
	uint8_t tx_buffer[2];
	tx_buffer[0] = 0x2C;
 8000db2:	232c      	movs	r3, #44	; 0x2c
 8000db4:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = 0x06;
 8000db6:	2306      	movs	r3, #6
 8000db8:	737b      	strb	r3, [r7, #13]

	uint8_t rx_buffer[6];
	rx_buffer[0] = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	713b      	strb	r3, [r7, #4]
	rx_buffer[1] = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	717b      	strb	r3, [r7, #5]
	rx_buffer[2] = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71bb      	strb	r3, [r7, #6]
	rx_buffer[3] = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	rx_buffer[4] = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	723b      	strb	r3, [r7, #8]
	rx_buffer[5] = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	727b      	strb	r3, [r7, #9]

	i2c_status = HAL_I2C_Master_Transmit(&hi2c2, (0x44<<1), tx_buffer, 2,2000);
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2188      	movs	r1, #136	; 0x88
 8000de0:	483f      	ldr	r0, [pc, #252]	; (8000ee0 <main+0x170>)
 8000de2:	f001 fa67 	bl	80022b4 <HAL_I2C_Master_Transmit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ( i2c_status != HAL_OK){
 8000dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <main+0x8e>
		//Error_Handler();
		i2c_status++;
 8000df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	HAL_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 fe2a 	bl	8001a58 <HAL_Delay>

	i2c_status = HAL_I2C_Master_Receive(&hi2c2, (0x44<<1), rx_buffer, 6,2000);
 8000e04:	1d3a      	adds	r2, r7, #4
 8000e06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	2188      	movs	r1, #136	; 0x88
 8000e10:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <main+0x170>)
 8000e12:	f001 fb4d 	bl	80024b0 <HAL_I2C_Master_Receive>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ( i2c_status != HAL_OK){
 8000e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <main+0xbe>
		//Error_Handler();
		i2c_status++;
 8000e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	temp = (uint32_t)(((rx_buffer[0]*256) + rx_buffer[1])*175)/65535.0-45.0;
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	797a      	ldrb	r2, [r7, #5]
 8000e34:	4413      	add	r3, r2
 8000e36:	22af      	movs	r2, #175	; 0xaf
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb69 	bl	8000514 <__aeabi_ui2d>
 8000e42:	a325      	add	r3, pc, #148	; (adr r3, 8000ed8 <main+0x168>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fd08 	bl	800085c <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <main+0x174>)
 8000e5a:	f7ff fa1d 	bl	8000298 <__aeabi_dsub>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fde1 	bl	8000a2c <__aeabi_d2uiz>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	hum =  (uint32_t)(((rx_buffer[3]*256) + rx_buffer[4]))*100.0/65535.0;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	7a3a      	ldrb	r2, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb4c 	bl	8000514 <__aeabi_ui2d>
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <main+0x178>)
 8000e82:	f7ff fbc1 	bl	8000608 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	a312      	add	r3, pc, #72	; (adr r3, 8000ed8 <main+0x168>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	f7ff fce2 	bl	800085c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fdc4 	bl	8000a2c <__aeabi_d2uiz>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	613b      	str	r3, [r7, #16]

	temp=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
	hum=0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]

	SHT3x_DIS_read_TH(&dev,&temp,&hum);
 8000eb0:	f107 0210 	add.w	r2, r7, #16
 8000eb4:	f107 0114 	add.w	r1, r7, #20
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc53 	bl	8001768 <SHT3x_DIS_read_TH>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <main+0x17c>)
 8000ec6:	f001 f896 	bl	8001ff6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000eca:	2064      	movs	r0, #100	; 0x64
 8000ecc:	f000 fdc4 	bl	8001a58 <HAL_Delay>
  {
 8000ed0:	e76f      	b.n	8000db2 <main+0x42>
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40efffe0 	.word	0x40efffe0
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	40468000 	.word	0x40468000
 8000ee8:	40590000 	.word	0x40590000
 8000eec:	40020400 	.word	0x40020400

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fd52 	bl	80039a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f64:	23a8      	movs	r3, #168	; 0xa8
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 f869 	bl	800304c <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f80:	f000 f990 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 faca 	bl	800353c <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fae:	f000 f979 	bl	80012a4 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	; 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <MX_I2C2_Init+0x78>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <MX_I2C2_Init+0x7c>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_I2C2_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C2_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_I2C2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C2_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_I2C2_Init+0x74>)
 8001002:	f001 f813 	bl	800202c <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f94a 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <MX_I2C2_Init+0x74>)
 8001014:	f001 ff9f 	bl	8002f56 <HAL_I2CEx_ConfigAnalogFilter>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800101e:	f000 f941 	bl	80012a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C2_Init+0x74>)
 8001026:	f001 ffd2 	bl	8002fce <HAL_I2CEx_ConfigDigitalFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001030:	f000 f938 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000008c 	.word	0x2000008c
 800103c:	40005800 	.word	0x40005800
 8001040:	00061a80 	.word	0x00061a80

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <MX_GPIO_Init+0x248>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a8a      	ldr	r2, [pc, #552]	; (800128c <MX_GPIO_Init+0x248>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b88      	ldr	r3, [pc, #544]	; (800128c <MX_GPIO_Init+0x248>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	4b84      	ldr	r3, [pc, #528]	; (800128c <MX_GPIO_Init+0x248>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a83      	ldr	r2, [pc, #524]	; (800128c <MX_GPIO_Init+0x248>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b81      	ldr	r3, [pc, #516]	; (800128c <MX_GPIO_Init+0x248>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b7d      	ldr	r3, [pc, #500]	; (800128c <MX_GPIO_Init+0x248>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a7c      	ldr	r2, [pc, #496]	; (800128c <MX_GPIO_Init+0x248>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b7a      	ldr	r3, [pc, #488]	; (800128c <MX_GPIO_Init+0x248>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b76      	ldr	r3, [pc, #472]	; (800128c <MX_GPIO_Init+0x248>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a75      	ldr	r2, [pc, #468]	; (800128c <MX_GPIO_Init+0x248>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b73      	ldr	r3, [pc, #460]	; (800128c <MX_GPIO_Init+0x248>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b6f      	ldr	r3, [pc, #444]	; (800128c <MX_GPIO_Init+0x248>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a6e      	ldr	r2, [pc, #440]	; (800128c <MX_GPIO_Init+0x248>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b6c      	ldr	r3, [pc, #432]	; (800128c <MX_GPIO_Init+0x248>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b68      	ldr	r3, [pc, #416]	; (800128c <MX_GPIO_Init+0x248>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a67      	ldr	r2, [pc, #412]	; (800128c <MX_GPIO_Init+0x248>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b65      	ldr	r3, [pc, #404]	; (800128c <MX_GPIO_Init+0x248>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b61      	ldr	r3, [pc, #388]	; (800128c <MX_GPIO_Init+0x248>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a60      	ldr	r2, [pc, #384]	; (800128c <MX_GPIO_Init+0x248>)
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b5e      	ldr	r3, [pc, #376]	; (800128c <MX_GPIO_Init+0x248>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f244 0181 	movw	r1, #16513	; 0x4081
 8001124:	485a      	ldr	r0, [pc, #360]	; (8001290 <MX_GPIO_Init+0x24c>)
 8001126:	f000 ff4d 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4859      	ldr	r0, [pc, #356]	; (8001294 <MX_GPIO_Init+0x250>)
 8001130:	f000 ff48 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4853      	ldr	r0, [pc, #332]	; (8001298 <MX_GPIO_Init+0x254>)
 800114c:	f000 fd8e 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001150:	2332      	movs	r3, #50	; 0x32
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	484b      	ldr	r0, [pc, #300]	; (8001298 <MX_GPIO_Init+0x254>)
 800116c:	f000 fd7e 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001170:	2386      	movs	r3, #134	; 0x86
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001180:	230b      	movs	r3, #11
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <MX_GPIO_Init+0x258>)
 800118c:	f000 fd6e 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001190:	f244 0381 	movw	r3, #16513	; 0x4081
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4839      	ldr	r0, [pc, #228]	; (8001290 <MX_GPIO_Init+0x24c>)
 80011aa:	f000 fd5f 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c0:	230b      	movs	r3, #11
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_GPIO_Init+0x24c>)
 80011cc:	f000 fd4e 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e2:	2307      	movs	r3, #7
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x25c>)
 80011ee:	f000 fd3d 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4822      	ldr	r0, [pc, #136]	; (8001294 <MX_GPIO_Init+0x250>)
 800120a:	f000 fd2f 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_GPIO_Init+0x250>)
 8001222:	f000 fd23 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001226:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001238:	230a      	movs	r3, #10
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_GPIO_Init+0x258>)
 8001244:	f000 fd12 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <MX_GPIO_Init+0x258>)
 800125e:	f000 fd05 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001262:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001274:	230b      	movs	r3, #11
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_GPIO_Init+0x250>)
 8001280:	f000 fcf4 	bl	8001c6c <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_MspInit+0x4c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_MspInit+0x4c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_I2C_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_I2C_MspInit+0x88>)
 800132c:	f043 0320 	orr.w	r3, r3, #32
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133e:	2303      	movs	r3, #3
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001342:	2312      	movs	r3, #18
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134e:	2304      	movs	r3, #4
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_I2C_MspInit+0x8c>)
 800135a:	f000 fc87 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005800 	.word	0x40005800
 8001388:	40023800 	.word	0x40023800
 800138c:	40021400 	.word	0x40021400

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 fb1c 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
	}
	return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f002 fa30 	bl	8003954 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20030000 	.word	0x20030000
 8001520:	00000400 	.word	0x00000400
 8001524:	200000e0 	.word	0x200000e0
 8001528:	200000f8 	.word	0x200000f8

0800152c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffd7 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 f9ef 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fbf5 	bl	8000d70 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001588:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001594:	080049e8 	.word	0x080049e8
  ldr r2, =_sbss
 8001598:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800159c:	200000f8 	.word	0x200000f8

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>

080015a2 <SHT3x_DIS_init>:

/* Variables */
I2C_Handle_Port_t i2c;

/* Functions */
void SHT3x_DIS_init(sht3x_t * const dev, I2C_Handle_Port_t* i2c){
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	dev->i2c_port = i2c;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SHT3x_DIS_config>:

void SHT3x_DIS_config(sht3x_t * const dev,  sht3x_address_t my_address, sht3x_mode_t my_mode){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	803b      	strh	r3, [r7, #0]
	//Address
	if ((my_address == SHT3X_ADDRESS_A) || (my_address == SHT3X_ADDRESS_B)){
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	2b44      	cmp	r3, #68	; 0x44
 80015d4:	d002      	beq.n	80015dc <SHT3x_DIS_config+0x1c>
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	2b45      	cmp	r3, #69	; 0x45
 80015da:	d103      	bne.n	80015e4 <SHT3x_DIS_config+0x24>
		dev->address = my_address;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	711a      	strb	r2, [r3, #4]
 80015e2:	e002      	b.n	80015ea <SHT3x_DIS_config+0x2a>
	}else{
		dev->address = SHT3X_ADDRESS_A;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2244      	movs	r2, #68	; 0x44
 80015e8:	711a      	strb	r2, [r3, #4]
	}

	//Mode
	switch (my_mode){
 80015ea:	883b      	ldrh	r3, [r7, #0]
 80015ec:	f642 4210 	movw	r2, #11280	; 0x2c10
 80015f0:	4293      	cmp	r3, r2
 80015f2:	f300 80a8 	bgt.w	8001746 <SHT3x_DIS_config+0x186>
 80015f6:	f642 4206 	movw	r2, #11270	; 0x2c06
 80015fa:	4293      	cmp	r3, r2
 80015fc:	da2b      	bge.n	8001656 <SHT3x_DIS_config+0x96>
 80015fe:	f242 7237 	movw	r2, #10039	; 0x2737
 8001602:	4293      	cmp	r3, r2
 8001604:	f300 809f 	bgt.w	8001746 <SHT3x_DIS_config+0x186>
 8001608:	f242 7221 	movw	r2, #10017	; 0x2721
 800160c:	4293      	cmp	r3, r2
 800160e:	da32      	bge.n	8001676 <SHT3x_DIS_config+0xb6>
 8001610:	f242 4216 	movw	r2, #9238	; 0x2416
 8001614:	4293      	cmp	r3, r2
 8001616:	f300 8096 	bgt.w	8001746 <SHT3x_DIS_config+0x186>
 800161a:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800161e:	da39      	bge.n	8001694 <SHT3x_DIS_config+0xd4>
 8001620:	f242 3234 	movw	r2, #9012	; 0x2334
 8001624:	4293      	cmp	r3, r2
 8001626:	f300 808e 	bgt.w	8001746 <SHT3x_DIS_config+0x186>
 800162a:	f242 3222 	movw	r2, #8994	; 0x2322
 800162e:	4293      	cmp	r3, r2
 8001630:	da3e      	bge.n	80016b0 <SHT3x_DIS_config+0xf0>
 8001632:	f242 2236 	movw	r2, #8758	; 0x2236
 8001636:	4293      	cmp	r3, r2
 8001638:	f300 8085 	bgt.w	8001746 <SHT3x_DIS_config+0x186>
 800163c:	f242 2220 	movw	r2, #8736	; 0x2220
 8001640:	4293      	cmp	r3, r2
 8001642:	da44      	bge.n	80016ce <SHT3x_DIS_config+0x10e>
 8001644:	f242 0232 	movw	r2, #8242	; 0x2032
 8001648:	4293      	cmp	r3, r2
 800164a:	dc6f      	bgt.n	800172c <SHT3x_DIS_config+0x16c>
 800164c:	f242 0224 	movw	r2, #8228	; 0x2024
 8001650:	4293      	cmp	r3, r2
 8001652:	da5b      	bge.n	800170c <SHT3x_DIS_config+0x14c>
 8001654:	e077      	b.n	8001746 <SHT3x_DIS_config+0x186>
 8001656:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 800165a:	3b06      	subs	r3, #6
 800165c:	2201      	movs	r2, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	f240 4381 	movw	r3, #1153	; 0x481
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d164      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 8001674:	e067      	b.n	8001746 <SHT3x_DIS_config+0x186>
 8001676:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800167a:	3b21      	subs	r3, #33	; 0x21
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <SHT3x_DIS_config+0x19c>)
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d155      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 8001692:	e058      	b.n	8001746 <SHT3x_DIS_config+0x186>
 8001694:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <SHT3x_DIS_config+0x1a0>)
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d147      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 80016ae:	e04a      	b.n	8001746 <SHT3x_DIS_config+0x186>
 80016b0:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80016b4:	3b22      	subs	r3, #34	; 0x22
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <SHT3x_DIS_config+0x1a4>)
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d138      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 80016cc:	e03b      	b.n	8001746 <SHT3x_DIS_config+0x186>
 80016ce:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 80016d2:	3b20      	subs	r3, #32
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <SHT3x_DIS_config+0x1a0>)
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 80016ea:	e02c      	b.n	8001746 <SHT3x_DIS_config+0x186>
 80016ec:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
 80016f0:	3b26      	subs	r3, #38	; 0x26
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	f240 4381 	movw	r3, #1153	; 0x481
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 800170a:	e01c      	b.n	8001746 <SHT3x_DIS_config+0x186>
 800170c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001710:	3b24      	subs	r3, #36	; 0x24
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	f644 0301 	movw	r3, #18433	; 0x4801
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <SHT3x_DIS_config+0x17e>
 800172a:	e00c      	b.n	8001746 <SHT3x_DIS_config+0x186>
 800172c:	f242 1230 	movw	r2, #8496	; 0x2130
 8001730:	4293      	cmp	r3, r2
 8001732:	dc08      	bgt.n	8001746 <SHT3x_DIS_config+0x186>
 8001734:	f242 1226 	movw	r2, #8486	; 0x2126
 8001738:	4293      	cmp	r3, r2
 800173a:	dad7      	bge.n	80016ec <SHT3x_DIS_config+0x12c>
 800173c:	e003      	b.n	8001746 <SHT3x_DIS_config+0x186>
	case SHT3X_MODE_MEDIUM_MPS040:
	case SHT3X_MODE_LOW_MPS040:
	case SHT3X_MODE_HIGH_MPS100:
	case SHT3X_MODE_MEDIUM_MPS100:
	case SHT3X_MODE_LOW_MPS100:
		dev->mode = my_mode;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	883a      	ldrh	r2, [r7, #0]
 8001742:	80da      	strh	r2, [r3, #6]
		break;
 8001744:	e004      	b.n	8001750 <SHT3x_DIS_config+0x190>
	default:
		dev->mode = SHT3X_MODE_HIGH_CS_ENABLED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f642 4206 	movw	r2, #11270	; 0x2c06
 800174c:	80da      	strh	r2, [r3, #6]
		break;
 800174e:	bf00      	nop
	}
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	00400201 	.word	0x00400201
 8001760:	00400801 	.word	0x00400801
 8001764:	00040081 	.word	0x00040081

08001768 <SHT3x_DIS_read_TH>:
	tx_buffer[0] = (SHT3X_COMMAND_CLEAR_STATUS & 0xFF00u) >> 8u;
	tx_buffer[1] =  SHT3X_COMMAND_CLEAR_STATUS & 0x00FFu;
	_SHT3x_DIS_write(dev,tx_buffer);
}

void SHT3x_DIS_read_TH(sht3x_t * const dev, uint32_t *temp,uint32_t *hum){
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	uint8_t tx_buffer[2];
	tx_buffer[0] = ((dev->mode) & 0xFF00u) >> 8u;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	88db      	ldrh	r3, [r3, #6]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	753b      	strb	r3, [r7, #20]
	tx_buffer[1] =  (dev->mode) & 0x00FFu;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	88db      	ldrh	r3, [r3, #6]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	757b      	strb	r3, [r7, #21]
	_SHT3x_DIS_write(dev, tx_buffer);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f809 	bl	80017a6 <_SHT3x_DIS_write>
	_SHT3x_DIS_read_TH(dev, temp, hum);
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 f819 	bl	80017d0 <_SHT3x_DIS_read_TH>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_SHT3x_DIS_write>:

static void _SHT3x_DIS_write(sht3x_t * const dev, uint8_t *data){
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	SHT3x_DIS_write_PORT(dev->address, data, 2, dev->i2c_port);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	b298      	uxth	r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2202      	movs	r2, #2
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	f000 f86f 	bl	80018a0 <SHT3x_DIS_write_PORT>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	0000      	movs	r0, r0
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <_SHT3x_DIS_read_TH>:

static void _SHT3x_DIS_read_TH(sht3x_t * const dev, uint32_t *temp,uint32_t *hum){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	uint8_t rx_buffer[6];

	rx_buffer[0] = 0x00;
 80017dc:	2300      	movs	r3, #0
 80017de:	743b      	strb	r3, [r7, #16]
	rx_buffer[1] = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	747b      	strb	r3, [r7, #17]
	rx_buffer[2] = 0x00;
 80017e4:	2300      	movs	r3, #0
 80017e6:	74bb      	strb	r3, [r7, #18]
	rx_buffer[3] = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	74fb      	strb	r3, [r7, #19]
	rx_buffer[4] = 0x00;
 80017ec:	2300      	movs	r3, #0
 80017ee:	753b      	strb	r3, [r7, #20]
	rx_buffer[5] = 0x00;
 80017f0:	2300      	movs	r3, #0
 80017f2:	757b      	strb	r3, [r7, #21]

	SHT3x_DIS_read_PORT(dev->address, rx_buffer,6,dev->i2c_port);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	791b      	ldrb	r3, [r3, #4]
 80017f8:	b298      	uxth	r0, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	2206      	movs	r2, #6
 8001804:	f000 f86e 	bl	80018e4 <SHT3x_DIS_read_PORT>

	*temp = (uint32_t)(((rx_buffer[0]*256) + rx_buffer[1])*175)/65535.0-45.0;
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	7c7a      	ldrb	r2, [r7, #17]
 800180e:	4413      	add	r3, r2
 8001810:	22af      	movs	r2, #175	; 0xaf
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe7c 	bl	8000514 <__aeabi_ui2d>
 800181c:	a31c      	add	r3, pc, #112	; (adr r3, 8001890 <_SHT3x_DIS_read_TH+0xc0>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7ff f81b 	bl	800085c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <_SHT3x_DIS_read_TH+0xc8>)
 8001834:	f7fe fd30 	bl	8000298 <__aeabi_dsub>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f8f4 	bl	8000a2c <__aeabi_d2uiz>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	601a      	str	r2, [r3, #0]
	*hum =  (uint32_t)(((rx_buffer[3]*256) + rx_buffer[4]))*100.0/65535.0;
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	7d3a      	ldrb	r2, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe5e 	bl	8000514 <__aeabi_ui2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <_SHT3x_DIS_read_TH+0xcc>)
 800185e:	f7fe fed3 	bl	8000608 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a309      	add	r3, pc, #36	; (adr r3, 8001890 <_SHT3x_DIS_read_TH+0xc0>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fff4 	bl	800085c <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8d6 	bl	8000a2c <__aeabi_d2uiz>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	00000000 	.word	0x00000000
 8001894:	40efffe0 	.word	0x40efffe0
 8001898:	40468000 	.word	0x40468000
 800189c:	40590000 	.word	0x40590000

080018a0 <SHT3x_DIS_write_PORT>:

char * const cadena_HAL_ERROR 	= " ! HAL_ERROR\n";
char * const cadena_HAL_BUSY 	= " ! HAL_BUSY\n";
char * const cadena_HAL_TIMEOUT = " ! HAL_TIMEOUT\n";

void SHT3x_DIS_write_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4603      	mov	r3, r0
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	4613      	mov	r3, r2
 80018b0:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Master_Transmit(i2c_handle->instance, DevAddress<<1, pData, Size,TIMEOUT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	b299      	uxth	r1, r3
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018c2:	9200      	str	r2, [sp, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	f000 fcf5 	bl	80022b4 <HAL_I2C_Master_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]
	if(i2c_status != HAL_OK){
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <SHT3x_DIS_write_PORT+0x3c>
		_SHT3x_DIS_write_PORT_Error_Handler(i2c_status);
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f826 	bl	8001928 <_SHT3x_DIS_write_PORT_Error_Handler>
	}
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SHT3x_DIS_read_PORT>:

void SHT3x_DIS_read_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4603      	mov	r3, r0
 80018f0:	81fb      	strh	r3, [r7, #14]
 80018f2:	4613      	mov	r3, r2
 80018f4:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Master_Receive(i2c_handle->instance, (DevAddress<<1), pData, Size,TIMEOUT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	b299      	uxth	r1, r3
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	f000 fdd1 	bl	80024b0 <HAL_I2C_Master_Receive>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
	if(i2c_status != HAL_OK){
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <SHT3x_DIS_read_PORT+0x3c>
		_SHT3x_DIS_write_PORT_Error_Handler(i2c_status);
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f804 	bl	8001928 <_SHT3x_DIS_write_PORT_Error_Handler>
	}
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_SHT3x_DIS_write_PORT_Error_Handler>:

void _SHT3x_DIS_write_PORT_Error_Handler (HAL_StatusTypeDef error){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	switch (error) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d00e      	beq.n	8001956 <_SHT3x_DIS_write_PORT_Error_Handler+0x2e>
 8001938:	2b03      	cmp	r3, #3
 800193a:	dc10      	bgt.n	800195e <_SHT3x_DIS_write_PORT_Error_Handler+0x36>
 800193c:	2b01      	cmp	r3, #1
 800193e:	d002      	beq.n	8001946 <_SHT3x_DIS_write_PORT_Error_Handler+0x1e>
 8001940:	2b02      	cmp	r3, #2
 8001942:	d004      	beq.n	800194e <_SHT3x_DIS_write_PORT_Error_Handler+0x26>
			break;
		case HAL_TIMEOUT:
			printf(&cadena_HAL_TIMEOUT);
			break;
		default:
			break;
 8001944:	e00b      	b.n	800195e <_SHT3x_DIS_write_PORT_Error_Handler+0x36>
			printf(&cadena_HAL_ERROR);
 8001946:	4808      	ldr	r0, [pc, #32]	; (8001968 <_SHT3x_DIS_write_PORT_Error_Handler+0x40>)
 8001948:	f002 f836 	bl	80039b8 <iprintf>
			break;
 800194c:	e008      	b.n	8001960 <_SHT3x_DIS_write_PORT_Error_Handler+0x38>
			printf(&cadena_HAL_BUSY);
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <_SHT3x_DIS_write_PORT_Error_Handler+0x44>)
 8001950:	f002 f832 	bl	80039b8 <iprintf>
			break;
 8001954:	e004      	b.n	8001960 <_SHT3x_DIS_write_PORT_Error_Handler+0x38>
			printf(&cadena_HAL_TIMEOUT);
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <_SHT3x_DIS_write_PORT_Error_Handler+0x48>)
 8001958:	f002 f82e 	bl	80039b8 <iprintf>
			break;
 800195c:	e000      	b.n	8001960 <_SHT3x_DIS_write_PORT_Error_Handler+0x38>
			break;
 800195e:	bf00      	nop
	}
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08004934 	.word	0x08004934
 800196c:	08004938 	.word	0x08004938
 8001970:	0800493c 	.word	0x0800493c

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f931 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fc82 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f93b 	bl	8001c52 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f911 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	200000e4 	.word	0x200000e4

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200000e4 	.word	0x200000e4

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff47 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff5c 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffb0 	bl	8001bc0 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e177      	b.n	8001f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8166 	bne.w	8001f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80c0 	beq.w	8001f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a65      	ldr	r2, [pc, #404]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a61      	ldr	r2, [pc, #388]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x32c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d037      	beq.n	8001eaa <HAL_GPIO_Init+0x23e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d031      	beq.n	8001ea6 <HAL_GPIO_Init+0x23a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <HAL_GPIO_Init+0x236>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <HAL_GPIO_Init+0x338>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d025      	beq.n	8001e9e <HAL_GPIO_Init+0x232>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_GPIO_Init+0x33c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <HAL_GPIO_Init+0x22e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_GPIO_Init+0x340>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x22a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x344>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x348>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x222>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_GPIO_Init+0x34c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x21e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e82:	2309      	movs	r3, #9
 8001e84:	e012      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e86:	230a      	movs	r3, #10
 8001e88:	e010      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	e00e      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eee:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f ae84 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021400 	.word	0x40021400
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	40021c00 	.word	0x40021c00
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40022400 	.word	0x40022400
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002008:	887a      	ldrh	r2, [r7, #2]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	041a      	lsls	r2, r3, #16
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43d9      	mvns	r1, r3
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	400b      	ands	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e12b      	b.n	8002296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff f954 	bl	8001300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002090:	f001 fc4c 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 8002094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a81      	ldr	r2, [pc, #516]	; (80022a0 <HAL_I2C_Init+0x274>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d807      	bhi.n	80020b0 <HAL_I2C_Init+0x84>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a80      	ldr	r2, [pc, #512]	; (80022a4 <HAL_I2C_Init+0x278>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e006      	b.n	80020be <HAL_I2C_Init+0x92>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a7d      	ldr	r2, [pc, #500]	; (80022a8 <HAL_I2C_Init+0x27c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf94      	ite	ls
 80020b8:	2301      	movls	r3, #1
 80020ba:	2300      	movhi	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0e7      	b.n	8002296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4a78      	ldr	r2, [pc, #480]	; (80022ac <HAL_I2C_Init+0x280>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0c9b      	lsrs	r3, r3, #18
 80020d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a6a      	ldr	r2, [pc, #424]	; (80022a0 <HAL_I2C_Init+0x274>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d802      	bhi.n	8002100 <HAL_I2C_Init+0xd4>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3301      	adds	r3, #1
 80020fe:	e009      	b.n	8002114 <HAL_I2C_Init+0xe8>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	4a69      	ldr	r2, [pc, #420]	; (80022b0 <HAL_I2C_Init+0x284>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	3301      	adds	r3, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	430b      	orrs	r3, r1
 800211a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	495c      	ldr	r1, [pc, #368]	; (80022a0 <HAL_I2C_Init+0x274>)
 8002130:	428b      	cmp	r3, r1
 8002132:	d819      	bhi.n	8002168 <HAL_I2C_Init+0x13c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e59      	subs	r1, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002148:	400b      	ands	r3, r1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_I2C_Init+0x138>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1e59      	subs	r1, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fbb1 f3f3 	udiv	r3, r1, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002162:	e051      	b.n	8002208 <HAL_I2C_Init+0x1dc>
 8002164:	2304      	movs	r3, #4
 8002166:	e04f      	b.n	8002208 <HAL_I2C_Init+0x1dc>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <HAL_I2C_Init+0x168>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	440b      	add	r3, r1
 800217e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e012      	b.n	80021ba <HAL_I2C_Init+0x18e>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x196>
 80021be:	2301      	movs	r3, #1
 80021c0:	e022      	b.n	8002208 <HAL_I2C_Init+0x1dc>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10e      	bne.n	80021e8 <HAL_I2C_Init+0x1bc>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e58      	subs	r0, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	440b      	add	r3, r1
 80021d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	e00f      	b.n	8002208 <HAL_I2C_Init+0x1dc>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	6809      	ldr	r1, [r1, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6911      	ldr	r1, [r2, #16]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	000186a0 	.word	0x000186a0
 80022a4:	001e847f 	.word	0x001e847f
 80022a8:	003d08ff 	.word	0x003d08ff
 80022ac:	431bde83 	.word	0x431bde83
 80022b0:	10624dd3 	.word	0x10624dd3

080022b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
 80022c4:	4613      	mov	r3, r2
 80022c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff fbba 	bl	8001a40 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	f040 80e0 	bne.w	800249c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2319      	movs	r3, #25
 80022e2:	2201      	movs	r2, #1
 80022e4:	4970      	ldr	r1, [pc, #448]	; (80024a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fc58 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0d3      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_I2C_Master_Transmit+0x50>
 8002300:	2302      	movs	r3, #2
 8002302:	e0cc      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d007      	beq.n	800232a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	; 0x21
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2210      	movs	r2, #16
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	893a      	ldrh	r2, [r7, #8]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_I2C_Master_Transmit+0x1f8>)
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fac2 	bl	80028fc <I2C_MasterRequestWrite>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e08d      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002398:	e066      	b.n	8002468 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fcd2 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d107      	bne.n	80023c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06b      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b04      	cmp	r3, #4
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Master_Transmit+0x188>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fcc2 	bl	8002dca <I2C_WaitOnBTFFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	2b04      	cmp	r3, #4
 8002452:	d107      	bne.n	8002464 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e01a      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d194      	bne.n	800239a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000

080024b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
 80024c0:	4613      	mov	r3, r2
 80024c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff fabc 	bl	8001a40 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 820b 	bne.w	80028ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2319      	movs	r3, #25
 80024de:	2201      	movs	r2, #1
 80024e0:	497c      	ldr	r1, [pc, #496]	; (80026d4 <HAL_I2C_Master_Receive+0x224>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fb5a 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	e1fe      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_I2C_Master_Receive+0x50>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e1f7      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d007      	beq.n	8002526 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002534:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2222      	movs	r2, #34	; 0x22
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2210      	movs	r2, #16
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	893a      	ldrh	r2, [r7, #8]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a5c      	ldr	r2, [pc, #368]	; (80026d8 <HAL_I2C_Master_Receive+0x228>)
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002568:	8979      	ldrh	r1, [r7, #10]
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa46 	bl	8002a00 <I2C_MasterRequestRead>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1b8      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d113      	bne.n	80025ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e18c      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d11b      	bne.n	80025ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e16c      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d11b      	bne.n	800262e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	e14c      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002654:	e138      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b03      	cmp	r3, #3
 800265c:	f200 80f1 	bhi.w	8002842 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b01      	cmp	r3, #1
 8002666:	d123      	bne.n	80026b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fbed 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e139      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ae:	e10b      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d14e      	bne.n	8002756 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	2200      	movs	r2, #0
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <HAL_I2C_Master_Receive+0x22c>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa6a 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e10e      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
 80026d2:	bf00      	nop
 80026d4:	00100002 	.word	0x00100002
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002754:	e0b8      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	2200      	movs	r2, #0
 800275e:	4966      	ldr	r1, [pc, #408]	; (80028f8 <HAL_I2C_Master_Receive+0x448>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa1b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0bf      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	2200      	movs	r2, #0
 80027ba:	494f      	ldr	r1, [pc, #316]	; (80028f8 <HAL_I2C_Master_Receive+0x448>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f9ed 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e091      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002840:	e042      	b.n	80028c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fb00 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e04c      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d118      	bne.n	80028c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f aec2 	bne.w	8002656 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	00010004 	.word	0x00010004

080028fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d006      	beq.n	8002926 <I2C_MasterRequestWrite+0x2a>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d003      	beq.n	8002926 <I2C_MasterRequestWrite+0x2a>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002924:	d108      	bne.n	8002938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e00b      	b.n	8002950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	2b12      	cmp	r3, #18
 800293e:	d107      	bne.n	8002950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f91d 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d103      	bne.n	8002980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e035      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800299c:	611a      	str	r2, [r3, #16]
 800299e:	e01b      	b.n	80029d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	11db      	asrs	r3, r3, #7
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0306 	and.w	r3, r3, #6
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f063 030f 	orn	r3, r3, #15
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <I2C_MasterRequestWrite+0xfc>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f943 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e010      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ce:	897b      	ldrh	r3, [r7, #10]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <I2C_MasterRequestWrite+0x100>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f933 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00010008 	.word	0x00010008
 80029fc:	00010002 	.word	0x00010002

08002a00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d006      	beq.n	8002a3a <I2C_MasterRequestRead+0x3a>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d003      	beq.n	8002a3a <I2C_MasterRequestRead+0x3a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a38:	d108      	bne.n	8002a4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00b      	b.n	8002a64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	2b11      	cmp	r3, #17
 8002a52:	d107      	bne.n	8002a64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f893 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8a:	d103      	bne.n	8002a94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e079      	b.n	8002b8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa0:	d108      	bne.n	8002ab4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	e05f      	b.n	8002b74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ab4:	897b      	ldrh	r3, [r7, #10]
 8002ab6:	11db      	asrs	r3, r3, #7
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f003 0306 	and.w	r3, r3, #6
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f063 030f 	orn	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4930      	ldr	r1, [pc, #192]	; (8002b94 <I2C_MasterRequestRead+0x194>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8b9 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e054      	b.n	8002b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4929      	ldr	r1, [pc, #164]	; (8002b98 <I2C_MasterRequestRead+0x198>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f8a9 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e044      	b.n	8002b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f831 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d103      	bne.n	8002b58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e017      	b.n	8002b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	11db      	asrs	r3, r3, #7
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0306 	and.w	r3, r3, #6
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f063 030e 	orn	r3, r3, #14
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4907      	ldr	r1, [pc, #28]	; (8002b98 <I2C_MasterRequestRead+0x198>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f865 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	00010008 	.word	0x00010008
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bac:	e025      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe ff43 	bl	8001a40 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e023      	b.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10d      	bne.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	e00c      	b.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d0b6      	beq.n	8002bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c58:	e051      	b.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d123      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e046      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d021      	beq.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fec1 	bl	8001a40 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e020      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10c      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e00b      	b.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d18d      	bne.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d54:	e02d      	b.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f8ce 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e02d      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fe67 	bl	8001a40 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d1ca      	bne.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd6:	e02d      	b.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f88d 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02d      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d021      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df0:	f7fe fe26 	bl	8001a40 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d302      	bcc.n	8002e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d1ca      	bne.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e58:	e042      	b.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d119      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e029      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe fdd0 	bl	8001a40 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d1b5      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d11b      	bne.n	8002f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d129      	bne.n	8002fc0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0210 	bic.w	r2, r2, #16
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d12a      	bne.n	800303e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	f023 030f 	bic.w	r3, r3, #15
 800300e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b29a      	uxth	r2, r3
 8003014:	89fb      	ldrh	r3, [r7, #14]
 8003016:	4313      	orrs	r3, r2
 8003018:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	89fa      	ldrh	r2, [r7, #14]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e267      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d075      	beq.n	8003156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00c      	beq.n	8003090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b85      	ldr	r3, [pc, #532]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	2b08      	cmp	r3, #8
 8003080:	d112      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4b82      	ldr	r3, [pc, #520]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308e:	d10b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05b      	beq.n	8003154 <HAL_RCC_OscConfig+0x108>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d157      	bne.n	8003154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e242      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d106      	bne.n	80030c0 <HAL_RCC_OscConfig+0x74>
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a75      	ldr	r2, [pc, #468]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e01d      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6f      	ldr	r2, [pc, #444]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6c      	ldr	r2, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030e4:	4b69      	ldr	r3, [pc, #420]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fc9c 	bl	8001a40 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fc98 	bl	8001a40 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e207      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b5b      	ldr	r3, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0xc0>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fc88 	bl	8001a40 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fc84 	bl	8001a40 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1f3      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0xe8>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d11c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_OscConfig+0x240>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1c7      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4937      	ldr	r1, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	e03a      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCC_OscConfig+0x244>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe fc3d 	bl	8001a40 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fe fc39 	bl	8001a40 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1a8      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4925      	ldr	r1, [pc, #148]	; (800328c <HAL_RCC_OscConfig+0x240>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x244>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fc1c 	bl	8001a40 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7fe fc18 	bl	8001a40 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e187      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d036      	beq.n	80032a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x248>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fbfc 	bl	8001a40 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe fbf8 	bl	8001a40 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e167      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x240>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x200>
 800326a:	e01b      	b.n	80032a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x248>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe fbe5 	bl	8001a40 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	e00e      	b.n	8003298 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327a:	f7fe fbe1 	bl	8001a40 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d907      	bls.n	8003298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e150      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
 800328c:	40023800 	.word	0x40023800
 8003290:	42470000 	.word	0x42470000
 8003294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b88      	ldr	r3, [pc, #544]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ea      	bne.n	800327a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8097 	beq.w	80033e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b81      	ldr	r3, [pc, #516]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b7a      	ldr	r3, [pc, #488]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b77      	ldr	r3, [pc, #476]	; (80034c0 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b74      	ldr	r3, [pc, #464]	; (80034c0 <HAL_RCC_OscConfig+0x474>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a73      	ldr	r2, [pc, #460]	; (80034c0 <HAL_RCC_OscConfig+0x474>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fba1 	bl	8001a40 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fb9d 	bl	8001a40 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e10c      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_OscConfig+0x474>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x2ea>
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a63      	ldr	r2, [pc, #396]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e01c      	b.n	8003370 <HAL_RCC_OscConfig+0x324>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x30c>
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5e      	ldr	r2, [pc, #376]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x324>
 8003358:	4b58      	ldr	r3, [pc, #352]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a57      	ldr	r2, [pc, #348]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe fb62 	bl	8001a40 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe fb5e 	bl	8001a40 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0cb      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ee      	beq.n	8003380 <HAL_RCC_OscConfig+0x334>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe fb4c 	bl	8001a40 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe fb48 	bl	8001a40 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0b5      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	4b3e      	ldr	r3, [pc, #248]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ee      	bne.n	80033ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80a1 	beq.w	800352c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ea:	4b34      	ldr	r3, [pc, #208]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d05c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d141      	bne.n	8003482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fb1c 	bl	8001a40 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fb18 	bl	8001a40 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e087      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	491b      	ldr	r1, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCC_OscConfig+0x478>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe faf1 	bl	8001a40 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe faed 	bl	8001a40 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e05c      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x416>
 8003480:	e054      	b.n	800352c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_RCC_OscConfig+0x478>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fada 	bl	8001a40 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fad6 	bl	8001a40 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e045      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_OscConfig+0x470>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x444>
 80034ae:	e03d      	b.n	800352c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e038      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x4ec>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d028      	beq.n	8003528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d121      	bne.n	8003528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11a      	bne.n	8003528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	4293      	cmp	r3, r2
 8003502:	d111      	bne.n	8003528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d107      	bne.n	8003528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800

0800353c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0cc      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003550:	4b68      	ldr	r3, [pc, #416]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d90c      	bls.n	8003578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b65      	ldr	r3, [pc, #404]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d044      	beq.n	800365c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d119      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e06f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e067      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4934      	ldr	r1, [pc, #208]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800362c:	f7fe fa08 	bl	8001a40 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fe fa04 	bl	8001a40 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e04f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 020c 	and.w	r2, r3, #12
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d1eb      	bne.n	8003634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d20c      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e032      	b.n	80036ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4916      	ldr	r1, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f821 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c6:	4602      	mov	r2, r0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	5ccb      	ldrb	r3, [r1, r3]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe f968 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00
 80036f8:	40023800 	.word	0x40023800
 80036fc:	0800491c 	.word	0x0800491c
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800370c:	b094      	sub	sp, #80	; 0x50
 800370e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
 8003714:	2300      	movs	r3, #0
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	2300      	movs	r3, #0
 800371a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003720:	4b79      	ldr	r3, [pc, #484]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d00d      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x40>
 800372c:	2b08      	cmp	r3, #8
 800372e:	f200 80e1 	bhi.w	80038f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x34>
 8003736:	2b04      	cmp	r3, #4
 8003738:	d003      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x3a>
 800373a:	e0db      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b73      	ldr	r3, [pc, #460]	; (800390c <HAL_RCC_GetSysClockFreq+0x204>)
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003740:	e0db      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_GetSysClockFreq+0x208>)
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003746:	e0d8      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003748:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003752:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
 8003768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800377a:	4622      	mov	r2, r4
 800377c:	462b      	mov	r3, r5
 800377e:	f04f 0000 	mov.w	r0, #0
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	0159      	lsls	r1, r3, #5
 8003788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378c:	0150      	lsls	r0, r2, #5
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4621      	mov	r1, r4
 8003794:	1a51      	subs	r1, r2, r1
 8003796:	6139      	str	r1, [r7, #16]
 8003798:	4629      	mov	r1, r5
 800379a:	eb63 0301 	sbc.w	r3, r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	018b      	lsls	r3, r1, #6
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037b6:	4651      	mov	r1, sl
 80037b8:	018a      	lsls	r2, r1, #6
 80037ba:	4651      	mov	r1, sl
 80037bc:	ebb2 0801 	subs.w	r8, r2, r1
 80037c0:	4659      	mov	r1, fp
 80037c2:	eb63 0901 	sbc.w	r9, r3, r1
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037da:	4690      	mov	r8, r2
 80037dc:	4699      	mov	r9, r3
 80037de:	4623      	mov	r3, r4
 80037e0:	eb18 0303 	adds.w	r3, r8, r3
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	462b      	mov	r3, r5
 80037e8:	eb49 0303 	adc.w	r3, r9, r3
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037fa:	4629      	mov	r1, r5
 80037fc:	024b      	lsls	r3, r1, #9
 80037fe:	4621      	mov	r1, r4
 8003800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003804:	4621      	mov	r1, r4
 8003806:	024a      	lsls	r2, r1, #9
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003818:	f7fd f928 	bl	8000a6c <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	e058      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	4618      	mov	r0, r3
 8003830:	4611      	mov	r1, r2
 8003832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	0159      	lsls	r1, r3, #5
 800384e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003852:	0150      	lsls	r0, r2, #5
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4641      	mov	r1, r8
 800385a:	ebb2 0a01 	subs.w	sl, r2, r1
 800385e:	4649      	mov	r1, r9
 8003860:	eb63 0b01 	sbc.w	fp, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003878:	ebb2 040a 	subs.w	r4, r2, sl
 800387c:	eb63 050b 	sbc.w	r5, r3, fp
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	00eb      	lsls	r3, r5, #3
 800388a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	4614      	mov	r4, r2
 8003892:	461d      	mov	r5, r3
 8003894:	4643      	mov	r3, r8
 8003896:	18e3      	adds	r3, r4, r3
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	464b      	mov	r3, r9
 800389c:	eb45 0303 	adc.w	r3, r5, r3
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ae:	4629      	mov	r1, r5
 80038b0:	028b      	lsls	r3, r1, #10
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b8:	4621      	mov	r1, r4
 80038ba:	028a      	lsls	r2, r1, #10
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	2200      	movs	r2, #0
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	61fa      	str	r2, [r7, #28]
 80038c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038cc:	f7fd f8ce 	bl	8000a6c <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4613      	mov	r3, r2
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	3301      	adds	r3, #1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f2:	e002      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetSysClockFreq+0x204>)
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3750      	adds	r7, #80	; 0x50
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	00f42400 	.word	0x00f42400
 8003910:	007a1200 	.word	0x007a1200

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_RCC_GetHCLKFreq+0x14>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003930:	f7ff fff0 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	0800492c 	.word	0x0800492c

08003954 <__errno>:
 8003954:	4b01      	ldr	r3, [pc, #4]	; (800395c <__errno+0x8>)
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000000c 	.word	0x2000000c

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4d0d      	ldr	r5, [pc, #52]	; (8003998 <__libc_init_array+0x38>)
 8003964:	4c0d      	ldr	r4, [pc, #52]	; (800399c <__libc_init_array+0x3c>)
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	10a4      	asrs	r4, r4, #2
 800396a:	2600      	movs	r6, #0
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	4d0b      	ldr	r5, [pc, #44]	; (80039a0 <__libc_init_array+0x40>)
 8003972:	4c0c      	ldr	r4, [pc, #48]	; (80039a4 <__libc_init_array+0x44>)
 8003974:	f000 ffae 	bl	80048d4 <_init>
 8003978:	1b64      	subs	r4, r4, r5
 800397a:	10a4      	asrs	r4, r4, #2
 800397c:	2600      	movs	r6, #0
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	080049e0 	.word	0x080049e0
 800399c:	080049e0 	.word	0x080049e0
 80039a0:	080049e0 	.word	0x080049e0
 80039a4:	080049e4 	.word	0x080049e4

080039a8 <memset>:
 80039a8:	4402      	add	r2, r0
 80039aa:	4603      	mov	r3, r0
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d100      	bne.n	80039b2 <memset+0xa>
 80039b0:	4770      	bx	lr
 80039b2:	f803 1b01 	strb.w	r1, [r3], #1
 80039b6:	e7f9      	b.n	80039ac <memset+0x4>

080039b8 <iprintf>:
 80039b8:	b40f      	push	{r0, r1, r2, r3}
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <iprintf+0x2c>)
 80039bc:	b513      	push	{r0, r1, r4, lr}
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	b124      	cbz	r4, 80039cc <iprintf+0x14>
 80039c2:	69a3      	ldr	r3, [r4, #24]
 80039c4:	b913      	cbnz	r3, 80039cc <iprintf+0x14>
 80039c6:	4620      	mov	r0, r4
 80039c8:	f000 f866 	bl	8003a98 <__sinit>
 80039cc:	ab05      	add	r3, sp, #20
 80039ce:	9a04      	ldr	r2, [sp, #16]
 80039d0:	68a1      	ldr	r1, [r4, #8]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	4620      	mov	r0, r4
 80039d6:	f000 f9bd 	bl	8003d54 <_vfiprintf_r>
 80039da:	b002      	add	sp, #8
 80039dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e0:	b004      	add	sp, #16
 80039e2:	4770      	bx	lr
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <std>:
 80039e8:	2300      	movs	r3, #0
 80039ea:	b510      	push	{r4, lr}
 80039ec:	4604      	mov	r4, r0
 80039ee:	e9c0 3300 	strd	r3, r3, [r0]
 80039f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039f6:	6083      	str	r3, [r0, #8]
 80039f8:	8181      	strh	r1, [r0, #12]
 80039fa:	6643      	str	r3, [r0, #100]	; 0x64
 80039fc:	81c2      	strh	r2, [r0, #14]
 80039fe:	6183      	str	r3, [r0, #24]
 8003a00:	4619      	mov	r1, r3
 8003a02:	2208      	movs	r2, #8
 8003a04:	305c      	adds	r0, #92	; 0x5c
 8003a06:	f7ff ffcf 	bl	80039a8 <memset>
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <std+0x38>)
 8003a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <std+0x3c>)
 8003a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <std+0x40>)
 8003a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <std+0x44>)
 8003a18:	6224      	str	r4, [r4, #32]
 8003a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	bf00      	nop
 8003a20:	080042fd 	.word	0x080042fd
 8003a24:	0800431f 	.word	0x0800431f
 8003a28:	08004357 	.word	0x08004357
 8003a2c:	0800437b 	.word	0x0800437b

08003a30 <_cleanup_r>:
 8003a30:	4901      	ldr	r1, [pc, #4]	; (8003a38 <_cleanup_r+0x8>)
 8003a32:	f000 b8af 	b.w	8003b94 <_fwalk_reent>
 8003a36:	bf00      	nop
 8003a38:	08004655 	.word	0x08004655

08003a3c <__sfmoreglue>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	2268      	movs	r2, #104	; 0x68
 8003a40:	1e4d      	subs	r5, r1, #1
 8003a42:	4355      	muls	r5, r2
 8003a44:	460e      	mov	r6, r1
 8003a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a4a:	f000 f8e5 	bl	8003c18 <_malloc_r>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	b140      	cbz	r0, 8003a64 <__sfmoreglue+0x28>
 8003a52:	2100      	movs	r1, #0
 8003a54:	e9c0 1600 	strd	r1, r6, [r0]
 8003a58:	300c      	adds	r0, #12
 8003a5a:	60a0      	str	r0, [r4, #8]
 8003a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a60:	f7ff ffa2 	bl	80039a8 <memset>
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd70      	pop	{r4, r5, r6, pc}

08003a68 <__sfp_lock_acquire>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__sfp_lock_acquire+0x8>)
 8003a6a:	f000 b8b3 	b.w	8003bd4 <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	200000e9 	.word	0x200000e9

08003a74 <__sfp_lock_release>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__sfp_lock_release+0x8>)
 8003a76:	f000 b8ae 	b.w	8003bd6 <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	200000e9 	.word	0x200000e9

08003a80 <__sinit_lock_acquire>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__sinit_lock_acquire+0x8>)
 8003a82:	f000 b8a7 	b.w	8003bd4 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	200000ea 	.word	0x200000ea

08003a8c <__sinit_lock_release>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__sinit_lock_release+0x8>)
 8003a8e:	f000 b8a2 	b.w	8003bd6 <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	200000ea 	.word	0x200000ea

08003a98 <__sinit>:
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	f7ff fff0 	bl	8003a80 <__sinit_lock_acquire>
 8003aa0:	69a3      	ldr	r3, [r4, #24]
 8003aa2:	b11b      	cbz	r3, 8003aac <__sinit+0x14>
 8003aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa8:	f7ff bff0 	b.w	8003a8c <__sinit_lock_release>
 8003aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <__sinit+0x68>)
 8003ab4:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <__sinit+0x6c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	bf04      	itt	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	61a3      	streq	r3, [r4, #24]
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 f820 	bl	8003b08 <__sfp>
 8003ac8:	6060      	str	r0, [r4, #4]
 8003aca:	4620      	mov	r0, r4
 8003acc:	f000 f81c 	bl	8003b08 <__sfp>
 8003ad0:	60a0      	str	r0, [r4, #8]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f000 f818 	bl	8003b08 <__sfp>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	60e0      	str	r0, [r4, #12]
 8003adc:	2104      	movs	r1, #4
 8003ade:	6860      	ldr	r0, [r4, #4]
 8003ae0:	f7ff ff82 	bl	80039e8 <std>
 8003ae4:	68a0      	ldr	r0, [r4, #8]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2109      	movs	r1, #9
 8003aea:	f7ff ff7d 	bl	80039e8 <std>
 8003aee:	68e0      	ldr	r0, [r4, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	2112      	movs	r1, #18
 8003af4:	f7ff ff78 	bl	80039e8 <std>
 8003af8:	2301      	movs	r3, #1
 8003afa:	61a3      	str	r3, [r4, #24]
 8003afc:	e7d2      	b.n	8003aa4 <__sinit+0xc>
 8003afe:	bf00      	nop
 8003b00:	08004940 	.word	0x08004940
 8003b04:	08003a31 	.word	0x08003a31

08003b08 <__sfp>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	4607      	mov	r7, r0
 8003b0c:	f7ff ffac 	bl	8003a68 <__sfp_lock_acquire>
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <__sfp+0x84>)
 8003b12:	681e      	ldr	r6, [r3, #0]
 8003b14:	69b3      	ldr	r3, [r6, #24]
 8003b16:	b913      	cbnz	r3, 8003b1e <__sfp+0x16>
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7ff ffbd 	bl	8003a98 <__sinit>
 8003b1e:	3648      	adds	r6, #72	; 0x48
 8003b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	d503      	bpl.n	8003b30 <__sfp+0x28>
 8003b28:	6833      	ldr	r3, [r6, #0]
 8003b2a:	b30b      	cbz	r3, 8003b70 <__sfp+0x68>
 8003b2c:	6836      	ldr	r6, [r6, #0]
 8003b2e:	e7f7      	b.n	8003b20 <__sfp+0x18>
 8003b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b34:	b9d5      	cbnz	r5, 8003b6c <__sfp+0x64>
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <__sfp+0x88>)
 8003b38:	60e3      	str	r3, [r4, #12]
 8003b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b40:	f000 f847 	bl	8003bd2 <__retarget_lock_init_recursive>
 8003b44:	f7ff ff96 	bl	8003a74 <__sfp_lock_release>
 8003b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b50:	6025      	str	r5, [r4, #0]
 8003b52:	61a5      	str	r5, [r4, #24]
 8003b54:	2208      	movs	r2, #8
 8003b56:	4629      	mov	r1, r5
 8003b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b5c:	f7ff ff24 	bl	80039a8 <memset>
 8003b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b6c:	3468      	adds	r4, #104	; 0x68
 8003b6e:	e7d9      	b.n	8003b24 <__sfp+0x1c>
 8003b70:	2104      	movs	r1, #4
 8003b72:	4638      	mov	r0, r7
 8003b74:	f7ff ff62 	bl	8003a3c <__sfmoreglue>
 8003b78:	4604      	mov	r4, r0
 8003b7a:	6030      	str	r0, [r6, #0]
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d1d5      	bne.n	8003b2c <__sfp+0x24>
 8003b80:	f7ff ff78 	bl	8003a74 <__sfp_lock_release>
 8003b84:	230c      	movs	r3, #12
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	e7ee      	b.n	8003b68 <__sfp+0x60>
 8003b8a:	bf00      	nop
 8003b8c:	08004940 	.word	0x08004940
 8003b90:	ffff0001 	.word	0xffff0001

08003b94 <_fwalk_reent>:
 8003b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	4606      	mov	r6, r0
 8003b9a:	4688      	mov	r8, r1
 8003b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ba0:	2700      	movs	r7, #0
 8003ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8003baa:	d505      	bpl.n	8003bb8 <_fwalk_reent+0x24>
 8003bac:	6824      	ldr	r4, [r4, #0]
 8003bae:	2c00      	cmp	r4, #0
 8003bb0:	d1f7      	bne.n	8003ba2 <_fwalk_reent+0xe>
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb8:	89ab      	ldrh	r3, [r5, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d907      	bls.n	8003bce <_fwalk_reent+0x3a>
 8003bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	d003      	beq.n	8003bce <_fwalk_reent+0x3a>
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	4630      	mov	r0, r6
 8003bca:	47c0      	blx	r8
 8003bcc:	4307      	orrs	r7, r0
 8003bce:	3568      	adds	r5, #104	; 0x68
 8003bd0:	e7e9      	b.n	8003ba6 <_fwalk_reent+0x12>

08003bd2 <__retarget_lock_init_recursive>:
 8003bd2:	4770      	bx	lr

08003bd4 <__retarget_lock_acquire_recursive>:
 8003bd4:	4770      	bx	lr

08003bd6 <__retarget_lock_release_recursive>:
 8003bd6:	4770      	bx	lr

08003bd8 <sbrk_aligned>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0e      	ldr	r6, [pc, #56]	; (8003c14 <sbrk_aligned+0x3c>)
 8003bdc:	460c      	mov	r4, r1
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	4605      	mov	r5, r0
 8003be2:	b911      	cbnz	r1, 8003bea <sbrk_aligned+0x12>
 8003be4:	f000 fb7a 	bl	80042dc <_sbrk_r>
 8003be8:	6030      	str	r0, [r6, #0]
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 fb75 	bl	80042dc <_sbrk_r>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d00a      	beq.n	8003c0c <sbrk_aligned+0x34>
 8003bf6:	1cc4      	adds	r4, r0, #3
 8003bf8:	f024 0403 	bic.w	r4, r4, #3
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d007      	beq.n	8003c10 <sbrk_aligned+0x38>
 8003c00:	1a21      	subs	r1, r4, r0
 8003c02:	4628      	mov	r0, r5
 8003c04:	f000 fb6a 	bl	80042dc <_sbrk_r>
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d101      	bne.n	8003c10 <sbrk_aligned+0x38>
 8003c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c10:	4620      	mov	r0, r4
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	200000f0 	.word	0x200000f0

08003c18 <_malloc_r>:
 8003c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1c:	1ccd      	adds	r5, r1, #3
 8003c1e:	f025 0503 	bic.w	r5, r5, #3
 8003c22:	3508      	adds	r5, #8
 8003c24:	2d0c      	cmp	r5, #12
 8003c26:	bf38      	it	cc
 8003c28:	250c      	movcc	r5, #12
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	db01      	blt.n	8003c34 <_malloc_r+0x1c>
 8003c30:	42a9      	cmp	r1, r5
 8003c32:	d905      	bls.n	8003c40 <_malloc_r+0x28>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	2600      	movs	r6, #0
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	4e2e      	ldr	r6, [pc, #184]	; (8003cfc <_malloc_r+0xe4>)
 8003c42:	f000 fdbb 	bl	80047bc <__malloc_lock>
 8003c46:	6833      	ldr	r3, [r6, #0]
 8003c48:	461c      	mov	r4, r3
 8003c4a:	bb34      	cbnz	r4, 8003c9a <_malloc_r+0x82>
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7ff ffc2 	bl	8003bd8 <sbrk_aligned>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	4604      	mov	r4, r0
 8003c58:	d14d      	bne.n	8003cf6 <_malloc_r+0xde>
 8003c5a:	6834      	ldr	r4, [r6, #0]
 8003c5c:	4626      	mov	r6, r4
 8003c5e:	2e00      	cmp	r6, #0
 8003c60:	d140      	bne.n	8003ce4 <_malloc_r+0xcc>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	4631      	mov	r1, r6
 8003c66:	4638      	mov	r0, r7
 8003c68:	eb04 0803 	add.w	r8, r4, r3
 8003c6c:	f000 fb36 	bl	80042dc <_sbrk_r>
 8003c70:	4580      	cmp	r8, r0
 8003c72:	d13a      	bne.n	8003cea <_malloc_r+0xd2>
 8003c74:	6821      	ldr	r1, [r4, #0]
 8003c76:	3503      	adds	r5, #3
 8003c78:	1a6d      	subs	r5, r5, r1
 8003c7a:	f025 0503 	bic.w	r5, r5, #3
 8003c7e:	3508      	adds	r5, #8
 8003c80:	2d0c      	cmp	r5, #12
 8003c82:	bf38      	it	cc
 8003c84:	250c      	movcc	r5, #12
 8003c86:	4629      	mov	r1, r5
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7ff ffa5 	bl	8003bd8 <sbrk_aligned>
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d02b      	beq.n	8003cea <_malloc_r+0xd2>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	442b      	add	r3, r5
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	e00e      	b.n	8003cb8 <_malloc_r+0xa0>
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	1b52      	subs	r2, r2, r5
 8003c9e:	d41e      	bmi.n	8003cde <_malloc_r+0xc6>
 8003ca0:	2a0b      	cmp	r2, #11
 8003ca2:	d916      	bls.n	8003cd2 <_malloc_r+0xba>
 8003ca4:	1961      	adds	r1, r4, r5
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6025      	str	r5, [r4, #0]
 8003caa:	bf18      	it	ne
 8003cac:	6059      	strne	r1, [r3, #4]
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	bf08      	it	eq
 8003cb2:	6031      	streq	r1, [r6, #0]
 8003cb4:	5162      	str	r2, [r4, r5]
 8003cb6:	604b      	str	r3, [r1, #4]
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f104 060b 	add.w	r6, r4, #11
 8003cbe:	f000 fd83 	bl	80047c8 <__malloc_unlock>
 8003cc2:	f026 0607 	bic.w	r6, r6, #7
 8003cc6:	1d23      	adds	r3, r4, #4
 8003cc8:	1af2      	subs	r2, r6, r3
 8003cca:	d0b6      	beq.n	8003c3a <_malloc_r+0x22>
 8003ccc:	1b9b      	subs	r3, r3, r6
 8003cce:	50a3      	str	r3, [r4, r2]
 8003cd0:	e7b3      	b.n	8003c3a <_malloc_r+0x22>
 8003cd2:	6862      	ldr	r2, [r4, #4]
 8003cd4:	42a3      	cmp	r3, r4
 8003cd6:	bf0c      	ite	eq
 8003cd8:	6032      	streq	r2, [r6, #0]
 8003cda:	605a      	strne	r2, [r3, #4]
 8003cdc:	e7ec      	b.n	8003cb8 <_malloc_r+0xa0>
 8003cde:	4623      	mov	r3, r4
 8003ce0:	6864      	ldr	r4, [r4, #4]
 8003ce2:	e7b2      	b.n	8003c4a <_malloc_r+0x32>
 8003ce4:	4634      	mov	r4, r6
 8003ce6:	6876      	ldr	r6, [r6, #4]
 8003ce8:	e7b9      	b.n	8003c5e <_malloc_r+0x46>
 8003cea:	230c      	movs	r3, #12
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f000 fd6a 	bl	80047c8 <__malloc_unlock>
 8003cf4:	e7a1      	b.n	8003c3a <_malloc_r+0x22>
 8003cf6:	6025      	str	r5, [r4, #0]
 8003cf8:	e7de      	b.n	8003cb8 <_malloc_r+0xa0>
 8003cfa:	bf00      	nop
 8003cfc:	200000ec 	.word	0x200000ec

08003d00 <__sfputc_r>:
 8003d00:	6893      	ldr	r3, [r2, #8]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	b410      	push	{r4}
 8003d08:	6093      	str	r3, [r2, #8]
 8003d0a:	da08      	bge.n	8003d1e <__sfputc_r+0x1e>
 8003d0c:	6994      	ldr	r4, [r2, #24]
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	db01      	blt.n	8003d16 <__sfputc_r+0x16>
 8003d12:	290a      	cmp	r1, #10
 8003d14:	d103      	bne.n	8003d1e <__sfputc_r+0x1e>
 8003d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d1a:	f000 bb33 	b.w	8004384 <__swbuf_r>
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	1c58      	adds	r0, r3, #1
 8003d22:	6010      	str	r0, [r2, #0]
 8003d24:	7019      	strb	r1, [r3, #0]
 8003d26:	4608      	mov	r0, r1
 8003d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <__sfputs_r>:
 8003d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d30:	4606      	mov	r6, r0
 8003d32:	460f      	mov	r7, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	18d5      	adds	r5, r2, r3
 8003d38:	42ac      	cmp	r4, r5
 8003d3a:	d101      	bne.n	8003d40 <__sfputs_r+0x12>
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	e007      	b.n	8003d50 <__sfputs_r+0x22>
 8003d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d44:	463a      	mov	r2, r7
 8003d46:	4630      	mov	r0, r6
 8003d48:	f7ff ffda 	bl	8003d00 <__sfputc_r>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d1f3      	bne.n	8003d38 <__sfputs_r+0xa>
 8003d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d54 <_vfiprintf_r>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	460d      	mov	r5, r1
 8003d5a:	b09d      	sub	sp, #116	; 0x74
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	4698      	mov	r8, r3
 8003d60:	4606      	mov	r6, r0
 8003d62:	b118      	cbz	r0, 8003d6c <_vfiprintf_r+0x18>
 8003d64:	6983      	ldr	r3, [r0, #24]
 8003d66:	b90b      	cbnz	r3, 8003d6c <_vfiprintf_r+0x18>
 8003d68:	f7ff fe96 	bl	8003a98 <__sinit>
 8003d6c:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <_vfiprintf_r+0x240>)
 8003d6e:	429d      	cmp	r5, r3
 8003d70:	d11b      	bne.n	8003daa <_vfiprintf_r+0x56>
 8003d72:	6875      	ldr	r5, [r6, #4]
 8003d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d76:	07d9      	lsls	r1, r3, #31
 8003d78:	d405      	bmi.n	8003d86 <_vfiprintf_r+0x32>
 8003d7a:	89ab      	ldrh	r3, [r5, #12]
 8003d7c:	059a      	lsls	r2, r3, #22
 8003d7e:	d402      	bmi.n	8003d86 <_vfiprintf_r+0x32>
 8003d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d82:	f7ff ff27 	bl	8003bd4 <__retarget_lock_acquire_recursive>
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	d501      	bpl.n	8003d90 <_vfiprintf_r+0x3c>
 8003d8c:	692b      	ldr	r3, [r5, #16]
 8003d8e:	b9eb      	cbnz	r3, 8003dcc <_vfiprintf_r+0x78>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	f000 fb5a 	bl	800444c <__swsetup_r>
 8003d98:	b1c0      	cbz	r0, 8003dcc <_vfiprintf_r+0x78>
 8003d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d9c:	07dc      	lsls	r4, r3, #31
 8003d9e:	d50e      	bpl.n	8003dbe <_vfiprintf_r+0x6a>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	b01d      	add	sp, #116	; 0x74
 8003da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003daa:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <_vfiprintf_r+0x244>)
 8003dac:	429d      	cmp	r5, r3
 8003dae:	d101      	bne.n	8003db4 <_vfiprintf_r+0x60>
 8003db0:	68b5      	ldr	r5, [r6, #8]
 8003db2:	e7df      	b.n	8003d74 <_vfiprintf_r+0x20>
 8003db4:	4b79      	ldr	r3, [pc, #484]	; (8003f9c <_vfiprintf_r+0x248>)
 8003db6:	429d      	cmp	r5, r3
 8003db8:	bf08      	it	eq
 8003dba:	68f5      	ldreq	r5, [r6, #12]
 8003dbc:	e7da      	b.n	8003d74 <_vfiprintf_r+0x20>
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	0598      	lsls	r0, r3, #22
 8003dc2:	d4ed      	bmi.n	8003da0 <_vfiprintf_r+0x4c>
 8003dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc6:	f7ff ff06 	bl	8003bd6 <__retarget_lock_release_recursive>
 8003dca:	e7e9      	b.n	8003da0 <_vfiprintf_r+0x4c>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dda:	2330      	movs	r3, #48	; 0x30
 8003ddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003fa0 <_vfiprintf_r+0x24c>
 8003de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de4:	f04f 0901 	mov.w	r9, #1
 8003de8:	4623      	mov	r3, r4
 8003dea:	469a      	mov	sl, r3
 8003dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003df0:	b10a      	cbz	r2, 8003df6 <_vfiprintf_r+0xa2>
 8003df2:	2a25      	cmp	r2, #37	; 0x25
 8003df4:	d1f9      	bne.n	8003dea <_vfiprintf_r+0x96>
 8003df6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dfa:	d00b      	beq.n	8003e14 <_vfiprintf_r+0xc0>
 8003dfc:	465b      	mov	r3, fp
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff ff93 	bl	8003d2e <__sfputs_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	f000 80aa 	beq.w	8003f62 <_vfiprintf_r+0x20e>
 8003e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e10:	445a      	add	r2, fp
 8003e12:	9209      	str	r2, [sp, #36]	; 0x24
 8003e14:	f89a 3000 	ldrb.w	r3, [sl]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a2 	beq.w	8003f62 <_vfiprintf_r+0x20e>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e28:	f10a 0a01 	add.w	sl, sl, #1
 8003e2c:	9304      	str	r3, [sp, #16]
 8003e2e:	9307      	str	r3, [sp, #28]
 8003e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e34:	931a      	str	r3, [sp, #104]	; 0x68
 8003e36:	4654      	mov	r4, sl
 8003e38:	2205      	movs	r2, #5
 8003e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3e:	4858      	ldr	r0, [pc, #352]	; (8003fa0 <_vfiprintf_r+0x24c>)
 8003e40:	f7fc f9d6 	bl	80001f0 <memchr>
 8003e44:	9a04      	ldr	r2, [sp, #16]
 8003e46:	b9d8      	cbnz	r0, 8003e80 <_vfiprintf_r+0x12c>
 8003e48:	06d1      	lsls	r1, r2, #27
 8003e4a:	bf44      	itt	mi
 8003e4c:	2320      	movmi	r3, #32
 8003e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e52:	0713      	lsls	r3, r2, #28
 8003e54:	bf44      	itt	mi
 8003e56:	232b      	movmi	r3, #43	; 0x2b
 8003e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e60:	2b2a      	cmp	r3, #42	; 0x2a
 8003e62:	d015      	beq.n	8003e90 <_vfiprintf_r+0x13c>
 8003e64:	9a07      	ldr	r2, [sp, #28]
 8003e66:	4654      	mov	r4, sl
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f04f 0c0a 	mov.w	ip, #10
 8003e6e:	4621      	mov	r1, r4
 8003e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e74:	3b30      	subs	r3, #48	; 0x30
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	d94e      	bls.n	8003f18 <_vfiprintf_r+0x1c4>
 8003e7a:	b1b0      	cbz	r0, 8003eaa <_vfiprintf_r+0x156>
 8003e7c:	9207      	str	r2, [sp, #28]
 8003e7e:	e014      	b.n	8003eaa <_vfiprintf_r+0x156>
 8003e80:	eba0 0308 	sub.w	r3, r0, r8
 8003e84:	fa09 f303 	lsl.w	r3, r9, r3
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	46a2      	mov	sl, r4
 8003e8e:	e7d2      	b.n	8003e36 <_vfiprintf_r+0xe2>
 8003e90:	9b03      	ldr	r3, [sp, #12]
 8003e92:	1d19      	adds	r1, r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	9103      	str	r1, [sp, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bfbb      	ittet	lt
 8003e9c:	425b      	neglt	r3, r3
 8003e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea2:	9307      	strge	r3, [sp, #28]
 8003ea4:	9307      	strlt	r3, [sp, #28]
 8003ea6:	bfb8      	it	lt
 8003ea8:	9204      	strlt	r2, [sp, #16]
 8003eaa:	7823      	ldrb	r3, [r4, #0]
 8003eac:	2b2e      	cmp	r3, #46	; 0x2e
 8003eae:	d10c      	bne.n	8003eca <_vfiprintf_r+0x176>
 8003eb0:	7863      	ldrb	r3, [r4, #1]
 8003eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb4:	d135      	bne.n	8003f22 <_vfiprintf_r+0x1ce>
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	9203      	str	r2, [sp, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bfb8      	it	lt
 8003ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec6:	3402      	adds	r4, #2
 8003ec8:	9305      	str	r3, [sp, #20]
 8003eca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003fb0 <_vfiprintf_r+0x25c>
 8003ece:	7821      	ldrb	r1, [r4, #0]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	f7fc f98c 	bl	80001f0 <memchr>
 8003ed8:	b140      	cbz	r0, 8003eec <_vfiprintf_r+0x198>
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	eba0 000a 	sub.w	r0, r0, sl
 8003ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ee4:	9b04      	ldr	r3, [sp, #16]
 8003ee6:	4303      	orrs	r3, r0
 8003ee8:	3401      	adds	r4, #1
 8003eea:	9304      	str	r3, [sp, #16]
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	482c      	ldr	r0, [pc, #176]	; (8003fa4 <_vfiprintf_r+0x250>)
 8003ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	f7fc f97a 	bl	80001f0 <memchr>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d03f      	beq.n	8003f80 <_vfiprintf_r+0x22c>
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <_vfiprintf_r+0x254>)
 8003f02:	bb1b      	cbnz	r3, 8003f4c <_vfiprintf_r+0x1f8>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	3307      	adds	r3, #7
 8003f08:	f023 0307 	bic.w	r3, r3, #7
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f12:	443b      	add	r3, r7
 8003f14:	9309      	str	r3, [sp, #36]	; 0x24
 8003f16:	e767      	b.n	8003de8 <_vfiprintf_r+0x94>
 8003f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	2001      	movs	r0, #1
 8003f20:	e7a5      	b.n	8003e6e <_vfiprintf_r+0x11a>
 8003f22:	2300      	movs	r3, #0
 8003f24:	3401      	adds	r4, #1
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0c0a 	mov.w	ip, #10
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f34:	3a30      	subs	r2, #48	; 0x30
 8003f36:	2a09      	cmp	r2, #9
 8003f38:	d903      	bls.n	8003f42 <_vfiprintf_r+0x1ee>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0c5      	beq.n	8003eca <_vfiprintf_r+0x176>
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	e7c3      	b.n	8003eca <_vfiprintf_r+0x176>
 8003f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f46:	4604      	mov	r4, r0
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7f0      	b.n	8003f2e <_vfiprintf_r+0x1da>
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	462a      	mov	r2, r5
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <_vfiprintf_r+0x258>)
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	4630      	mov	r0, r6
 8003f58:	f3af 8000 	nop.w
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	1c78      	adds	r0, r7, #1
 8003f60:	d1d6      	bne.n	8003f10 <_vfiprintf_r+0x1bc>
 8003f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f64:	07d9      	lsls	r1, r3, #31
 8003f66:	d405      	bmi.n	8003f74 <_vfiprintf_r+0x220>
 8003f68:	89ab      	ldrh	r3, [r5, #12]
 8003f6a:	059a      	lsls	r2, r3, #22
 8003f6c:	d402      	bmi.n	8003f74 <_vfiprintf_r+0x220>
 8003f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f70:	f7ff fe31 	bl	8003bd6 <__retarget_lock_release_recursive>
 8003f74:	89ab      	ldrh	r3, [r5, #12]
 8003f76:	065b      	lsls	r3, r3, #25
 8003f78:	f53f af12 	bmi.w	8003da0 <_vfiprintf_r+0x4c>
 8003f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7e:	e711      	b.n	8003da4 <_vfiprintf_r+0x50>
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <_vfiprintf_r+0x258>)
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f000 f880 	bl	8004090 <_printf_i>
 8003f90:	e7e4      	b.n	8003f5c <_vfiprintf_r+0x208>
 8003f92:	bf00      	nop
 8003f94:	08004964 	.word	0x08004964
 8003f98:	08004984 	.word	0x08004984
 8003f9c:	08004944 	.word	0x08004944
 8003fa0:	080049a4 	.word	0x080049a4
 8003fa4:	080049ae 	.word	0x080049ae
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	08003d2f 	.word	0x08003d2f
 8003fb0:	080049aa 	.word	0x080049aa

08003fb4 <_printf_common>:
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	4616      	mov	r6, r2
 8003fba:	4699      	mov	r9, r3
 8003fbc:	688a      	ldr	r2, [r1, #8]
 8003fbe:	690b      	ldr	r3, [r1, #16]
 8003fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bfb8      	it	lt
 8003fc8:	4613      	movlt	r3, r2
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	b10a      	cbz	r2, 8003fda <_printf_common+0x26>
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	0699      	lsls	r1, r3, #26
 8003fde:	bf42      	ittt	mi
 8003fe0:	6833      	ldrmi	r3, [r6, #0]
 8003fe2:	3302      	addmi	r3, #2
 8003fe4:	6033      	strmi	r3, [r6, #0]
 8003fe6:	6825      	ldr	r5, [r4, #0]
 8003fe8:	f015 0506 	ands.w	r5, r5, #6
 8003fec:	d106      	bne.n	8003ffc <_printf_common+0x48>
 8003fee:	f104 0a19 	add.w	sl, r4, #25
 8003ff2:	68e3      	ldr	r3, [r4, #12]
 8003ff4:	6832      	ldr	r2, [r6, #0]
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	42ab      	cmp	r3, r5
 8003ffa:	dc26      	bgt.n	800404a <_printf_common+0x96>
 8003ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004000:	1e13      	subs	r3, r2, #0
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	bf18      	it	ne
 8004006:	2301      	movne	r3, #1
 8004008:	0692      	lsls	r2, r2, #26
 800400a:	d42b      	bmi.n	8004064 <_printf_common+0xb0>
 800400c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d01e      	beq.n	8004058 <_printf_common+0xa4>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	68e5      	ldr	r5, [r4, #12]
 800401e:	6832      	ldr	r2, [r6, #0]
 8004020:	f003 0306 	and.w	r3, r3, #6
 8004024:	2b04      	cmp	r3, #4
 8004026:	bf08      	it	eq
 8004028:	1aad      	subeq	r5, r5, r2
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	6922      	ldr	r2, [r4, #16]
 800402e:	bf0c      	ite	eq
 8004030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004034:	2500      	movne	r5, #0
 8004036:	4293      	cmp	r3, r2
 8004038:	bfc4      	itt	gt
 800403a:	1a9b      	subgt	r3, r3, r2
 800403c:	18ed      	addgt	r5, r5, r3
 800403e:	2600      	movs	r6, #0
 8004040:	341a      	adds	r4, #26
 8004042:	42b5      	cmp	r5, r6
 8004044:	d11a      	bne.n	800407c <_printf_common+0xc8>
 8004046:	2000      	movs	r0, #0
 8004048:	e008      	b.n	800405c <_printf_common+0xa8>
 800404a:	2301      	movs	r3, #1
 800404c:	4652      	mov	r2, sl
 800404e:	4649      	mov	r1, r9
 8004050:	4638      	mov	r0, r7
 8004052:	47c0      	blx	r8
 8004054:	3001      	adds	r0, #1
 8004056:	d103      	bne.n	8004060 <_printf_common+0xac>
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004060:	3501      	adds	r5, #1
 8004062:	e7c6      	b.n	8003ff2 <_printf_common+0x3e>
 8004064:	18e1      	adds	r1, r4, r3
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	2030      	movs	r0, #48	; 0x30
 800406a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800406e:	4422      	add	r2, r4
 8004070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004078:	3302      	adds	r3, #2
 800407a:	e7c7      	b.n	800400c <_printf_common+0x58>
 800407c:	2301      	movs	r3, #1
 800407e:	4622      	mov	r2, r4
 8004080:	4649      	mov	r1, r9
 8004082:	4638      	mov	r0, r7
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d0e6      	beq.n	8004058 <_printf_common+0xa4>
 800408a:	3601      	adds	r6, #1
 800408c:	e7d9      	b.n	8004042 <_printf_common+0x8e>
	...

08004090 <_printf_i>:
 8004090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	7e0f      	ldrb	r7, [r1, #24]
 8004096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004098:	2f78      	cmp	r7, #120	; 0x78
 800409a:	4691      	mov	r9, r2
 800409c:	4680      	mov	r8, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	469a      	mov	sl, r3
 80040a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040a6:	d807      	bhi.n	80040b8 <_printf_i+0x28>
 80040a8:	2f62      	cmp	r7, #98	; 0x62
 80040aa:	d80a      	bhi.n	80040c2 <_printf_i+0x32>
 80040ac:	2f00      	cmp	r7, #0
 80040ae:	f000 80d8 	beq.w	8004262 <_printf_i+0x1d2>
 80040b2:	2f58      	cmp	r7, #88	; 0x58
 80040b4:	f000 80a3 	beq.w	80041fe <_printf_i+0x16e>
 80040b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040c0:	e03a      	b.n	8004138 <_printf_i+0xa8>
 80040c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040c6:	2b15      	cmp	r3, #21
 80040c8:	d8f6      	bhi.n	80040b8 <_printf_i+0x28>
 80040ca:	a101      	add	r1, pc, #4	; (adr r1, 80040d0 <_printf_i+0x40>)
 80040cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040d0:	08004129 	.word	0x08004129
 80040d4:	0800413d 	.word	0x0800413d
 80040d8:	080040b9 	.word	0x080040b9
 80040dc:	080040b9 	.word	0x080040b9
 80040e0:	080040b9 	.word	0x080040b9
 80040e4:	080040b9 	.word	0x080040b9
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	080040b9 	.word	0x080040b9
 80040f0:	080040b9 	.word	0x080040b9
 80040f4:	080040b9 	.word	0x080040b9
 80040f8:	080040b9 	.word	0x080040b9
 80040fc:	08004249 	.word	0x08004249
 8004100:	0800416d 	.word	0x0800416d
 8004104:	0800422b 	.word	0x0800422b
 8004108:	080040b9 	.word	0x080040b9
 800410c:	080040b9 	.word	0x080040b9
 8004110:	0800426b 	.word	0x0800426b
 8004114:	080040b9 	.word	0x080040b9
 8004118:	0800416d 	.word	0x0800416d
 800411c:	080040b9 	.word	0x080040b9
 8004120:	080040b9 	.word	0x080040b9
 8004124:	08004233 	.word	0x08004233
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	602a      	str	r2, [r5, #0]
 8004130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004138:	2301      	movs	r3, #1
 800413a:	e0a3      	b.n	8004284 <_printf_i+0x1f4>
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	6829      	ldr	r1, [r5, #0]
 8004140:	0606      	lsls	r6, r0, #24
 8004142:	f101 0304 	add.w	r3, r1, #4
 8004146:	d50a      	bpl.n	800415e <_printf_i+0xce>
 8004148:	680e      	ldr	r6, [r1, #0]
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	2e00      	cmp	r6, #0
 800414e:	da03      	bge.n	8004158 <_printf_i+0xc8>
 8004150:	232d      	movs	r3, #45	; 0x2d
 8004152:	4276      	negs	r6, r6
 8004154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004158:	485e      	ldr	r0, [pc, #376]	; (80042d4 <_printf_i+0x244>)
 800415a:	230a      	movs	r3, #10
 800415c:	e019      	b.n	8004192 <_printf_i+0x102>
 800415e:	680e      	ldr	r6, [r1, #0]
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004166:	bf18      	it	ne
 8004168:	b236      	sxthne	r6, r6
 800416a:	e7ef      	b.n	800414c <_printf_i+0xbc>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	1d19      	adds	r1, r3, #4
 8004172:	6029      	str	r1, [r5, #0]
 8004174:	0601      	lsls	r1, r0, #24
 8004176:	d501      	bpl.n	800417c <_printf_i+0xec>
 8004178:	681e      	ldr	r6, [r3, #0]
 800417a:	e002      	b.n	8004182 <_printf_i+0xf2>
 800417c:	0646      	lsls	r6, r0, #25
 800417e:	d5fb      	bpl.n	8004178 <_printf_i+0xe8>
 8004180:	881e      	ldrh	r6, [r3, #0]
 8004182:	4854      	ldr	r0, [pc, #336]	; (80042d4 <_printf_i+0x244>)
 8004184:	2f6f      	cmp	r7, #111	; 0x6f
 8004186:	bf0c      	ite	eq
 8004188:	2308      	moveq	r3, #8
 800418a:	230a      	movne	r3, #10
 800418c:	2100      	movs	r1, #0
 800418e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004192:	6865      	ldr	r5, [r4, #4]
 8004194:	60a5      	str	r5, [r4, #8]
 8004196:	2d00      	cmp	r5, #0
 8004198:	bfa2      	ittt	ge
 800419a:	6821      	ldrge	r1, [r4, #0]
 800419c:	f021 0104 	bicge.w	r1, r1, #4
 80041a0:	6021      	strge	r1, [r4, #0]
 80041a2:	b90e      	cbnz	r6, 80041a8 <_printf_i+0x118>
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	d04d      	beq.n	8004244 <_printf_i+0x1b4>
 80041a8:	4615      	mov	r5, r2
 80041aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ae:	fb03 6711 	mls	r7, r3, r1, r6
 80041b2:	5dc7      	ldrb	r7, [r0, r7]
 80041b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041b8:	4637      	mov	r7, r6
 80041ba:	42bb      	cmp	r3, r7
 80041bc:	460e      	mov	r6, r1
 80041be:	d9f4      	bls.n	80041aa <_printf_i+0x11a>
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d10b      	bne.n	80041dc <_printf_i+0x14c>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	07de      	lsls	r6, r3, #31
 80041c8:	d508      	bpl.n	80041dc <_printf_i+0x14c>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	6861      	ldr	r1, [r4, #4]
 80041ce:	4299      	cmp	r1, r3
 80041d0:	bfde      	ittt	le
 80041d2:	2330      	movle	r3, #48	; 0x30
 80041d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041dc:	1b52      	subs	r2, r2, r5
 80041de:	6122      	str	r2, [r4, #16]
 80041e0:	f8cd a000 	str.w	sl, [sp]
 80041e4:	464b      	mov	r3, r9
 80041e6:	aa03      	add	r2, sp, #12
 80041e8:	4621      	mov	r1, r4
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7ff fee2 	bl	8003fb4 <_printf_common>
 80041f0:	3001      	adds	r0, #1
 80041f2:	d14c      	bne.n	800428e <_printf_i+0x1fe>
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	b004      	add	sp, #16
 80041fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fe:	4835      	ldr	r0, [pc, #212]	; (80042d4 <_printf_i+0x244>)
 8004200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004204:	6829      	ldr	r1, [r5, #0]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	f851 6b04 	ldr.w	r6, [r1], #4
 800420c:	6029      	str	r1, [r5, #0]
 800420e:	061d      	lsls	r5, r3, #24
 8004210:	d514      	bpl.n	800423c <_printf_i+0x1ac>
 8004212:	07df      	lsls	r7, r3, #31
 8004214:	bf44      	itt	mi
 8004216:	f043 0320 	orrmi.w	r3, r3, #32
 800421a:	6023      	strmi	r3, [r4, #0]
 800421c:	b91e      	cbnz	r6, 8004226 <_printf_i+0x196>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f023 0320 	bic.w	r3, r3, #32
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	2310      	movs	r3, #16
 8004228:	e7b0      	b.n	800418c <_printf_i+0xfc>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	2378      	movs	r3, #120	; 0x78
 8004234:	4828      	ldr	r0, [pc, #160]	; (80042d8 <_printf_i+0x248>)
 8004236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800423a:	e7e3      	b.n	8004204 <_printf_i+0x174>
 800423c:	0659      	lsls	r1, r3, #25
 800423e:	bf48      	it	mi
 8004240:	b2b6      	uxthmi	r6, r6
 8004242:	e7e6      	b.n	8004212 <_printf_i+0x182>
 8004244:	4615      	mov	r5, r2
 8004246:	e7bb      	b.n	80041c0 <_printf_i+0x130>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	6826      	ldr	r6, [r4, #0]
 800424c:	6961      	ldr	r1, [r4, #20]
 800424e:	1d18      	adds	r0, r3, #4
 8004250:	6028      	str	r0, [r5, #0]
 8004252:	0635      	lsls	r5, r6, #24
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	d501      	bpl.n	800425c <_printf_i+0x1cc>
 8004258:	6019      	str	r1, [r3, #0]
 800425a:	e002      	b.n	8004262 <_printf_i+0x1d2>
 800425c:	0670      	lsls	r0, r6, #25
 800425e:	d5fb      	bpl.n	8004258 <_printf_i+0x1c8>
 8004260:	8019      	strh	r1, [r3, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	4615      	mov	r5, r2
 8004268:	e7ba      	b.n	80041e0 <_printf_i+0x150>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	602a      	str	r2, [r5, #0]
 8004270:	681d      	ldr	r5, [r3, #0]
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	2100      	movs	r1, #0
 8004276:	4628      	mov	r0, r5
 8004278:	f7fb ffba 	bl	80001f0 <memchr>
 800427c:	b108      	cbz	r0, 8004282 <_printf_i+0x1f2>
 800427e:	1b40      	subs	r0, r0, r5
 8004280:	6060      	str	r0, [r4, #4]
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	2300      	movs	r3, #0
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428c:	e7a8      	b.n	80041e0 <_printf_i+0x150>
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	462a      	mov	r2, r5
 8004292:	4649      	mov	r1, r9
 8004294:	4640      	mov	r0, r8
 8004296:	47d0      	blx	sl
 8004298:	3001      	adds	r0, #1
 800429a:	d0ab      	beq.n	80041f4 <_printf_i+0x164>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	079b      	lsls	r3, r3, #30
 80042a0:	d413      	bmi.n	80042ca <_printf_i+0x23a>
 80042a2:	68e0      	ldr	r0, [r4, #12]
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	4298      	cmp	r0, r3
 80042a8:	bfb8      	it	lt
 80042aa:	4618      	movlt	r0, r3
 80042ac:	e7a4      	b.n	80041f8 <_printf_i+0x168>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4632      	mov	r2, r6
 80042b2:	4649      	mov	r1, r9
 80042b4:	4640      	mov	r0, r8
 80042b6:	47d0      	blx	sl
 80042b8:	3001      	adds	r0, #1
 80042ba:	d09b      	beq.n	80041f4 <_printf_i+0x164>
 80042bc:	3501      	adds	r5, #1
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	9903      	ldr	r1, [sp, #12]
 80042c2:	1a5b      	subs	r3, r3, r1
 80042c4:	42ab      	cmp	r3, r5
 80042c6:	dcf2      	bgt.n	80042ae <_printf_i+0x21e>
 80042c8:	e7eb      	b.n	80042a2 <_printf_i+0x212>
 80042ca:	2500      	movs	r5, #0
 80042cc:	f104 0619 	add.w	r6, r4, #25
 80042d0:	e7f5      	b.n	80042be <_printf_i+0x22e>
 80042d2:	bf00      	nop
 80042d4:	080049b5 	.word	0x080049b5
 80042d8:	080049c6 	.word	0x080049c6

080042dc <_sbrk_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d06      	ldr	r5, [pc, #24]	; (80042f8 <_sbrk_r+0x1c>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fd f8ea 	bl	80014c0 <_sbrk>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_sbrk_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_sbrk_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	200000f4 	.word	0x200000f4

080042fc <__sread>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	460c      	mov	r4, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	f000 fab2 	bl	800486c <_read_r>
 8004308:	2800      	cmp	r0, #0
 800430a:	bfab      	itete	ge
 800430c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800430e:	89a3      	ldrhlt	r3, [r4, #12]
 8004310:	181b      	addge	r3, r3, r0
 8004312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004316:	bfac      	ite	ge
 8004318:	6563      	strge	r3, [r4, #84]	; 0x54
 800431a:	81a3      	strhlt	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__swrite>:
 800431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	461f      	mov	r7, r3
 8004324:	898b      	ldrh	r3, [r1, #12]
 8004326:	05db      	lsls	r3, r3, #23
 8004328:	4605      	mov	r5, r0
 800432a:	460c      	mov	r4, r1
 800432c:	4616      	mov	r6, r2
 800432e:	d505      	bpl.n	800433c <__swrite+0x1e>
 8004330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004334:	2302      	movs	r3, #2
 8004336:	2200      	movs	r2, #0
 8004338:	f000 f9c8 	bl	80046cc <_lseek_r>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	4632      	mov	r2, r6
 800434a:	463b      	mov	r3, r7
 800434c:	4628      	mov	r0, r5
 800434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	f000 b869 	b.w	8004428 <_write_r>

08004356 <__sseek>:
 8004356:	b510      	push	{r4, lr}
 8004358:	460c      	mov	r4, r1
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 f9b5 	bl	80046cc <_lseek_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	bf15      	itete	ne
 8004368:	6560      	strne	r0, [r4, #84]	; 0x54
 800436a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800436e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004372:	81a3      	strheq	r3, [r4, #12]
 8004374:	bf18      	it	ne
 8004376:	81a3      	strhne	r3, [r4, #12]
 8004378:	bd10      	pop	{r4, pc}

0800437a <__sclose>:
 800437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437e:	f000 b8d3 	b.w	8004528 <_close_r>
	...

08004384 <__swbuf_r>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	460e      	mov	r6, r1
 8004388:	4614      	mov	r4, r2
 800438a:	4605      	mov	r5, r0
 800438c:	b118      	cbz	r0, 8004396 <__swbuf_r+0x12>
 800438e:	6983      	ldr	r3, [r0, #24]
 8004390:	b90b      	cbnz	r3, 8004396 <__swbuf_r+0x12>
 8004392:	f7ff fb81 	bl	8003a98 <__sinit>
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <__swbuf_r+0x98>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d12b      	bne.n	80043f4 <__swbuf_r+0x70>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	69a3      	ldr	r3, [r4, #24]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	071a      	lsls	r2, r3, #28
 80043a6:	d52f      	bpl.n	8004408 <__swbuf_r+0x84>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	b36b      	cbz	r3, 8004408 <__swbuf_r+0x84>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	1ac0      	subs	r0, r0, r3
 80043b2:	6963      	ldr	r3, [r4, #20]
 80043b4:	b2f6      	uxtb	r6, r6
 80043b6:	4283      	cmp	r3, r0
 80043b8:	4637      	mov	r7, r6
 80043ba:	dc04      	bgt.n	80043c6 <__swbuf_r+0x42>
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f948 	bl	8004654 <_fflush_r>
 80043c4:	bb30      	cbnz	r0, 8004414 <__swbuf_r+0x90>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	6022      	str	r2, [r4, #0]
 80043d2:	701e      	strb	r6, [r3, #0]
 80043d4:	6963      	ldr	r3, [r4, #20]
 80043d6:	3001      	adds	r0, #1
 80043d8:	4283      	cmp	r3, r0
 80043da:	d004      	beq.n	80043e6 <__swbuf_r+0x62>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d506      	bpl.n	80043f0 <__swbuf_r+0x6c>
 80043e2:	2e0a      	cmp	r6, #10
 80043e4:	d104      	bne.n	80043f0 <__swbuf_r+0x6c>
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 f933 	bl	8004654 <_fflush_r>
 80043ee:	b988      	cbnz	r0, 8004414 <__swbuf_r+0x90>
 80043f0:	4638      	mov	r0, r7
 80043f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <__swbuf_r+0x9c>)
 80043f6:	429c      	cmp	r4, r3
 80043f8:	d101      	bne.n	80043fe <__swbuf_r+0x7a>
 80043fa:	68ac      	ldr	r4, [r5, #8]
 80043fc:	e7cf      	b.n	800439e <__swbuf_r+0x1a>
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <__swbuf_r+0xa0>)
 8004400:	429c      	cmp	r4, r3
 8004402:	bf08      	it	eq
 8004404:	68ec      	ldreq	r4, [r5, #12]
 8004406:	e7ca      	b.n	800439e <__swbuf_r+0x1a>
 8004408:	4621      	mov	r1, r4
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f81e 	bl	800444c <__swsetup_r>
 8004410:	2800      	cmp	r0, #0
 8004412:	d0cb      	beq.n	80043ac <__swbuf_r+0x28>
 8004414:	f04f 37ff 	mov.w	r7, #4294967295
 8004418:	e7ea      	b.n	80043f0 <__swbuf_r+0x6c>
 800441a:	bf00      	nop
 800441c:	08004964 	.word	0x08004964
 8004420:	08004984 	.word	0x08004984
 8004424:	08004944 	.word	0x08004944

08004428 <_write_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d07      	ldr	r5, [pc, #28]	; (8004448 <_write_r+0x20>)
 800442c:	4604      	mov	r4, r0
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	2200      	movs	r2, #0
 8004434:	602a      	str	r2, [r5, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fff1 	bl	800141e <_write>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_write_r+0x1e>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_write_r+0x1e>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200000f4 	.word	0x200000f4

0800444c <__swsetup_r>:
 800444c:	4b32      	ldr	r3, [pc, #200]	; (8004518 <__swsetup_r+0xcc>)
 800444e:	b570      	push	{r4, r5, r6, lr}
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	4606      	mov	r6, r0
 8004454:	460c      	mov	r4, r1
 8004456:	b125      	cbz	r5, 8004462 <__swsetup_r+0x16>
 8004458:	69ab      	ldr	r3, [r5, #24]
 800445a:	b913      	cbnz	r3, 8004462 <__swsetup_r+0x16>
 800445c:	4628      	mov	r0, r5
 800445e:	f7ff fb1b 	bl	8003a98 <__sinit>
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <__swsetup_r+0xd0>)
 8004464:	429c      	cmp	r4, r3
 8004466:	d10f      	bne.n	8004488 <__swsetup_r+0x3c>
 8004468:	686c      	ldr	r4, [r5, #4]
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004470:	0719      	lsls	r1, r3, #28
 8004472:	d42c      	bmi.n	80044ce <__swsetup_r+0x82>
 8004474:	06dd      	lsls	r5, r3, #27
 8004476:	d411      	bmi.n	800449c <__swsetup_r+0x50>
 8004478:	2309      	movs	r3, #9
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	f04f 30ff 	mov.w	r0, #4294967295
 8004486:	e03e      	b.n	8004506 <__swsetup_r+0xba>
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <__swsetup_r+0xd4>)
 800448a:	429c      	cmp	r4, r3
 800448c:	d101      	bne.n	8004492 <__swsetup_r+0x46>
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	e7eb      	b.n	800446a <__swsetup_r+0x1e>
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <__swsetup_r+0xd8>)
 8004494:	429c      	cmp	r4, r3
 8004496:	bf08      	it	eq
 8004498:	68ec      	ldreq	r4, [r5, #12]
 800449a:	e7e6      	b.n	800446a <__swsetup_r+0x1e>
 800449c:	0758      	lsls	r0, r3, #29
 800449e:	d512      	bpl.n	80044c6 <__swsetup_r+0x7a>
 80044a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a2:	b141      	cbz	r1, 80044b6 <__swsetup_r+0x6a>
 80044a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a8:	4299      	cmp	r1, r3
 80044aa:	d002      	beq.n	80044b2 <__swsetup_r+0x66>
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f991 	bl	80047d4 <_free_r>
 80044b2:	2300      	movs	r3, #0
 80044b4:	6363      	str	r3, [r4, #52]	; 0x34
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	b94b      	cbnz	r3, 80044e6 <__swsetup_r+0x9a>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d003      	beq.n	80044e6 <__swsetup_r+0x9a>
 80044de:	4621      	mov	r1, r4
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 f92b 	bl	800473c <__smakebuf_r>
 80044e6:	89a0      	ldrh	r0, [r4, #12]
 80044e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ec:	f010 0301 	ands.w	r3, r0, #1
 80044f0:	d00a      	beq.n	8004508 <__swsetup_r+0xbc>
 80044f2:	2300      	movs	r3, #0
 80044f4:	60a3      	str	r3, [r4, #8]
 80044f6:	6963      	ldr	r3, [r4, #20]
 80044f8:	425b      	negs	r3, r3
 80044fa:	61a3      	str	r3, [r4, #24]
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	b943      	cbnz	r3, 8004512 <__swsetup_r+0xc6>
 8004500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004504:	d1ba      	bne.n	800447c <__swsetup_r+0x30>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	0781      	lsls	r1, r0, #30
 800450a:	bf58      	it	pl
 800450c:	6963      	ldrpl	r3, [r4, #20]
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	e7f4      	b.n	80044fc <__swsetup_r+0xb0>
 8004512:	2000      	movs	r0, #0
 8004514:	e7f7      	b.n	8004506 <__swsetup_r+0xba>
 8004516:	bf00      	nop
 8004518:	2000000c 	.word	0x2000000c
 800451c:	08004964 	.word	0x08004964
 8004520:	08004984 	.word	0x08004984
 8004524:	08004944 	.word	0x08004944

08004528 <_close_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d06      	ldr	r5, [pc, #24]	; (8004544 <_close_r+0x1c>)
 800452c:	2300      	movs	r3, #0
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fc ff8f 	bl	8001456 <_close>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_close_r+0x1a>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_close_r+0x1a>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200000f4 	.word	0x200000f4

08004548 <__sflush_r>:
 8004548:	898a      	ldrh	r2, [r1, #12]
 800454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	4605      	mov	r5, r0
 8004550:	0710      	lsls	r0, r2, #28
 8004552:	460c      	mov	r4, r1
 8004554:	d458      	bmi.n	8004608 <__sflush_r+0xc0>
 8004556:	684b      	ldr	r3, [r1, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	dc05      	bgt.n	8004568 <__sflush_r+0x20>
 800455c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	dc02      	bgt.n	8004568 <__sflush_r+0x20>
 8004562:	2000      	movs	r0, #0
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800456a:	2e00      	cmp	r6, #0
 800456c:	d0f9      	beq.n	8004562 <__sflush_r+0x1a>
 800456e:	2300      	movs	r3, #0
 8004570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004574:	682f      	ldr	r7, [r5, #0]
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	d032      	beq.n	80045e0 <__sflush_r+0x98>
 800457a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	075a      	lsls	r2, r3, #29
 8004580:	d505      	bpl.n	800458e <__sflush_r+0x46>
 8004582:	6863      	ldr	r3, [r4, #4]
 8004584:	1ac0      	subs	r0, r0, r3
 8004586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004588:	b10b      	cbz	r3, 800458e <__sflush_r+0x46>
 800458a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800458c:	1ac0      	subs	r0, r0, r3
 800458e:	2300      	movs	r3, #0
 8004590:	4602      	mov	r2, r0
 8004592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004594:	6a21      	ldr	r1, [r4, #32]
 8004596:	4628      	mov	r0, r5
 8004598:	47b0      	blx	r6
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	d106      	bne.n	80045ae <__sflush_r+0x66>
 80045a0:	6829      	ldr	r1, [r5, #0]
 80045a2:	291d      	cmp	r1, #29
 80045a4:	d82c      	bhi.n	8004600 <__sflush_r+0xb8>
 80045a6:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <__sflush_r+0x108>)
 80045a8:	40ca      	lsrs	r2, r1
 80045aa:	07d6      	lsls	r6, r2, #31
 80045ac:	d528      	bpl.n	8004600 <__sflush_r+0xb8>
 80045ae:	2200      	movs	r2, #0
 80045b0:	6062      	str	r2, [r4, #4]
 80045b2:	04d9      	lsls	r1, r3, #19
 80045b4:	6922      	ldr	r2, [r4, #16]
 80045b6:	6022      	str	r2, [r4, #0]
 80045b8:	d504      	bpl.n	80045c4 <__sflush_r+0x7c>
 80045ba:	1c42      	adds	r2, r0, #1
 80045bc:	d101      	bne.n	80045c2 <__sflush_r+0x7a>
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	b903      	cbnz	r3, 80045c4 <__sflush_r+0x7c>
 80045c2:	6560      	str	r0, [r4, #84]	; 0x54
 80045c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c6:	602f      	str	r7, [r5, #0]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d0ca      	beq.n	8004562 <__sflush_r+0x1a>
 80045cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d0:	4299      	cmp	r1, r3
 80045d2:	d002      	beq.n	80045da <__sflush_r+0x92>
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f8fd 	bl	80047d4 <_free_r>
 80045da:	2000      	movs	r0, #0
 80045dc:	6360      	str	r0, [r4, #52]	; 0x34
 80045de:	e7c1      	b.n	8004564 <__sflush_r+0x1c>
 80045e0:	6a21      	ldr	r1, [r4, #32]
 80045e2:	2301      	movs	r3, #1
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b0      	blx	r6
 80045e8:	1c41      	adds	r1, r0, #1
 80045ea:	d1c7      	bne.n	800457c <__sflush_r+0x34>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0c4      	beq.n	800457c <__sflush_r+0x34>
 80045f2:	2b1d      	cmp	r3, #29
 80045f4:	d001      	beq.n	80045fa <__sflush_r+0xb2>
 80045f6:	2b16      	cmp	r3, #22
 80045f8:	d101      	bne.n	80045fe <__sflush_r+0xb6>
 80045fa:	602f      	str	r7, [r5, #0]
 80045fc:	e7b1      	b.n	8004562 <__sflush_r+0x1a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	e7ad      	b.n	8004564 <__sflush_r+0x1c>
 8004608:	690f      	ldr	r7, [r1, #16]
 800460a:	2f00      	cmp	r7, #0
 800460c:	d0a9      	beq.n	8004562 <__sflush_r+0x1a>
 800460e:	0793      	lsls	r3, r2, #30
 8004610:	680e      	ldr	r6, [r1, #0]
 8004612:	bf08      	it	eq
 8004614:	694b      	ldreq	r3, [r1, #20]
 8004616:	600f      	str	r7, [r1, #0]
 8004618:	bf18      	it	ne
 800461a:	2300      	movne	r3, #0
 800461c:	eba6 0807 	sub.w	r8, r6, r7
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	f1b8 0f00 	cmp.w	r8, #0
 8004626:	dd9c      	ble.n	8004562 <__sflush_r+0x1a>
 8004628:	6a21      	ldr	r1, [r4, #32]
 800462a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800462c:	4643      	mov	r3, r8
 800462e:	463a      	mov	r2, r7
 8004630:	4628      	mov	r0, r5
 8004632:	47b0      	blx	r6
 8004634:	2800      	cmp	r0, #0
 8004636:	dc06      	bgt.n	8004646 <__sflush_r+0xfe>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e78e      	b.n	8004564 <__sflush_r+0x1c>
 8004646:	4407      	add	r7, r0
 8004648:	eba8 0800 	sub.w	r8, r8, r0
 800464c:	e7e9      	b.n	8004622 <__sflush_r+0xda>
 800464e:	bf00      	nop
 8004650:	20400001 	.word	0x20400001

08004654 <_fflush_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	690b      	ldr	r3, [r1, #16]
 8004658:	4605      	mov	r5, r0
 800465a:	460c      	mov	r4, r1
 800465c:	b913      	cbnz	r3, 8004664 <_fflush_r+0x10>
 800465e:	2500      	movs	r5, #0
 8004660:	4628      	mov	r0, r5
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	b118      	cbz	r0, 800466e <_fflush_r+0x1a>
 8004666:	6983      	ldr	r3, [r0, #24]
 8004668:	b90b      	cbnz	r3, 800466e <_fflush_r+0x1a>
 800466a:	f7ff fa15 	bl	8003a98 <__sinit>
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <_fflush_r+0x6c>)
 8004670:	429c      	cmp	r4, r3
 8004672:	d11b      	bne.n	80046ac <_fflush_r+0x58>
 8004674:	686c      	ldr	r4, [r5, #4]
 8004676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ef      	beq.n	800465e <_fflush_r+0xa>
 800467e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004680:	07d0      	lsls	r0, r2, #31
 8004682:	d404      	bmi.n	800468e <_fflush_r+0x3a>
 8004684:	0599      	lsls	r1, r3, #22
 8004686:	d402      	bmi.n	800468e <_fflush_r+0x3a>
 8004688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468a:	f7ff faa3 	bl	8003bd4 <__retarget_lock_acquire_recursive>
 800468e:	4628      	mov	r0, r5
 8004690:	4621      	mov	r1, r4
 8004692:	f7ff ff59 	bl	8004548 <__sflush_r>
 8004696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004698:	07da      	lsls	r2, r3, #31
 800469a:	4605      	mov	r5, r0
 800469c:	d4e0      	bmi.n	8004660 <_fflush_r+0xc>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	059b      	lsls	r3, r3, #22
 80046a2:	d4dd      	bmi.n	8004660 <_fflush_r+0xc>
 80046a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a6:	f7ff fa96 	bl	8003bd6 <__retarget_lock_release_recursive>
 80046aa:	e7d9      	b.n	8004660 <_fflush_r+0xc>
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <_fflush_r+0x70>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d101      	bne.n	80046b6 <_fflush_r+0x62>
 80046b2:	68ac      	ldr	r4, [r5, #8]
 80046b4:	e7df      	b.n	8004676 <_fflush_r+0x22>
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <_fflush_r+0x74>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	bf08      	it	eq
 80046bc:	68ec      	ldreq	r4, [r5, #12]
 80046be:	e7da      	b.n	8004676 <_fflush_r+0x22>
 80046c0:	08004964 	.word	0x08004964
 80046c4:	08004984 	.word	0x08004984
 80046c8:	08004944 	.word	0x08004944

080046cc <_lseek_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	; (80046ec <_lseek_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc fee2 	bl	80014a4 <_lseek>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_lseek_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_lseek_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	200000f4 	.word	0x200000f4

080046f0 <__swhatbuf_r>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f8:	2900      	cmp	r1, #0
 80046fa:	b096      	sub	sp, #88	; 0x58
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	da08      	bge.n	8004714 <__swhatbuf_r+0x24>
 8004702:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	602a      	str	r2, [r5, #0]
 800470a:	061a      	lsls	r2, r3, #24
 800470c:	d410      	bmi.n	8004730 <__swhatbuf_r+0x40>
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	e00e      	b.n	8004732 <__swhatbuf_r+0x42>
 8004714:	466a      	mov	r2, sp
 8004716:	f000 f8bb 	bl	8004890 <_fstat_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	dbf1      	blt.n	8004702 <__swhatbuf_r+0x12>
 800471e:	9a01      	ldr	r2, [sp, #4]
 8004720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004728:	425a      	negs	r2, r3
 800472a:	415a      	adcs	r2, r3
 800472c:	602a      	str	r2, [r5, #0]
 800472e:	e7ee      	b.n	800470e <__swhatbuf_r+0x1e>
 8004730:	2340      	movs	r3, #64	; 0x40
 8004732:	2000      	movs	r0, #0
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	b016      	add	sp, #88	; 0x58
 8004738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800473c <__smakebuf_r>:
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004740:	079d      	lsls	r5, r3, #30
 8004742:	4606      	mov	r6, r0
 8004744:	460c      	mov	r4, r1
 8004746:	d507      	bpl.n	8004758 <__smakebuf_r+0x1c>
 8004748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	2301      	movs	r3, #1
 8004752:	6163      	str	r3, [r4, #20]
 8004754:	b002      	add	sp, #8
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	ab01      	add	r3, sp, #4
 800475a:	466a      	mov	r2, sp
 800475c:	f7ff ffc8 	bl	80046f0 <__swhatbuf_r>
 8004760:	9900      	ldr	r1, [sp, #0]
 8004762:	4605      	mov	r5, r0
 8004764:	4630      	mov	r0, r6
 8004766:	f7ff fa57 	bl	8003c18 <_malloc_r>
 800476a:	b948      	cbnz	r0, 8004780 <__smakebuf_r+0x44>
 800476c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004770:	059a      	lsls	r2, r3, #22
 8004772:	d4ef      	bmi.n	8004754 <__smakebuf_r+0x18>
 8004774:	f023 0303 	bic.w	r3, r3, #3
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	e7e3      	b.n	8004748 <__smakebuf_r+0xc>
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <__smakebuf_r+0x7c>)
 8004782:	62b3      	str	r3, [r6, #40]	; 0x28
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	6020      	str	r0, [r4, #0]
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	6163      	str	r3, [r4, #20]
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	6120      	str	r0, [r4, #16]
 8004796:	b15b      	cbz	r3, 80047b0 <__smakebuf_r+0x74>
 8004798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f889 	bl	80048b4 <_isatty_r>
 80047a2:	b128      	cbz	r0, 80047b0 <__smakebuf_r+0x74>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	89a0      	ldrh	r0, [r4, #12]
 80047b2:	4305      	orrs	r5, r0
 80047b4:	81a5      	strh	r5, [r4, #12]
 80047b6:	e7cd      	b.n	8004754 <__smakebuf_r+0x18>
 80047b8:	08003a31 	.word	0x08003a31

080047bc <__malloc_lock>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__malloc_lock+0x8>)
 80047be:	f7ff ba09 	b.w	8003bd4 <__retarget_lock_acquire_recursive>
 80047c2:	bf00      	nop
 80047c4:	200000e8 	.word	0x200000e8

080047c8 <__malloc_unlock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__malloc_unlock+0x8>)
 80047ca:	f7ff ba04 	b.w	8003bd6 <__retarget_lock_release_recursive>
 80047ce:	bf00      	nop
 80047d0:	200000e8 	.word	0x200000e8

080047d4 <_free_r>:
 80047d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047d6:	2900      	cmp	r1, #0
 80047d8:	d044      	beq.n	8004864 <_free_r+0x90>
 80047da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047de:	9001      	str	r0, [sp, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f1a1 0404 	sub.w	r4, r1, #4
 80047e6:	bfb8      	it	lt
 80047e8:	18e4      	addlt	r4, r4, r3
 80047ea:	f7ff ffe7 	bl	80047bc <__malloc_lock>
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <_free_r+0x94>)
 80047f0:	9801      	ldr	r0, [sp, #4]
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	b933      	cbnz	r3, 8004804 <_free_r+0x30>
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	6014      	str	r4, [r2, #0]
 80047fa:	b003      	add	sp, #12
 80047fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004800:	f7ff bfe2 	b.w	80047c8 <__malloc_unlock>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d908      	bls.n	800481a <_free_r+0x46>
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	1961      	adds	r1, r4, r5
 800480c:	428b      	cmp	r3, r1
 800480e:	bf01      	itttt	eq
 8004810:	6819      	ldreq	r1, [r3, #0]
 8004812:	685b      	ldreq	r3, [r3, #4]
 8004814:	1949      	addeq	r1, r1, r5
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	e7ed      	b.n	80047f6 <_free_r+0x22>
 800481a:	461a      	mov	r2, r3
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b10b      	cbz	r3, 8004824 <_free_r+0x50>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d9fa      	bls.n	800481a <_free_r+0x46>
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	1855      	adds	r5, r2, r1
 8004828:	42a5      	cmp	r5, r4
 800482a:	d10b      	bne.n	8004844 <_free_r+0x70>
 800482c:	6824      	ldr	r4, [r4, #0]
 800482e:	4421      	add	r1, r4
 8004830:	1854      	adds	r4, r2, r1
 8004832:	42a3      	cmp	r3, r4
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	d1e0      	bne.n	80047fa <_free_r+0x26>
 8004838:	681c      	ldr	r4, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	6053      	str	r3, [r2, #4]
 800483e:	4421      	add	r1, r4
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	e7da      	b.n	80047fa <_free_r+0x26>
 8004844:	d902      	bls.n	800484c <_free_r+0x78>
 8004846:	230c      	movs	r3, #12
 8004848:	6003      	str	r3, [r0, #0]
 800484a:	e7d6      	b.n	80047fa <_free_r+0x26>
 800484c:	6825      	ldr	r5, [r4, #0]
 800484e:	1961      	adds	r1, r4, r5
 8004850:	428b      	cmp	r3, r1
 8004852:	bf04      	itt	eq
 8004854:	6819      	ldreq	r1, [r3, #0]
 8004856:	685b      	ldreq	r3, [r3, #4]
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	bf04      	itt	eq
 800485c:	1949      	addeq	r1, r1, r5
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6054      	str	r4, [r2, #4]
 8004862:	e7ca      	b.n	80047fa <_free_r+0x26>
 8004864:	b003      	add	sp, #12
 8004866:	bd30      	pop	{r4, r5, pc}
 8004868:	200000ec 	.word	0x200000ec

0800486c <_read_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	; (800488c <_read_r+0x20>)
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc fdb2 	bl	80013e4 <_read>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_read_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_read_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	200000f4 	.word	0x200000f4

08004890 <_fstat_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	; (80048b0 <_fstat_r+0x20>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	f7fc fde6 	bl	800146e <_fstat>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d102      	bne.n	80048ac <_fstat_r+0x1c>
 80048a6:	682b      	ldr	r3, [r5, #0]
 80048a8:	b103      	cbz	r3, 80048ac <_fstat_r+0x1c>
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	bf00      	nop
 80048b0:	200000f4 	.word	0x200000f4

080048b4 <_isatty_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d06      	ldr	r5, [pc, #24]	; (80048d0 <_isatty_r+0x1c>)
 80048b8:	2300      	movs	r3, #0
 80048ba:	4604      	mov	r4, r0
 80048bc:	4608      	mov	r0, r1
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	f7fc fde5 	bl	800148e <_isatty>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_isatty_r+0x1a>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_isatty_r+0x1a>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	200000f4 	.word	0x200000f4

080048d4 <_init>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr

080048e0 <_fini>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr
