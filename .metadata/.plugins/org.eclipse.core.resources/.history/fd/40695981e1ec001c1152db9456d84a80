#include "inc/sht3x_dis_stm32f4xx_port.h"

/*
typedef enum
{
  HAL_OK       = 0x00U,
  HAL_ERROR    = 0x01U,
  HAL_BUSY     = 0x02U,
  HAL_TIMEOUT  = 0x03U
} HAL_StatusTypeDef;
*/
char * const cadena_HAL_ERROR = " ! HAL_ERROR\n";
char * const cadena_HAL_BUSY = " ! HAL_BUSY\n";
char * const cadena_HAL_TIMEOUT = " ! HAL_TIMEOUT\n";

void SHT3x_DIS_write_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Master_Transmit(i2c_handle->instance, DevAddress<<1, pData, Size,2000);
	if(i2c_status != HAL_OK){
		_SHT3x_DIS_write_PORT_Error_Handler(i2c_status);
	}
}

void SHT3x_DIS_read_PORT(uint16_t DevAddress, uint8_t *pData, uint16_t Size, I2C_Handle_Port_t * const i2c_handle){
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Master_Receive(i2c_handle->instance, (DevAddress<<1), pData, Size,2000);
}

_SHT3x_DIS_write_PORT_Error_Handler (HAL_StatusTypeDef error){
	switch (error) {
		case HAL_ERROR:
			printf(&cadena_HAL_ERROR);
			break;
		case HAL_BUSY:
			printf(&cadena_HAL_BUSY);
			break;
		case HAL_TIMEOUT:
			printf(&cadena_HAL_TIMEOUT);
			break;
		default:
			break;
	}
}
